{"version":3,"sources":["../../../../../src/Apps/Artist/Components/ArtistCollectionsRail/ArtistCollectionEntity.tsx"],"names":["ArtistCollectionEntity","collection","action_type","Schema","ActionType","Click","context_module","ContextModule","CollectionsRail","context_page_owner_type","OwnerType","Artist","destination_path","sd","APP_URL","slug","type","Type","Thumbnail","props","headerImage","price_guidance","title","artworks_connection","artworks","edges","map","node","formattedTitle","split","bgImages","image","resized","url","imageSize","length","onLinkClick","bind","i","artistName","artist","a","name","alt","lazyLoad","objectFit","objectPosition","separator","precision","format","React","Component","CollectionTitle","Serif","StyledLink","Link","SingleImgContainer","Box","ImgOverlay","ArtworkImage","Image","width","ImgWrapper","Flex","ArtistCollectionEntityFragmentContainer"],"mappings":"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","sourcesContent":["import { Box, color, Flex, Image, Link, Sans, Serif } from \"@artsy/palette\"\nimport { ArtistCollectionEntity_collection } from \"__generated__/ArtistCollectionEntity_collection.graphql\"\nimport { track } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport currency from \"currency.js\"\nimport { compact } from \"lodash\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { data as sd } from \"sharify\"\nimport styled from \"styled-components\"\nimport { get } from \"Utils/get\"\n\nexport interface CollectionProps {\n  collection: ArtistCollectionEntity_collection\n  lazyLoad: boolean\n}\n\n@track()\nexport class ArtistCollectionEntity extends React.Component<CollectionProps> {\n  @track<CollectionProps>(({ collection }) => ({\n    action_type: Schema.ActionType.Click,\n    context_module: Schema.ContextModule.CollectionsRail,\n    context_page_owner_type: Schema.OwnerType.Artist,\n    destination_path: `${sd.APP_URL}/collection/${collection.slug}`,\n    type: Schema.Type.Thumbnail,\n  }))\n  onLinkClick() {\n    // noop\n  }\n\n  render() {\n    const {\n      headerImage,\n      price_guidance,\n      slug,\n      title,\n      artworks: { artworks_connection },\n    } = this.props.collection\n    const artworks = artworks_connection.edges.map(({ node }) => node)\n    const formattedTitle = (title && title.split(\": \")[1]) || title\n    const bgImages = compact(\n      artworks.map(({ image }) => image && image.resized && image.resized.url)\n    )\n    const imageSize =\n      bgImages.length === 1 ? 262 : bgImages.length === 2 ? 130 : 86\n\n    return (\n      <Box pr={2}>\n        <StyledLink\n          href={`${sd.APP_URL}/collection/${slug}`}\n          onClick={this.onLinkClick.bind(this)}\n        >\n          <ImgWrapper pb={1}>\n            {bgImages.length ? (\n              bgImages.map((url, i) => {\n                const artistName = get(artworks[i].artist, a => a.name)\n                const alt = `${artistName ? artistName + \", \" : \"\"}${\n                  artworks[i].title\n                }`\n                return (\n                  <SingleImgContainer key={i}>\n                    <ImgOverlay width={imageSize} />\n                    <ArtworkImage\n                      key={i}\n                      src={url}\n                      width={imageSize}\n                      alt={alt}\n                      lazyLoad={this.props.lazyLoad}\n                      style={{ objectFit: \"cover\", objectPosition: \"center\" }}\n                    />\n                  </SingleImgContainer>\n                )\n              })\n            ) : (\n              <ArtworkImage\n                src={headerImage}\n                lazyLoad={this.props.lazyLoad}\n                width={262}\n                style={{ objectFit: \"cover\", objectPosition: \"center\" }}\n              />\n            )}\n          </ImgWrapper>\n\n          <CollectionTitle size=\"3\">{formattedTitle}</CollectionTitle>\n          {price_guidance && (\n            <Sans size=\"2\" color=\"black60\">\n              From $\n              {currency(price_guidance, {\n                separator: \",\",\n                precision: 0,\n              }).format()}\n            </Sans>\n          )}\n        </StyledLink>\n      </Box>\n    )\n  }\n}\n\nconst CollectionTitle = styled(Serif)`\n  width: max-content;\n`\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n  &:hover {\n    text-decoration: none;\n\n    ${CollectionTitle} {\n      text-decoration: underline;\n    }\n  }\n`\n\nconst SingleImgContainer = styled(Box)`\n  position: relative;\n  margin-right: 2px;\n\n  &:last-child {\n    margin-right: 0;\n  }\n`\n\nconst ImgOverlay = styled(Box)<{ width: number }>`\n  height: 125px;\n  background-color: ${color(\"black30\")};\n  opacity: 0.1;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 7;\n`\n\nexport const ArtworkImage = styled(Image)<{ width: number }>`\n  width: ${({ width }) => width}px;\n  height: 125px;\n  background-color: ${color(\"black10\")};\n  opacity: 0.9;\n`\n\nconst ImgWrapper = styled(Flex)`\n  width: 262px;\n`\n\nexport const ArtistCollectionEntityFragmentContainer = createFragmentContainer(\n  ArtistCollectionEntity,\n  {\n    collection: graphql`\n      fragment ArtistCollectionEntity_collection on MarketingCollection {\n        headerImage\n        slug\n        title\n        price_guidance\n        artworks(aggregations: [TOTAL], sort: \"-decayed_merch\") {\n          artworks_connection(first: 3) {\n            edges {\n              node {\n                artist {\n                  name\n                }\n                title\n                image {\n                  resized(width: 262) {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n"],"file":"ArtistCollectionEntity.js"}