{"version":3,"sources":["../../../../../src/Apps/Artist/Routes/AuctionResults/ArtistAuctionResults.tsx"],"names":["logger","PAGE_SIZE","AuctionResultsContainer","isLoading","props","artist","auctionResults","pageInfo","hasNextPage","endCursor","loadAfter","relay","refetch","first","after","artistID","id","before","last","sort","error","cursor","toggleLoading","console","setState","prevProps","resort","auctionResultsLength","edges","length","totalCount","AuctionResultsState","state","selectedAuction","map","index","node","pageCursors","loadNext","Component","ArtistAuctionResultsRefetchContainer"],"mappings":"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","sourcesContent":["import { Col, Row } from \"@artsy/palette\"\nimport { ArtistAuctionResults_artist } from \"__generated__/ArtistAuctionResults_artist.graphql\"\nimport { PaginationFragmentContainer as Pagination } from \"Components/v2\"\nimport React, { Component } from \"react\"\nimport { createRefetchContainer, graphql, RelayRefetchProp } from \"react-relay\"\nimport { Subscribe } from \"unstated\"\nimport { ArtistAuctionDetailsModal } from \"./ArtistAuctionDetailsModal\"\nimport { AuctionResultItemFragmentContainer as AuctionResultItem } from \"./ArtistAuctionResultItem\"\nimport { AuctionResultsState } from \"./state\"\nimport { TableColumns } from \"./TableColumns\"\nimport { TableSidebar } from \"./TableSidebar\"\n\nimport { Box, Separator, Spacer } from \"@artsy/palette\"\n\nimport { LoadingArea, LoadingAreaState } from \"Components/v2/LoadingArea\"\nimport createLogger from \"Utils/logger\"\n\nconst logger = createLogger(\"ArtistAuctionResults.tsx\")\n\nconst PAGE_SIZE = 10\n\ninterface AuctionResultsProps {\n  relay: RelayRefetchProp\n  artist: ArtistAuctionResults_artist\n  sort: string\n}\n\nclass AuctionResultsContainer extends Component<\n  AuctionResultsProps,\n  LoadingAreaState\n> {\n  state = {\n    isLoading: false,\n  }\n\n  loadNext = () => {\n    const {\n      artist: {\n        auctionResults: {\n          pageInfo: { hasNextPage, endCursor },\n        },\n      },\n    } = this.props\n\n    if (hasNextPage) {\n      this.loadAfter(endCursor)\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.sort !== this.props.sort) {\n      this.resort()\n    }\n  }\n\n  resort = () => {\n    this.props.relay.refetch(\n      {\n        first: PAGE_SIZE,\n        after: null,\n        artistID: this.props.artist.id,\n        before: null,\n        last: null,\n        sort: this.props.sort,\n      },\n      null,\n      error => {\n        if (error) {\n          logger.error(error)\n        }\n      }\n    )\n  }\n\n  loadAfter = cursor => {\n    this.toggleLoading(true)\n\n    this.props.relay.refetch(\n      {\n        first: PAGE_SIZE,\n        after: cursor,\n        artistID: this.props.artist.id,\n        before: null,\n        last: null,\n        sort: this.props.sort,\n      },\n      null,\n      error => {\n        this.toggleLoading(false)\n\n        if (error) {\n          console.error(error)\n        }\n      }\n    )\n  }\n\n  toggleLoading = isLoading => {\n    this.setState({\n      isLoading,\n    })\n  }\n\n  render() {\n    const auctionResultsLength = this.props.artist.auctionResults.edges.length\n    const { totalCount } = this.props.artist.auctionResults\n    return (\n      <Subscribe to={[AuctionResultsState]}>\n        {({ state }: AuctionResultsState) => {\n          return (\n            <>\n              <Row>\n                <Col sm={2} pr={[0, 2]}>\n                  <TableSidebar count={totalCount} />\n                </Col>\n\n                <Col sm={10}>\n                  <TableColumns />\n\n                  <Box pt={0.5}>\n                    <Separator />\n                  </Box>\n\n                  <ArtistAuctionDetailsModal\n                    auctionResult={state.selectedAuction}\n                  />\n\n                  <Spacer mt={3} />\n\n                  <LoadingArea isLoading={this.state.isLoading}>\n                    {this.props.artist.auctionResults.edges.map(\n                      ({ node }, index) => {\n                        return (\n                          <React.Fragment key={index}>\n                            <AuctionResultItem\n                              auctionResult={node}\n                              lastChild={index === auctionResultsLength - 1}\n                            />\n                          </React.Fragment>\n                        )\n                      }\n                    )}\n                  </LoadingArea>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col>\n                  <Box>\n                    <Pagination\n                      hasNextPage={\n                        this.props.artist.auctionResults.pageInfo.hasNextPage\n                      }\n                      pageCursors={this.props.artist.auctionResults.pageCursors}\n                      onClick={this.loadAfter}\n                      onNext={this.loadNext}\n                      scrollTo=\"#jumpto-ArtistHeader\"\n                    />\n                  </Box>\n                </Col>\n              </Row>\n            </>\n          )\n        }}\n      </Subscribe>\n    )\n  }\n}\n\nexport const ArtistAuctionResultsRefetchContainer = createRefetchContainer(\n  (props: AuctionResultsProps) => {\n    return (\n      <Subscribe to={[AuctionResultsState]}>\n        {({ state }: AuctionResultsState) => {\n          return <AuctionResultsContainer {...props} sort={state.sort} />\n        }}\n      </Subscribe>\n    )\n  },\n  {\n    artist: graphql`\n      fragment ArtistAuctionResults_artist on Artist\n        @argumentDefinitions(\n          sort: { type: \"AuctionResultSorts\", defaultValue: DATE_DESC }\n          first: { type: \"Int\", defaultValue: 10 }\n          last: { type: \"Int\" }\n          after: { type: \"String\" }\n          before: { type: \"String\" }\n        ) {\n        id\n        auctionResults(\n          first: $first\n          after: $after\n          before: $before\n          last: $last\n          sort: $sort\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          pageCursors {\n            ...Pagination_pageCursors\n          }\n          totalCount\n          edges {\n            node {\n              ...ArtistAuctionResultItem_auctionResult\n            }\n          }\n        }\n      }\n    `,\n  },\n  graphql`\n    query ArtistAuctionResultsQuery(\n      $first: Int\n      $last: Int\n      $after: String\n      $before: String\n      $sort: AuctionResultSorts\n      $artistID: String!\n    ) {\n      artist(id: $artistID) {\n        ...ArtistAuctionResults_artist\n          @arguments(\n            first: $first\n            last: $last\n            after: $after\n            before: $before\n            sort: $sort\n          )\n      }\n    }\n  `\n)\n"],"file":"ArtistAuctionResults.js"}