{"version":3,"sources":["../../../../../../src/Apps/Artist/Routes/Overview/Components/ArtistArtworkFilter.tsx"],"names":["ArtistArtworkFilter","props","location","relay","artist","sidebarAggregations","tracking","filtered_artworks","hasFilter","__id","query","value","text","aggregations","counts","updateUrl","key","filterState","trackEvent","action_type","Schema","ActionType","CommercialFilterParamsChanged","changed","current","artworks","length","is_followed","ArtistArtworkFilterRefetchContainer"],"mappings":";;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AASA,IAAMA,mBAAuD,GAAG,SAA1DA,mBAA0D,CAAAC,KAAK,EAAI;AAAA,MAC/DC,QAD+D,GACdD,KADc,CAC/DC,QAD+D;AAAA,MACrDC,KADqD,GACdF,KADc,CACrDE,KADqD;AAAA,MAC9CC,MAD8C,GACdH,KADc,CAC9CG,MAD8C;AAAA,MACtCC,mBADsC,GACdJ,KADc,CACtCI,mBADsC;AAEvE,MAAMC,QAAQ,GAAG,yBAAjB;AAFuE,MAG/DC,iBAH+D,GAGzCH,MAHyC,CAG/DG,iBAH+D;AAKvE,MAAMC,SAAS,GAAGD,iBAAiB,IAAIA,iBAAiB,CAACE,IAAzD,CALuE,CAOvE;AACA;;AACA,MAAI,CAACD,SAAL,EAAgB,OAAO,IAAP;AAEhB,SACE,6BAAC,kDAAD;AACE,IAAA,OAAO,EAAEN,QAAQ,CAACQ,KADpB;AAEE,IAAA,WAAW,EAAE,CACX;AAAEC,MAAAA,KAAK,EAAE,gBAAT;AAA2BC,MAAAA,IAAI,EAAE;AAAjC,KADW,EAEX;AAAED,MAAAA,KAAK,EAAE,qBAAT;AAAgCC,MAAAA,IAAI,EAAE;AAAtC,KAFW,EAGX;AAAED,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,IAAI,EAAE;AAAhC,KAHW,EAIX;AAAED,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAJW,EAKX;AAAED,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KALW,CAFf;AASE,IAAA,YAAY,EAAEP,mBAAmB,CAACQ,YATpC;AAUE,IAAA,MAAM,EAAET,MAAM,CAACU,MAVjB;AAWE,IAAA,QAAQ,EAAEC,qBAXZ;AAYE,IAAA,aAAa,EAAE,uBAACC,GAAD,EAAML,KAAN,EAAaM,WAAb,EAA6B;AAC1CX,MAAAA,QAAQ,CAACY,UAAT,CAAoB;AAClBC,QAAAA,WAAW,EAAEC,MAAM,CAACC,UAAP,CAAkBC,6BADb;AAElBC,QAAAA,OAAO,sBAAKP,GAAL,EAAWL,KAAX,CAFW;AAGlBa,QAAAA,OAAO,EAAEP;AAHS,OAApB;AAKD;AAlBH,KAoBE,6BAAC,gCAAD;AACE,IAAA,KAAK,EAAEd,KADT;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,cAAc,EAAE;AACdS,MAAAA,YAAY,EAAE,CAAC,OAAD;AADA;AAHlB,KAOGT,MAAM,CAACU,MAAP,CAAcW,QAAd,CAAuBC,MAAvB,KAAkC,CAAlC,IACC,6BAAC,oBAAD;AAAW,IAAA,MAAM,EAAEtB,MAAnB;AAA2B,IAAA,WAAW,EAAEA,MAAM,CAACuB;AAA/C,IARJ,CApBF,CADF;AAkCD,CA7CD;;AA+CO,IAAMC,mCAAmC,GAAG,wCACjD5B,mBADiD,EAEjD;AACEI,EAAAA,MAAM;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADR,CAFiD;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAA5C","sourcesContent":["import { ArtistArtworkFilter_artist } from \"__generated__/ArtistArtworkFilter_artist.graphql\"\nimport { Overview_artist } from \"__generated__/Overview_artist.graphql\"\nimport { useTracking } from \"Artsy\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { BaseArtworkFilter } from \"Components/v2/ArtworkFilter\"\nimport { ArtworkFilterContextProvider } from \"Components/v2/ArtworkFilter/ArtworkFilterContext\"\nimport { updateUrl } from \"Components/v2/ArtworkFilter/Utils/urlBuilder\"\nimport { Location } from \"found\"\nimport React from \"react\"\nimport { createRefetchContainer, graphql, RelayRefetchProp } from \"react-relay\"\nimport { ZeroState } from \"./ZeroState\"\n\ninterface ArtistArtworkFilterProps {\n  artist: ArtistArtworkFilter_artist\n  relay: RelayRefetchProp\n  sidebarAggregations: Overview_artist[\"sidebarAggregations\"]\n  location: Location\n}\n\nconst ArtistArtworkFilter: React.FC<ArtistArtworkFilterProps> = props => {\n  const { location, relay, artist, sidebarAggregations } = props\n  const tracking = useTracking()\n  const { filtered_artworks } = artist\n\n  const hasFilter = filtered_artworks && filtered_artworks.__id\n\n  // If there was an error fetching the filter,\n  // we still want to render the rest of the page.\n  if (!hasFilter) return null\n\n  return (\n    <ArtworkFilterContextProvider\n      filters={location.query}\n      sortOptions={[\n        { value: \"-decayed_merch\", text: \"Default\" },\n        { value: \"-partner_updated_at\", text: \"Recently updated\" },\n        { value: \"-published_at\", text: \"Recently added\" },\n        { value: \"-year\", text: \"Artwork year (desc.)\" },\n        { value: \"year\", text: \"Artwork year (asc.)\" },\n      ]}\n      aggregations={sidebarAggregations.aggregations as any}\n      counts={artist.counts}\n      onChange={updateUrl}\n      onFilterClick={(key, value, filterState) => {\n        tracking.trackEvent({\n          action_type: Schema.ActionType.CommercialFilterParamsChanged,\n          changed: { [key]: value },\n          current: filterState,\n        })\n      }}\n    >\n      <BaseArtworkFilter\n        relay={relay}\n        viewer={artist}\n        relayVariables={{\n          aggregations: [\"TOTAL\"],\n        }}\n      >\n        {artist.counts.artworks.length === 0 && (\n          <ZeroState artist={artist} is_followed={artist.is_followed} />\n        )}\n      </BaseArtworkFilter>\n    </ArtworkFilterContextProvider>\n  )\n}\n\nexport const ArtistArtworkFilterRefetchContainer = createRefetchContainer(\n  ArtistArtworkFilter,\n  {\n    artist: graphql`\n      fragment ArtistArtworkFilter_artist on Artist\n        @argumentDefinitions(\n          partner_category: {\n            type: \"[String]\"\n            defaultValue: [\"blue-chip\", \"top-established\", \"top-emerging\"]\n          }\n          acquireable: { type: \"Boolean\" }\n          aggregations: { type: \"[ArtworkAggregation]\" }\n          artist_id: { type: \"String\" }\n          at_auction: { type: \"Boolean\" }\n          attribution_class: { type: \"[String]\" }\n          color: { type: \"String\" }\n          for_sale: { type: \"Boolean\" }\n          hasFilter: { type: \"Boolean\", defaultValue: false }\n          height: { type: \"String\" }\n          inquireable_only: { type: \"Boolean\" }\n          keyword: { type: \"String\" }\n          major_periods: { type: \"[String]\" }\n          medium: { type: \"String\", defaultValue: \"*\" }\n          offerable: { type: \"Boolean\" }\n          page: { type: \"Int\" }\n          partner_id: { type: \"ID\" }\n          price_range: { type: \"String\" }\n          sort: { type: \"String\", defaultValue: \"-partner_updated_at\" }\n          width: { type: \"String\" }\n        ) {\n        is_followed\n\n        counts {\n          partner_shows\n          for_sale_artworks\n          ecommerce_artworks\n          auction_artworks\n          artworks\n          has_make_offer_artworks\n        }\n\n        filtered_artworks(\n          acquireable: $acquireable\n          aggregations: $aggregations\n          artist_id: $artist_id\n          at_auction: $at_auction\n          attribution_class: $attribution_class\n          color: $color\n          for_sale: $for_sale\n          height: $height\n          inquireable_only: $inquireable_only\n          keyword: $keyword\n          major_periods: $major_periods\n          medium: $medium\n          offerable: $offerable\n          page: $page\n          partner_id: $partner_id\n          price_range: $price_range\n          size: 0\n          sort: $sort\n          width: $width\n        ) {\n          __id\n          ...ArtworkFilterArtworkGrid2_filtered_artworks\n        }\n      }\n    `,\n  },\n  graphql`\n    query ArtistArtworkFilterQuery(\n      $acquireable: Boolean\n      $aggregations: [ArtworkAggregation] = [\n        MEDIUM\n        TOTAL\n        GALLERY\n        INSTITUTION\n        MAJOR_PERIOD\n      ]\n      $artist_id: String!\n      $at_auction: Boolean\n      $attribution_class: [String]\n      $color: String\n      $for_sale: Boolean\n      $hasFilter: Boolean!\n      $height: String\n      $inquireable_only: Boolean\n      $keyword: String\n      $major_periods: [String]\n      $medium: String\n      $offerable: Boolean\n      $page: Int\n      $partner_id: ID\n      $price_range: String\n      $sort: String\n      $width: String\n    ) {\n      artist(id: $artist_id) {\n        ...ArtistArtworkFilter_artist\n          @arguments(\n            acquireable: $acquireable\n            aggregations: $aggregations\n            artist_id: $artist_id\n            at_auction: $at_auction\n            attribution_class: $attribution_class\n            color: $color\n            for_sale: $for_sale\n            hasFilter: $hasFilter\n            height: $height\n            inquireable_only: $inquireable_only\n            keyword: $keyword\n            major_periods: $major_periods\n            medium: $medium\n            offerable: $offerable\n            page: $page\n            partner_id: $partner_id\n            price_range: $price_range\n            sort: $sort\n            width: $width\n          )\n      }\n    }\n  `\n)\n"],"file":"ArtistArtworkFilter.js"}