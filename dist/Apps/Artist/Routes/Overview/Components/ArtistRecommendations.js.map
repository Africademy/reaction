{"version":3,"sources":["../../../../../../src/Apps/Artist/Routes/Overview/Components/ArtistRecommendations.tsx"],"names":["logger","PAGE_SIZE","ArtistRecommendations","artist","relay","fetchingNextPage","setFetchingNextPage","name","relatedArtists","a","related","artists","edges","map","edge","node","id","fetchData","hasMore","isLoading","loadMore","error","ShowMoreButton","onClick","loading","ArtistRecommendationsPaginationContainer","direction","getConnectionFromProps","props","getFragmentVariables","prevVars","count","getVariables","fragmentVariables","cursor","artistID","query","ArtistRecommendationsQueryRenderer","SystemContext","relayEnvironment"],"mappings":"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","sourcesContent":["import { Box, Button, Flex, Serif } from \"@artsy/palette\"\nimport { ArtistRecommendations_artist } from \"__generated__/ArtistRecommendations_artist.graphql\"\nimport { ArtistRecommendationsRendererQuery } from \"__generated__/ArtistRecommendationsRendererQuery.graphql\"\nimport { SystemContext } from \"Artsy\"\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport React, { useContext, useState } from \"react\"\nimport {\n  createPaginationContainer,\n  graphql,\n  RelayPaginationProp,\n} from \"react-relay\"\nimport { get } from \"Utils/get\"\nimport createLogger from \"Utils/logger\"\nimport { RecommendedArtistFragmentContainer as RecommendedArtist } from \"./RecommendedArtist\"\n\nconst logger = createLogger(\"ArtistRecommendations.tsx\")\n\ninterface ArtistRecommendationsProps {\n  artist: ArtistRecommendations_artist\n  relay: RelayPaginationProp\n}\n\nconst PAGE_SIZE = 3\n\nexport const ArtistRecommendations: React.FC<ArtistRecommendationsProps> = ({\n  artist,\n  relay,\n}) => {\n  const [fetchingNextPage, setFetchingNextPage] = useState(false)\n\n  const { name } = artist\n  const relatedArtists = get(artist, a => a.related.artists.edges, []).map(\n    edge => <RecommendedArtist artist={edge.node} key={edge.node.id} />\n  )\n\n  const fetchData = () => {\n    if (!relay.hasMore() || relay.isLoading()) {\n      return\n    }\n    setFetchingNextPage(true)\n    relay.loadMore(PAGE_SIZE, error => {\n      if (error) {\n        logger.error(error)\n      }\n      setFetchingNextPage(false)\n    })\n  }\n\n  return (\n    <Box>\n      <Serif size=\"8\" color=\"black100\">\n        Related to {name}\n      </Serif>\n      {relatedArtists}\n\n      {relay.hasMore() && (\n        <ShowMoreButton onClick={fetchData} loading={fetchingNextPage} />\n      )}\n    </Box>\n  )\n}\n\nconst ShowMoreButton: React.FC<{ onClick: () => void; loading: boolean }> = ({\n  onClick,\n  loading,\n}) => {\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Button\n        my={4}\n        variant=\"secondaryOutline\"\n        onClick={onClick}\n        loading={loading}\n      >\n        Show More\n      </Button>\n    </Flex>\n  )\n}\n\nexport const ArtistRecommendationsPaginationContainer = createPaginationContainer(\n  ArtistRecommendations,\n  {\n    artist: graphql`\n      fragment ArtistRecommendations_artist on Artist\n        @argumentDefinitions(\n          count: { type: \"Int\", defaultValue: 3 }\n          cursor: { type: \"String\", defaultValue: \"\" }\n          min_forsale_artworks: { type: \"Int\", defaultValue: 7 }\n        ) {\n        id\n        name\n        related {\n          artists(\n            first: $count\n            after: $cursor\n            min_forsale_artworks: $min_forsale_artworks\n          ) @connection(key: \"ArtistRecommendations_artists\") {\n            edges {\n              node {\n                id\n                ...RecommendedArtist_artist\n              }\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: \"forward\",\n    getConnectionFromProps(props) {\n      return props.artist.related.artists\n    },\n    getFragmentVariables(prevVars, count) {\n      return {\n        ...prevVars,\n        count,\n      }\n    },\n    getVariables(\n      props: ArtistRecommendationsProps,\n      { count, cursor },\n      fragmentVariables\n    ) {\n      return {\n        ...fragmentVariables,\n        count,\n        cursor,\n        artistID: props.artist.id,\n      }\n    },\n    query: graphql`\n      query ArtistRecommendationsPaginationQuery(\n        $count: Int!\n        $cursor: String\n        $artistID: String!\n      ) {\n        artist(id: $artistID) {\n          ...ArtistRecommendations_artist\n            @arguments(count: $count, cursor: $cursor)\n        }\n      }\n    `,\n  }\n)\n\nexport const ArtistRecommendationsQueryRenderer: React.FC<{\n  artistID: string\n}> = ({ artistID }) => {\n  const { relayEnvironment } = useContext(SystemContext)\n  return (\n    <QueryRenderer<ArtistRecommendationsRendererQuery>\n      environment={relayEnvironment}\n      query={graphql`\n        query ArtistRecommendationsRendererQuery($artistID: String!) {\n          artist(id: $artistID) {\n            ...ArtistRecommendations_artist\n          }\n        }\n      `}\n      variables={{ artistID }}\n      render={renderWithLoadProgress(ArtistRecommendationsPaginationContainer)}\n    />\n  )\n}\n"],"file":"ArtistRecommendations.js"}