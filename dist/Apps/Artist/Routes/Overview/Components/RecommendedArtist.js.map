{"version":3,"sources":["../../../../../../src/Apps/Artist/Routes/Overview/Components/RecommendedArtist.tsx"],"names":["HEIGHT","handleOpenAuth","mediator","artist","entity","contextModule","Schema","ContextModule","RecommendedArtists","intent","AuthModalIntent","FollowArtist","RecommendedArtistWithTracking","context_module","type","Type","Thumbnail","action_type","ActionType","Click","props","trackArtworkClicked","bind","React","Component","RecommendedArtist","onArtworkClicked","SystemContext","user","artistData","a","artworks_connection","edges","image","cropped","url","name","formatted_nationality_and_birthday","href","modelName","OwnerType","Artist","entity_id","_id","entity_slug","id","is_followed","cursor","textDecoration","artwork","aspect_ratio","node","Arrow","ArrowContainer","Box","ArrowButton","RecommendedArtistFragmentContainer"],"mappings":"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","sourcesContent":["import { Box, EntityHeader, Sans, Spacer } from \"@artsy/palette\"\nimport { RecommendedArtist_artist } from \"__generated__/RecommendedArtist_artist.graphql\"\nimport { SystemContext } from \"Artsy\"\nimport { track } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport FillwidthItem from \"Components/Artwork/FillwidthItem\"\nimport { FollowArtistButtonFragmentContainer as FollowArtistButton } from \"Components/FollowButton/FollowArtistButton\"\nimport { ArrowButton, Carousel } from \"Components/v2/Carousel\"\nimport React, { FC, useContext } from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\nimport { get } from \"Utils/get\"\nimport { AuthModalIntent, openAuthModal } from \"Utils/openAuthModal\"\n\ninterface RecommendedArtistProps {\n  artist: RecommendedArtist_artist\n}\nconst HEIGHT = 150\n\nconst handleOpenAuth = (mediator, artist) => {\n  openAuthModal(mediator, {\n    entity: artist,\n    contextModule: Schema.ContextModule.RecommendedArtists,\n    intent: AuthModalIntent.FollowArtist,\n  })\n}\n\n@track({\n  context_module: Schema.ContextModule.RecommendedArtists,\n})\nclass RecommendedArtistWithTracking extends React.Component<\n  RecommendedArtistProps\n> {\n  @track({\n    type: Schema.Type.Thumbnail,\n    action_type: Schema.ActionType.Click,\n  })\n  trackArtworkClicked() {\n    // noop\n  }\n\n  render() {\n    return (\n      <RecommendedArtist\n        {...this.props}\n        onArtworkClicked={this.trackArtworkClicked.bind(this)}\n      />\n    )\n  }\n}\n\nconst RecommendedArtist: FC<\n  RecommendedArtistProps & { onArtworkClicked: () => void }\n> = ({ artist, onArtworkClicked }) => {\n  const { user, mediator } = useContext(SystemContext)\n  const artistData = get(\n    artist,\n    a => a.artworks_connection.edges,\n    []\n  ) as object[]\n\n  return (\n    <>\n      <EntityHeader\n        mt={4}\n        imageUrl={get(artist, a => a.image.cropped.url, \"\")}\n        name={artist.name}\n        meta={artist.formatted_nationality_and_birthday}\n        href={artist.href}\n        FollowButton={\n          <FollowArtistButton\n            artist={artist}\n            user={user}\n            trackingData={{\n              modelName: Schema.OwnerType.Artist,\n              context_module: Schema.ContextModule.RecommendedArtists,\n              entity_id: artist._id,\n              entity_slug: artist.id,\n            }}\n            onOpenAuthModal={() => handleOpenAuth(mediator, artist)}\n            render={({ is_followed }) => {\n              return (\n                <Sans\n                  size=\"2\"\n                  weight=\"medium\"\n                  color=\"black\"\n                  style={{\n                    cursor: \"pointer\",\n                    textDecoration: \"underline\",\n                  }}\n                >\n                  {is_followed ? \"Following\" : \"Follow\"}\n                </Sans>\n              )\n            }}\n          />\n        }\n      />\n\n      <Spacer mb={3} />\n\n      <Carousel\n        height=\"240px\"\n        data={artistData}\n        render={artwork => {\n          const aspect_ratio = get(artwork, a => a.node.image.aspect_ratio, 1)\n          return (\n            <FillwidthItem\n              artwork={artwork.node}\n              targetHeight={HEIGHT}\n              imageHeight={HEIGHT}\n              width={HEIGHT * aspect_ratio}\n              margin={10}\n              user={user}\n              mediator={mediator}\n              onClick={onArtworkClicked}\n              lazyLoad\n            />\n          )\n        }}\n        renderLeftArrow={({ Arrow }) => {\n          return (\n            <ArrowContainer>\n              <Arrow />\n            </ArrowContainer>\n          )\n        }}\n        renderRightArrow={({ Arrow }) => {\n          return (\n            <ArrowContainer>\n              <Arrow />\n            </ArrowContainer>\n          )\n        }}\n      />\n    </>\n  )\n}\n\nconst ArrowContainer = styled(Box)`\n  align-self: flex-start;\n  ${ArrowButton} {\n    height: 60%;\n  }\n`\n\nexport const RecommendedArtistFragmentContainer = createFragmentContainer(\n  RecommendedArtistWithTracking,\n  {\n    artist: graphql`\n      fragment RecommendedArtist_artist on Artist {\n        id\n        _id\n        name\n        formatted_nationality_and_birthday\n        href\n        image {\n          cropped(width: 100, height: 100) {\n            url\n          }\n        }\n        artworks_connection(\n          first: 20\n          sort: PUBLISHED_AT_DESC\n          filter: IS_FOR_SALE\n        ) {\n          edges {\n            node {\n              __id\n              image {\n                aspect_ratio\n              }\n              ...FillwidthItem_artwork\n            }\n          }\n        }\n        ...FollowArtistButton_artist\n      }\n    `,\n  }\n)\n"],"file":"RecommendedArtist.js"}