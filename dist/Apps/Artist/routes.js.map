{"version":3,"sources":["../../../src/Apps/Artist/routes.tsx"],"names":["routes","path","Component","ArtistApp","query","children","OverviewRoute","ArtistOverviewQuery","prepareVariables","params","props","filterStateFromUrl","location","filterParams","initialArtworkFilterState","hasFilter","Object","entries","some","k","v","CVRoute","ArticlesRoute","ShowsRoute","AuctionResultsRoute","Redirect","from","to"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;;;;;;;;;;;;;;AAEA;AACA;AAEO,IAAMA,MAAqB,GAAG,CACnC;AACEC,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,SAAS,EAAEC,qCAFb;AAGEC,EAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,GAHP;AAUEC,EAAAA,QAAQ,EAAE,CACR;AACEJ,IAAAA,IAAI,EAAE,GADR;AAEEC,IAAAA,SAAS,EAAEI,wCAFb;AAGEF,IAAAA,KAAK,EAAEG,6BAHT;AAIEC,IAAAA,gBAAgB,EAAE,0BAACC,MAAD,EAASC,KAAT,EAAmB;AACnC;AACA;AACA,UAAMC,kBAAkB,GAAGD,KAAK,CAACE,QAAN,GAAiBF,KAAK,CAACE,QAAN,CAAeR,KAAhC,GAAwC,EAAnE;;AACA,UAAMS,YAAY,qBACbC,+CADa,EAEbH,kBAFa,EAGbF,MAHa,CAAlB;;AAMAI,MAAAA,YAAY,CAACE,SAAb,GAAyBC,MAAM,CAACC,OAAP,CAAeN,kBAAf,EAAmCO,IAAnC,CACvB,gBAAY;AAAA;AAAA,YAAVC,CAAU;AAAA,YAAPC,CAAO;;AACV,eAAO,CAAC,sCAAgBD,CAAhB,EAAmBC,CAAnB,CAAR;AACD,OAHsB,CAAzB;AAMA,aAAOP,YAAP;AACD;AArBH,GADQ,EAwBR;AACEZ,IAAAA,IAAI,EAAE,IADR;AAEEC,IAAAA,SAAS,EAAEmB,4BAFb;AAGEjB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHP,GAxBQ,EAmCR;AACEH,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,SAAS,EAAEoB,wCAFb;AAGElB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHP,GAnCQ,EA8CR;AACEH,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,SAAS,EAAEqB,kCAFb;AAGEnB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHP,GA9CQ,EAyDR;AACEH,IAAAA,IAAI,EAAE,iBADR;AAEEC,IAAAA,SAAS,EAAEsB,oDAFb;AAGEpB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHP,GAzDQ,EAoER;AACA;AACA;AACA;AAEA,MAAIqB,eAAJ,CAAa;AACXC,IAAAA,IAAI,EAAE,GADK;AAEXC,IAAAA,EAAE,EAAE;AAFO,GAAb,CAzEQ;AAVZ,CADmC,CAA9B","sourcesContent":["import { initialArtworkFilterState } from \"Components/v2/ArtworkFilter/ArtworkFilterContext\"\nimport { isDefaultFilter } from \"Components/v2/ArtworkFilter/Utils/isDefaultFilter\"\nimport { Redirect, RouteConfig } from \"found\"\nimport { graphql } from \"react-relay\"\nimport { ArtistAppFragmentContainer as ArtistApp } from \"./ArtistApp\"\nimport { ArticlesRouteFragmentContainer as ArticlesRoute } from \"./Routes/Articles\"\nimport { AuctionResultsRouteFragmentContainer as AuctionResultsRoute } from \"./Routes/AuctionResults\"\nimport { CVRouteFragmentContainer as CVRoute } from \"./Routes/CV\"\nimport {\n  ArtistOverviewQuery,\n  OverviewRouteFragmentContainer as OverviewRoute,\n} from \"./Routes/Overview\"\nimport { ShowsRouteFragmentContainer as ShowsRoute } from \"./Routes/Shows\"\n\n// FIXME:\n// * `render` functions requires casting\n// * `Redirect` needs to be casted, as itâ€™s not compatible with `RouteConfig`\nexport const routes: RouteConfig[] = [\n  {\n    path: \"/artist/:artist_id\",\n    Component: ArtistApp,\n    query: graphql`\n      query routes_ArtistTopLevelQuery($artist_id: String!) {\n        artist(id: $artist_id) @principalField {\n          ...ArtistApp_artist\n        }\n      }\n    `,\n    children: [\n      {\n        path: \"/\",\n        Component: OverviewRoute,\n        query: ArtistOverviewQuery,\n        prepareVariables: (params, props) => {\n          // FIXME: The initial render includes `location` in props, but subsequent\n          // renders (such as tabbing back to this route in your browser) will not.\n          const filterStateFromUrl = props.location ? props.location.query : {}\n          const filterParams = {\n            ...initialArtworkFilterState,\n            ...filterStateFromUrl,\n            ...params,\n          }\n\n          filterParams.hasFilter = Object.entries(filterStateFromUrl).some(\n            ([k, v]) => {\n              return !isDefaultFilter(k, v)\n            }\n          )\n\n          return filterParams\n        },\n      },\n      {\n        path: \"cv\",\n        Component: CVRoute,\n        query: graphql`\n          query routes_CVQuery($artist_id: String!) {\n            viewer {\n              ...CV_viewer\n            }\n          }\n        `,\n      },\n      {\n        path: \"articles\",\n        Component: ArticlesRoute,\n        query: graphql`\n          query routes_ArticlesQuery($artist_id: String!) {\n            artist(id: $artist_id) {\n              ...Articles_artist\n            }\n          }\n        `,\n      },\n      {\n        path: \"shows\",\n        Component: ShowsRoute,\n        query: graphql`\n          query routes_ShowsQuery($artist_id: String!) {\n            viewer {\n              ...Shows_viewer\n            }\n          }\n        `,\n      },\n      {\n        path: \"auction-results\",\n        Component: AuctionResultsRoute,\n        query: graphql`\n          query routes_AuctionResultsQuery($artist_id: String!) {\n            artist(id: $artist_id) {\n              ...AuctionResults_artist\n            }\n          }\n        `,\n      },\n      // Redirect all unhandled tabs to the artist page.\n      // Note: there is a deep-linked standalone auction-lot page\n      // in Force, under /artist/:artistID/auction-result/:id.\n      // That app needs to be mounted before this app for that to work,\n      // and not get caught here.\n      new Redirect({\n        from: \"*\",\n        to: \"/artist/:artist_id\",\n      }) as any,\n    ],\n  },\n]\n"],"file":"routes.js"}