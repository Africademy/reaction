{"version":3,"sources":["../../../../src/Apps/Artwork/Components/ArtistInfo.tsx"],"names":["Container","children","ArtistInfo","context_module","Schema","ContextModule","Biography","dispatch","data","Events","postEvent","action_type","ActionType","Click","flow","Flow","ArtworkAboutTheArtist","subject","Subject","ReadMore","type","Type","Button","ShowArtistInsights","showArtistInsights","mediator","artist","entity","contextModule","ArtworkPage","intent","AuthModalIntent","FollowArtist","setState","props","biography_blurb","image","id","_id","showArtistBio","text","imageUrl","p","cropped","url","showArtistInsightsButton","exhibition_highlights","length","MIN_EXHIBITIONS","auctionResults","edges","collections","highlights","partners","buttonText","state","user","name","formatted_nationality_and_birthday","href","modelName","OwnerType","Artist","entity_id","entity_slug","handleOpenAuth","is_followed","cursor","textDecoration","trackArtistBioReadMoreClick","bind","closeArtistInsights","openArtistInsights","counts","partner_shows","sd","APP_URL","Component","ArtistInfoFragmentContainer","ArtistInfoQueryRenderer","artistID","relayEnvironment"],"mappings":"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","sourcesContent":["import {\n  Button,\n  EntityHeader,\n  Flex,\n  Sans,\n  Spacer,\n  StackableBorderBox,\n} from \"@artsy/palette\"\nimport { ArtistInfo_artist } from \"__generated__/ArtistInfo_artist.graphql\"\nimport { ArtistInfoQuery } from \"__generated__/ArtistInfoQuery.graphql\"\nimport { SystemContextConsumer } from \"Artsy\"\nimport { Mediator } from \"Artsy\"\nimport { track } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport { FollowArtistButtonFragmentContainer as FollowArtistButton } from \"Components/FollowButton/FollowArtistButton\"\nimport {\n  ArtistBioFragmentContainer as ArtistBio,\n  ArtistMarketInsightsFragmentContainer as ArtistMarketInsights,\n  SelectedExhibitionFragmentContainer as SelectedExhibitions,\n} from \"Components/v2\"\nimport { MIN_EXHIBITIONS } from \"Components/v2/SelectedExhibitions\"\nimport React, { Component } from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { data as sd } from \"sharify\"\nimport Events from \"Utils/Events\"\nimport { get } from \"Utils/get\"\nimport { AuthModalIntent, openAuthModal } from \"Utils/openAuthModal\"\n\ninterface ArtistInfoProps {\n  artist: ArtistInfo_artist\n  mediator?: Mediator\n}\n\ninterface ArtistInfoState {\n  showArtistInsights: boolean\n}\n\nconst Container = ({ children }) => (\n  <StackableBorderBox p={2}>{children}</StackableBorderBox>\n)\n\n@track(\n  {\n    context_module: Schema.ContextModule.Biography,\n  },\n  {\n    dispatch: data => Events.postEvent(data),\n  }\n)\nexport class ArtistInfo extends Component<ArtistInfoProps, ArtistInfoState> {\n  state = {\n    showArtistInsights: false,\n  }\n\n  @track({\n    action_type: Schema.ActionType.Click,\n    flow: Schema.Flow.ArtworkAboutTheArtist,\n    subject: Schema.Subject.ReadMore,\n    type: Schema.Type.Button,\n  })\n  trackArtistBioReadMoreClick() {\n    // noop\n  }\n\n  @track({\n    action_type: Schema.ActionType.Click,\n    flow: Schema.Flow.ArtworkAboutTheArtist,\n    subject: Schema.Subject.ShowArtistInsights,\n    type: Schema.Type.Button,\n  })\n  openArtistInsights() {\n    this.setState({\n      showArtistInsights: true,\n    })\n  }\n\n  closeArtistInsights() {\n    this.setState({\n      showArtistInsights: false,\n    })\n  }\n\n  handleOpenAuth = (mediator, artist) => {\n    openAuthModal(mediator, {\n      entity: artist,\n      contextModule: Schema.ContextModule.ArtworkPage,\n      intent: AuthModalIntent.FollowArtist,\n    })\n  }\n\n  render() {\n    const { artist } = this.props\n    const { biography_blurb, image, id, _id } = this.props.artist\n    const showArtistBio = !!biography_blurb.text\n    const imageUrl = get(this.props, p => image.cropped.url)\n    const showArtistInsightsButton =\n      (artist.exhibition_highlights &&\n        artist.exhibition_highlights.length >= MIN_EXHIBITIONS) ||\n      (artist.auctionResults && artist.auctionResults.edges.length > 0) ||\n      (artist.collections && artist.collections.length > 0) ||\n      (artist.highlights.partners &&\n        artist.highlights.partners.edges.length > 0)\n    const buttonText = this.state.showArtistInsights\n      ? \"Hide artist insights\"\n      : \"Show artist insights\"\n\n    return (\n      <SystemContextConsumer>\n        {({ user, mediator }) => (\n          <>\n            <StackableBorderBox p={2} flexDirection=\"column\">\n              <EntityHeader\n                name={this.props.artist.name}\n                meta={this.props.artist.formatted_nationality_and_birthday}\n                imageUrl={imageUrl}\n                href={this.props.artist.href}\n                FollowButton={\n                  <FollowArtistButton\n                    artist={this.props.artist}\n                    user={user}\n                    trackingData={{\n                      modelName: Schema.OwnerType.Artist,\n                      context_module: Schema.ContextModule.Biography,\n                      entity_id: _id,\n                      entity_slug: id,\n                    }}\n                    onOpenAuthModal={() =>\n                      this.handleOpenAuth(mediator, this.props.artist)\n                    }\n                    render={({ is_followed }) => {\n                      return (\n                        <Sans\n                          size=\"2\"\n                          weight=\"medium\"\n                          color=\"black\"\n                          style={{\n                            cursor: \"pointer\",\n                            textDecoration: \"underline\",\n                          }}\n                        >\n                          {is_followed ? \"Following\" : \"Follow\"}\n                        </Sans>\n                      )\n                    }}\n                  />\n                }\n              />\n              {showArtistBio && (\n                <>\n                  <Spacer mb={1} />\n                  <ArtistBio\n                    bio={this.props.artist}\n                    onReadMoreClicked={this.trackArtistBioReadMoreClick.bind(\n                      this\n                    )}\n                  />\n                </>\n              )}\n              {showArtistInsightsButton && (\n                <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n                  <Button\n                    onClick={\n                      this.state.showArtistInsights\n                        ? this.closeArtistInsights.bind(this)\n                        : this.openArtistInsights.bind(this)\n                    }\n                    variant=\"secondaryGray\"\n                    size=\"small\"\n                    mt={1}\n                  >\n                    {buttonText}\n                  </Button>\n                </Flex>\n              )}\n            </StackableBorderBox>\n            {this.state.showArtistInsights && (\n              <>\n                <ArtistMarketInsights\n                  artist={this.props.artist}\n                  border={false}\n                  Container={Container}\n                />\n                <SelectedExhibitions\n                  artistID={this.props.artist.id}\n                  border={false}\n                  totalExhibitions={this.props.artist.counts.partner_shows}\n                  exhibitions={this.props.artist.exhibition_highlights}\n                  ViewAllLink={\n                    <a href={`${sd.APP_URL}/artist/${this.props.artist.id}/cv`}>\n                      View all\n                    </a>\n                  }\n                  Container={Container}\n                />\n              </>\n            )}\n          </>\n        )}\n      </SystemContextConsumer>\n    )\n  }\n}\n\n// ADDED COLLECTIONS, HIGHLIGHTS, AND AUCTION RESULTS TO FRAGMENT FOR SHOW ARTIST INSIGHTS BUTTON VISIBLILITY CHECK\n\nexport const ArtistInfoFragmentContainer = createFragmentContainer(ArtistInfo, {\n  artist: graphql`\n    fragment ArtistInfo_artist on Artist\n      @argumentDefinitions(\n        partner_category: {\n          type: \"[String]\"\n          defaultValue: [\"blue-chip\", \"top-established\", \"top-emerging\"]\n        }\n      ) {\n      _id\n      id\n      name\n      href\n      image {\n        cropped(width: 100, height: 100) {\n          url\n        }\n      }\n      formatted_nationality_and_birthday\n      counts {\n        partner_shows\n      }\n      exhibition_highlights(size: 3) {\n        ...SelectedExhibitions_exhibitions\n      }\n      collections\n      highlights {\n        partners(\n          first: 10\n          display_on_partner_profile: true\n          represented_by: true\n          partner_category: $partner_category\n        ) {\n          edges {\n            node {\n              __typename\n            }\n          }\n        }\n      }\n      auctionResults(\n        recordsTrusted: true\n        first: 1\n        sort: PRICE_AND_DATE_DESC\n      ) {\n        edges {\n          node {\n            __typename\n          }\n        }\n      }\n      ...ArtistBio_bio\n      ...ArtistMarketInsights_artist\n      ...FollowArtistButton_artist\n\n      # The below data is only used to determine whether a section\n      # should be rendered\n\n      biography_blurb(format: HTML, partner_bio: true) {\n        text\n      }\n    }\n  `,\n})\n\nexport const ArtistInfoQueryRenderer = ({ artistID }: { artistID: string }) => {\n  return (\n    <SystemContextConsumer>\n      {({ relayEnvironment }) => {\n        return (\n          <QueryRenderer<ArtistInfoQuery>\n            environment={relayEnvironment}\n            variables={{ artistID }}\n            query={graphql`\n              query ArtistInfoQuery($artistID: String!) {\n                artist(id: $artistID) {\n                  ...ArtistInfo_artist\n                }\n              }\n            `}\n            render={renderWithLoadProgress(ArtistInfoFragmentContainer)}\n          />\n        )\n      }}\n    </SystemContextConsumer>\n  )\n}\n"],"file":"ArtistInfo.js"}