{"version":3,"sources":["../../../../../src/Apps/Artwork/Components/ArtworkBanner/index.tsx"],"names":["ArtworkBanner","props","artwork","artworkContextAuction","artworkContextFair","artworkContextPartnerShow","partner","sale","__typename","auctionImage","s","is_auction","cover_image","url","initials","name","isBenefit","isGalleryAuction","href","fairImage","c","profile","icon","img","showImage","thumbnail","showLine","status","ArtworkBannerFragmentContainer","ArtworkBannerQueryRenderer","artworkID","SystemContext","relayEnvironment"],"mappings":"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","sourcesContent":["import { ArtworkBanner_artwork } from \"__generated__/ArtworkBanner_artwork.graphql\"\nimport { ArtworkBannerQuery } from \"__generated__/ArtworkBannerQuery.graphql\"\nimport { SystemContext } from \"Artsy\"\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport React, { useContext } from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { get } from \"Utils/get\"\nimport { Banner } from \"./Banner\"\n\nexport interface ArtworkBannerProps {\n  artwork: ArtworkBanner_artwork\n}\n\nexport const ArtworkBanner: React.SFC<ArtworkBannerProps> = props => {\n  const {\n    artworkContextAuction,\n    artworkContextFair,\n    artworkContextPartnerShow,\n    partner,\n    sale,\n  } = props.artwork\n\n  // Auction\n  if (\n    artworkContextAuction &&\n    artworkContextAuction.__typename === \"ArtworkContextAuction\"\n  ) {\n    const auctionImage = get(sale, s => s.is_auction && s.cover_image.url)\n    return (\n      <Banner\n        imageUrl={auctionImage}\n        initials={partner.initials}\n        meta=\"In auction\"\n        name={artworkContextAuction.name}\n        // Do not display partner name for benefit or gallery auctions\n        subHeadline={\n          sale.isBenefit || sale.isGalleryAuction ? null : partner.name\n        }\n        href={artworkContextAuction.href}\n      />\n    )\n  }\n\n  // Fair\n  if (\n    artworkContextFair &&\n    artworkContextFair.__typename === \"ArtworkContextFair\"\n  ) {\n    const fairImage = get(artworkContextFair, c => c.profile.icon.img.url)\n    const initials = get(artworkContextFair, c => c.profile.initials)\n    return (\n      <Banner\n        imageUrl={fairImage}\n        initials={initials}\n        meta=\"At fair\"\n        name={artworkContextFair.name}\n        subHeadline={partner.name}\n        href={artworkContextFair.href}\n      />\n    )\n  }\n\n  // Partner Show\n  if (\n    artworkContextPartnerShow &&\n    artworkContextPartnerShow.__typename === \"ArtworkContextPartnerShow\"\n  ) {\n    const showImage = get(artworkContextPartnerShow, c => c.thumbnail.img.url)\n    let showLine = \"In current show\"\n    if (artworkContextPartnerShow.status === \"upcoming\") {\n      showLine = \"In upcoming show\"\n    } else if (artworkContextPartnerShow.status === \"closed\") {\n      showLine = \"In past show\"\n    }\n    return (\n      <Banner\n        imageUrl={showImage}\n        initials={partner.initials}\n        meta={showLine}\n        name={artworkContextPartnerShow.name}\n        subHeadline={partner.name}\n        href={artworkContextPartnerShow.href}\n      />\n    )\n  }\n  return null\n}\nexport const ArtworkBannerFragmentContainer = createFragmentContainer(\n  ArtworkBanner,\n  {\n    artwork: graphql`\n      fragment ArtworkBanner_artwork on Artwork {\n        partner {\n          name\n          initials\n        }\n        sale {\n          is_auction\n          isBenefit\n          isGalleryAuction\n          cover_image {\n            url(version: \"square\")\n          }\n        }\n        # This aliasing selection of the context is done to work around a type generator bug, see below.\n        artworkContextAuction: context {\n          __typename\n          ... on ArtworkContextAuction {\n            name\n            href\n          }\n        }\n        artworkContextFair: context {\n          __typename\n          ... on ArtworkContextFair {\n            name\n            href\n            profile {\n              initials\n              icon {\n                img: resized(width: 70, height: 70, version: \"square\") {\n                  url\n                }\n              }\n            }\n          }\n        }\n        artworkContextPartnerShow: context {\n          __typename\n          ... on ArtworkContextPartnerShow {\n            name\n            href\n            status\n            thumbnail: cover_image {\n              img: resized(width: 70, height: 70, version: \"square\") {\n                url\n              }\n            }\n          }\n        }\n        # FIXME: There is a bug in the Relay transformer used before generating Flow types, and thus also our TS type\n        #        generator, that leads to a union selection _with_ a __typename selection being normalized incorrectly.\n        #        What ends up happening is that _only_ the common selection is being omitted from the second fragment,\n        #        i.e. in this case the fair and partnerShow selections are missing name and href.\n        #\n        #        This can be seen much more clear when adding __typename to the context part in ArtworkRail.tsx.\n        #\n        # context {\n        #   __typename\n        #   ... on ArtworkContextAuction {\n        #     name\n        #     href\n        #     is_auction\n        #     is_closed\n        #     is_open\n        #     live_start_at\n        #     live_url_if_open\n        #   }\n        #   ... on ArtworkContextFair {\n        #     name\n        #     href\n        #     isActive\n        #     start_at\n        #     end_at\n        #     profile {\n        #       initials\n        #       icon {\n        #         img: resized(width: 70, height: 70, version: \"square\") {\n        #           url\n        #         }\n        #       }\n        #     }\n        #   }\n        #   ... on ArtworkContextPartnerShow {\n        #     name\n        #     href\n        #     type\n        #     status\n        #     thumbnail: cover_image {\n        #       img: resized(width: 70, height: 70, version: \"square\") {\n        #         url\n        #       }\n        #     }\n        #   }\n        # }\n      }\n    `,\n  }\n)\nexport const ArtworkBannerQueryRenderer = ({\n  artworkID,\n}: {\n  artworkID: string\n}) => {\n  const { relayEnvironment } = useContext(SystemContext)\n\n  return (\n    <QueryRenderer<ArtworkBannerQuery>\n      environment={relayEnvironment}\n      variables={{ artworkID }}\n      query={graphql`\n        query ArtworkBannerQuery($artworkID: String!) {\n          artwork(id: $artworkID) {\n            ...ArtworkBanner_artwork\n          }\n        }\n      `}\n      render={renderWithLoadProgress(ArtworkBannerFragmentContainer)}\n    />\n  )\n}\n"],"file":"index.js"}