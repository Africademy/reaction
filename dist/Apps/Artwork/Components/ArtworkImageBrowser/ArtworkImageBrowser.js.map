{"version":3,"sources":["../../../../../src/Apps/Artwork/Components/ArtworkImageBrowser/ArtworkImageBrowser.tsx"],"names":["ArtworkImageBrowser","props","LargeArtworkImageBrowser","hasMultipleImages","images","length","imageAlt","setCarouselRef","carouselImages","window","options","prevNextButtons","wrapAround","pageDots","cellAlign","draggable","lazyLoad","flickity","previous","next","image","deepZoom","is_zoomable","is_default","uri","React","Component","SmallArtworkImageBrowser","groupCells","ArrowButton","direction","onClick","ArrowButtonContainer","Flex","Container","Box","PageIndicator","styled","span","displayName"],"mappings":"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","sourcesContent":["import { ArtworkImageBrowser_artwork } from \"__generated__/ArtworkImageBrowser_artwork.graphql\"\nimport { Lightbox } from \"Components/v2\"\nimport { BaseCarousel as Carousel } from \"Components/v2/Carousel\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Media } from \"Utils/Responsive\"\n\nimport { Box, ChevronIcon, Col, color, Flex, space } from \"@artsy/palette\"\n\ninterface ArtworkBrowserProps {\n  imageAlt: string\n  images: ArtworkImageBrowser_artwork[\"images\"]\n  setCarouselRef: (carouselRef: Carousel) => void\n}\n\ntype Image = ArtworkBrowserProps[\"images\"][number]\n\nexport const ArtworkImageBrowser = (props: ArtworkBrowserProps) => {\n  return (\n    <>\n      <Media at=\"xs\">\n        <SmallArtworkImageBrowser {...props} />\n      </Media>\n      <Media greaterThan=\"xs\">\n        <LargeArtworkImageBrowser {...props} />\n      </Media>\n    </>\n  )\n}\n\nexport class LargeArtworkImageBrowser extends React.Component<\n  ArtworkBrowserProps\n> {\n  render() {\n    const hasMultipleImages = this.props.images.length > 1\n    const { imageAlt, images, setCarouselRef } = this.props\n\n    // FIXME: During SSR pass want to hide other images. Work around for lack\n    // of SSR support in Flickity.\n    const carouselImages = typeof window === \"undefined\" ? [images[0]] : images\n\n    const options = {\n      prevNextButtons: false,\n      wrapAround: true,\n      pageDots: hasMultipleImages,\n      cellAlign: \"left\",\n      draggable: false,\n      lazyLoad: true,\n    }\n\n    // The maxHeight was added in order to fix how Google bot renders the page\n    return (\n      <Container>\n        <Carousel\n          showArrows={hasMultipleImages}\n          options={options}\n          oneSlideVisible\n          height=\"auto\"\n          setCarouselRef={setCarouselRef}\n          data={carouselImages}\n          renderLeftArrow={({ flickity }) => (\n            <Col sm={1}>\n              <ArrowButton\n                direction=\"left\"\n                onClick={() => {\n                  // FIXME: Flickity.prototype.previous typing is missing second\n                  // `isInstant` method.\n                  // @ts-ignore\n                  flickity.previous(false, true)\n                }}\n              />\n            </Col>\n          )}\n          renderRightArrow={({ flickity }) => (\n            <Col sm={1}>\n              <ArrowButton\n                direction=\"right\"\n                onClick={() => {\n                  // FIXME: Flickity.prototype.next typing is missing second\n                  // `isInstant` method.\n                  // @ts-ignore\n                  flickity.next(false, true)\n                }}\n              />\n            </Col>\n          )}\n          // maxHeight is needed for google search indexing\n          render={(image: Image) => {\n            return (\n              <Flex\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                width=\"100%\"\n                px={hasMultipleImages ? [2, 2, 0] : 0}\n                height=\"60vh\"\n                maxHeight=\"2000px\"\n              >\n                <Lightbox\n                  imageAlt={imageAlt}\n                  deepZoom={image.deepZoom}\n                  enabled={image.is_zoomable}\n                  isDefault={image.is_default}\n                  src={image.uri}\n                  initialHeight=\"60vh\"\n                  maxHeight=\"2000px\"\n                />\n              </Flex>\n            )\n          }}\n        />\n      </Container>\n    )\n  }\n}\n\nexport class SmallArtworkImageBrowser extends React.Component<\n  ArtworkBrowserProps\n> {\n  render() {\n    const { images, imageAlt, setCarouselRef } = this.props\n    // FIXME: During SSR pass want to hide other images. Work around for lack\n    // of SSR support in Flickity.\n    const carouselImages = typeof window === \"undefined\" ? [images[0]] : images\n    const hasMultipleImages = this.props.images.length > 1\n    const options = {\n      prevNextButtons: false,\n      wrapAround: true,\n      draggable: hasMultipleImages,\n      groupCells: 1,\n      pageDots: hasMultipleImages,\n    }\n\n    // The maxHeight was added in order to fix how Google bot renders the page\n    return (\n      <Container>\n        <Carousel\n          options={options}\n          data={carouselImages}\n          oneSlideVisible\n          setCarouselRef={setCarouselRef}\n          render={(image: Image) => {\n            return (\n              <Flex\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                px={1}\n                width=\"100%\"\n              >\n                <Lightbox\n                  imageAlt={imageAlt}\n                  deepZoom={image.deepZoom}\n                  enabled={image.is_zoomable}\n                  isDefault={image.is_default}\n                  src={image.uri}\n                  maxHeight=\"2000px\"\n                  initialHeight=\"45vh\"\n                />\n              </Flex>\n            )\n          }}\n        />\n      </Container>\n    )\n  }\n}\n\nconst ArrowButton = ({ direction, onClick }) => {\n  return (\n    <ArrowButtonContainer\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      height=\"100%\"\n      alignItems={direction === \"left\" ? \"flex-start\" : \"flex-end\"}\n      onClick={onClick}\n    >\n      <ChevronIcon direction={direction} width={30} height={30} />\n    </ArrowButtonContainer>\n  )\n}\n\nconst ArrowButtonContainer = styled(Flex)`\n  cursor: pointer;\n  opacity: 0.1;\n  transition: opacity 0.25s;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst Container = styled(Box)`\n  user-select: none;\n\n  .flickity-viewport {\n    overflow: hidden;\n  }\n\n  .flickity-slider > div {\n    margin-left: 5px;\n    margin-right: 5px;\n    width: 100%;\n  }\n\n  .flickity-page-dots {\n    text-align: center;\n    height: 0;\n    padding-top: ${space(1)}px;\n\n    .dot {\n      width: 4px;\n      height: 4px;\n      border-radius: 100%;\n      display: inline-block;\n      margin: ${space(0.5)}px;\n      background-color: ${color(\"black10\")};\n    }\n\n    .dot.is-selected {\n      background-color: ${color(\"black100\")};\n    }\n  }\n`\n\nconst PageIndicator = styled.span`\n  &::after {\n    content: \"•\";\n  }\n`\n\n// @ts-ignore\nPageIndicator.displayName = \"PageIndicator\"\n"],"file":"ArtworkImageBrowser.js"}