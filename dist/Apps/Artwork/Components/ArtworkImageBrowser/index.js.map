{"version":3,"sources":["../../../../../src/Apps/Artwork/Components/ArtworkImageBrowser/index.tsx"],"names":["ArtworkImageBrowserContainer","props","artwork","images","image","image_alt","length","defaultImageIndex","findIndex","e","id","f","carousel","select","React","Component","ArtworkImageBrowserFragmentContainer","ArtworkImageBrowserQueryRenderer","artworkID","SystemContext","relayEnvironment"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAMaA,4B;;;;;;;;;;;;;;;;;;+DAGA,I;;;;;;;6BAEF;AAAA;;AAAA,gCAC8B,KAAKC,KAAL,CAAWC,OADzC;AAAA,UACCC,MADD,uBACCA,MADD;AAAA,UACSC,KADT,uBACSA,KADT;AAAA,UACgBC,SADhB,uBACgBA,SADhB;;AAEP,UAAI,CAACF,MAAM,CAACG,MAAZ,EAAoB;AAClB,eAAO,IAAP;AACD;;AAED,UAAMC,iBAAiB,GAAGJ,MAAM,CAACK,SAAP,CAAiB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASN,KAAK,CAACM,EAAnB;AAAA,OAAlB,CAA1B;AACA,aACE,4DACE,6BAAC,wCAAD;AACE,QAAA,cAAc,EAAE,wBAAAC,CAAC;AAAA,iBAAK,MAAI,CAACC,QAAL,GAAgBD,CAArB;AAAA,SADnB;AAEE,QAAA,MAAM,EAAER,MAFV;AAGE,QAAA,QAAQ,EAAEE;AAHZ,QADF,EAME,6BAAC,+CAAD;AACE,QAAA,kBAAkB,EAAE,8BAAM;AACxB,UAAA,MAAI,CAACO,QAAL,CAAcC,MAAd,CAAqBN,iBAArB,EAAwC,KAAxC,EAA+C,IAA/C;AACD,SAHH;AAIE,QAAA,OAAO,EAAE,KAAKN,KAAL,CAAWC;AAJtB,QANF,CADF;AAeD;;;;EA3B+CY,eAAMC,S;;;AA8BjD,IAAMC,oCAAoC,GAAG,yCAElDhB,4BAFkD,EAEpB;AAC9BE,EAAAA,OAAO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADuB,CAFoB,CAA7C;;;AAqCA,IAAMe,gCAAgC,GAAG,SAAnCA,gCAAmC,OAI1C;AAAA,MAHJC,SAGI,QAHJA,SAGI;;AAAA,oBACyB,uBAAWC,oBAAX,CADzB;AAAA,MACIC,gBADJ,eACIA,gBADJ;;AAGJ,SACE,6BAAC,wCAAD;AACE,IAAA,WAAW,EAAEA,gBADf;AAEE,IAAA,SAAS,EAAE;AAAEF,MAAAA,SAAS,EAATA;AAAF,KAFb;AAGE,IAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAHP;AAUE,IAAA,MAAM,EAAE,oDAAuBF,oCAAvB;AAVV,IADF;AAcD,CArBM","sourcesContent":["import { ArtworkImageBrowser_artwork } from \"__generated__/ArtworkImageBrowser_artwork.graphql\"\nimport { ArtworkImageBrowserQuery } from \"__generated__/ArtworkImageBrowserQuery.graphql\"\nimport { SystemContext } from \"Artsy\"\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport React, { useContext } from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { ArtworkActionsFragmentContainer as ArtworkActions } from \"./ArtworkActions\"\nimport { ArtworkImageBrowser } from \"./ArtworkImageBrowser\"\n\nexport interface ImageBrowserProps {\n  artwork: ArtworkImageBrowser_artwork\n}\n\nexport class ArtworkImageBrowserContainer extends React.Component<\n  ImageBrowserProps\n> {\n  carousel = null\n\n  render() {\n    const { images, image, image_alt } = this.props.artwork\n    if (!images.length) {\n      return null\n    }\n\n    const defaultImageIndex = images.findIndex(e => e.id === image.id)\n    return (\n      <>\n        <ArtworkImageBrowser\n          setCarouselRef={f => (this.carousel = f)}\n          images={images}\n          imageAlt={image_alt}\n        />\n        <ArtworkActions\n          selectDefaultSlide={() => {\n            this.carousel.select(defaultImageIndex, false, true)\n          }}\n          artwork={this.props.artwork}\n        />\n      </>\n    )\n  }\n}\n\nexport const ArtworkImageBrowserFragmentContainer = createFragmentContainer<\n  ImageBrowserProps\n>(ArtworkImageBrowserContainer, {\n  artwork: graphql`\n    fragment ArtworkImageBrowser_artwork on Artwork {\n      image_alt: to_s\n      ...ArtworkActions_artwork\n      image {\n        id\n      }\n      images {\n        id\n        uri: url(version: [\"large\"])\n        placeholder: resized(width: 30, height: 30, version: \"small\") {\n          url\n        }\n        aspectRatio: aspect_ratio\n        is_zoomable\n        is_default\n        deepZoom: deep_zoom {\n          Image {\n            xmlns\n            Url\n            Format\n            TileSize\n            Overlap\n            Size {\n              Width\n              Height\n            }\n          }\n        }\n      }\n    }\n  `,\n})\n\nexport const ArtworkImageBrowserQueryRenderer = ({\n  artworkID,\n}: {\n  artworkID: string\n}) => {\n  const { relayEnvironment } = useContext(SystemContext)\n\n  return (\n    <QueryRenderer<ArtworkImageBrowserQuery>\n      environment={relayEnvironment}\n      variables={{ artworkID }}\n      query={graphql`\n        query ArtworkImageBrowserQuery($artworkID: String!) {\n          artwork(id: $artworkID) {\n            ...ArtworkImageBrowser_artwork\n          }\n        }\n      `}\n      render={renderWithLoadProgress(ArtworkImageBrowserFragmentContainer)}\n    />\n  )\n}\n"],"file":"index.js"}