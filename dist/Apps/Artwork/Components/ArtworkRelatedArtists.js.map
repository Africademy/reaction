{"version":3,"sources":["../../../../src/Apps/Artwork/Components/ArtworkRelatedArtists.tsx"],"names":["logger","PAGE_SIZE","ArtworkRelatedArtists","props","trackEvent","mediator","user","fetchingNextPage","setFetchingNextPage","artist","artwork","relay","related","artists","fetchData","hasMore","isLoading","loadMore","error","edges","map","index","node","context_module","Schema","ContextModule","RelatedArtists","type","Type","ArtistCard","action_type","ActionType","Click","ShowMoreButton","onClick","loading","ArtworkRelatedArtistsPaginationContainer","direction","getConnectionFromProps","getFragmentVariables","prevVars","count","getVariables","fragmentVariables","cursor","artworkID","id","query"],"mappings":"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","sourcesContent":["import { Box, Button, Flex, Serif } from \"@artsy/palette\"\nimport { ArtworkRelatedArtists_artwork } from \"__generated__/ArtworkRelatedArtists_artwork.graphql\"\nimport { hideGrid } from \"Apps/Artwork/Components/OtherWorks\"\nimport { useSystemContext } from \"Artsy\"\nimport { track, useTracking } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { ArtistCardFragmentContainer as ArtistCard } from \"Components/v2\"\nimport React, { useState } from \"react\"\nimport {\n  createPaginationContainer,\n  graphql,\n  RelayPaginationProp,\n} from \"react-relay\"\nimport createLogger from \"Utils/logger\"\n\nconst logger = createLogger(\"ArtworkRelatedArtists.tsx\")\n\nexport interface ArtworkRelatedArtistsProps {\n  artwork: ArtworkRelatedArtists_artwork\n  relay: RelayPaginationProp\n}\n\nconst PAGE_SIZE = 4\n\nexport const ArtworkRelatedArtists: React.FC<\n  ArtworkRelatedArtistsProps\n> = track()(props => {\n  const { trackEvent } = useTracking()\n  const { mediator, user } = useSystemContext()\n  const [fetchingNextPage, setFetchingNextPage] = useState(false)\n\n  const {\n    artwork: { artist },\n    relay,\n  } = props\n  if (hideGrid(artist.related.artists)) {\n    return null\n  }\n\n  const fetchData = () => {\n    if (!relay.hasMore() || relay.isLoading()) {\n      return\n    }\n    setFetchingNextPage(true)\n    relay.loadMore(PAGE_SIZE, error => {\n      if (error) {\n        logger.error(error)\n      }\n      setFetchingNextPage(false)\n    })\n  }\n\n  return (\n    <Box mt={6}>\n      <Flex flexDirection=\"column\" alignItems=\"center\">\n        <Serif size={[\"5t\", \"8\"]} color=\"black100\" mb={2} textAlign=\"center\">\n          Related artists\n        </Serif>\n      </Flex>\n      <Flex flexWrap=\"wrap\" mr={-2} width=\"100%\">\n        {artist.related.artists.edges.map(({ node }, index) => {\n          return (\n            <Box pr={2} mb={[1, 4]} width={[\"100%\", \"25%\"]} key={index}>\n              <ArtistCard\n                lazyLoad\n                artist={node}\n                mediator={mediator}\n                user={user}\n                onClick={() => {\n                  trackEvent({\n                    context_module: Schema.ContextModule.RelatedArtists,\n                    type: Schema.Type.ArtistCard,\n                    action_type: Schema.ActionType.Click,\n                  })\n                }}\n              />\n            </Box>\n          )\n        })}\n      </Flex>\n\n      {relay.hasMore() && (\n        <ShowMoreButton onClick={fetchData} loading={fetchingNextPage} />\n      )}\n    </Box>\n  )\n})\n\nconst ShowMoreButton: React.FC<{ onClick: () => void; loading: boolean }> = ({\n  onClick,\n  loading,\n}) => {\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Button\n        variant=\"secondaryOutline\"\n        mb={3}\n        onClick={onClick}\n        loading={loading}\n      >\n        Show more\n      </Button>\n    </Flex>\n  )\n}\n\nexport const ArtworkRelatedArtistsPaginationContainer = createPaginationContainer(\n  ArtworkRelatedArtists,\n  {\n    artwork: graphql`\n      fragment ArtworkRelatedArtists_artwork on Artwork\n        @argumentDefinitions(\n          count: { type: \"Int\", defaultValue: 4 }\n          cursor: { type: \"String\", defaultValue: \"\" }\n        ) {\n        id\n        artist {\n          href\n          related {\n            artists(kind: MAIN, first: $count, after: $cursor)\n              @connection(key: \"ArtworkRelatedArtists_artists\") {\n              pageInfo {\n                hasNextPage\n              }\n              edges {\n                node {\n                  ...ArtistCard_artist\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: \"forward\",\n    getConnectionFromProps(props) {\n      return props.artwork.artist.related.artists\n    },\n    getFragmentVariables(prevVars, count) {\n      return {\n        ...prevVars,\n        count,\n      }\n    },\n    getVariables(props, { count, cursor }, fragmentVariables) {\n      return {\n        ...fragmentVariables,\n        count,\n        cursor,\n        artworkID: props.artwork.id,\n      }\n    },\n    query: graphql`\n      query ArtworkRelatedArtistsPaginationQuery(\n        $count: Int!\n        $cursor: String\n        $artworkID: String!\n      ) {\n        artwork(id: $artworkID) {\n          ...ArtworkRelatedArtists_artwork\n            @arguments(count: $count, cursor: $cursor)\n        }\n      }\n    `,\n  }\n)\n"],"file":"ArtworkRelatedArtists.js"}