{"version":3,"sources":["../../../../../src/Apps/Artwork/Components/ArtworkSidebar/ArtworkSidebarBidAction.tsx"],"names":["ArtworkSidebarBidAction","props","artwork_slug","artwork","id","products","product_id","_id","quantity","price","myLotStanding","most_recent_bid","max_bid","cents","auction_slug","sale","context_page","Schema","PageName","ArtworkPage","action_type","ActionType","ClickedBid","type","Type","Button","flow","Flow","Auctions","subject","Subject","EnterLiveAuction","context_module","ContextModule","Sidebar","Click","selectedMaxBidCents","newVal","setState","window","location","href","sd","APP_URL","firstIncrement","bid","state","user","liveUrl","PREDICTION_URL","is_closed","registrationAttempted","registrationStatus","registeredToBid","qualified_for_bidding","hasMyBids","is_preview","redirectToRegister","is_live_open","is_registration_closed","redirectToLiveBidding","is_open","myLastMaxBid","increments","sale_artwork","filter","increment","selectOptions","map","value","toString","text","display","setMaxBid","redirectToBid","React","Component","ArtworkSidebarBidActionFragmentContainer"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  LargeSelect,\n  Sans,\n  Separator,\n  Serif,\n  Spacer,\n  Tooltip,\n} from \"@artsy/palette\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { data as sd } from \"sharify\"\n\nimport { ArtworkSidebarBidAction_artwork } from \"__generated__/ArtworkSidebarBidAction_artwork.graphql\"\nimport { SystemContextConsumer } from \"Artsy\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport track from \"react-tracking\"\n\nexport interface ArtworkSidebarBidActionProps {\n  artwork: ArtworkSidebarBidAction_artwork\n}\n\nexport interface ArtworkSidebarBidActionState {\n  selectedMaxBidCents?: number\n}\n\n@track()\nexport class ArtworkSidebarBidAction extends React.Component<\n  ArtworkSidebarBidActionProps,\n  ArtworkSidebarBidActionState\n> {\n  state: ArtworkSidebarBidActionState = {\n    selectedMaxBidCents: null,\n  }\n\n  setMaxBid = (newVal: number) => {\n    this.setState({ selectedMaxBidCents: newVal })\n  }\n\n  redirectToRegister = () => {\n    const { sale } = this.props.artwork\n    window.location.href = `${sd.APP_URL}/auction-registration/${sale.id}`\n  }\n\n  @track((props: ArtworkSidebarBidActionProps) => ({\n    artwork_slug: props.artwork.id,\n    products: [\n      {\n        product_id: props.artwork._id,\n        quantity: 1,\n        price:\n          props.artwork.myLotStanding &&\n          props.artwork.myLotStanding[0] &&\n          props.artwork.myLotStanding[0].most_recent_bid.max_bid.cents / 100,\n      },\n    ],\n    auction_slug: props.artwork.sale.id,\n    context_page: Schema.PageName.ArtworkPage,\n    action_type: Schema.ActionType.ClickedBid,\n  }))\n  redirectToBid(firstIncrement: number) {\n    const { id, sale } = this.props.artwork\n    const bid = this.state.selectedMaxBidCents || firstIncrement\n    window.location.href = `${sd.APP_URL}/auction/${\n      sale.id\n    }/bid/${id}?bid=${bid}`\n  }\n\n  @track({\n    type: Schema.Type.Button,\n    flow: Schema.Flow.Auctions,\n    subject: Schema.Subject.EnterLiveAuction,\n    context_module: Schema.ContextModule.Sidebar,\n    action_type: Schema.ActionType.Click,\n  })\n  redirectToLiveBidding(user) {\n    const { id } = this.props.artwork.sale\n    const liveUrl = `${sd.PREDICTION_URL}/${id}`\n    if (user) {\n      window.location.href = `${liveUrl}/login`\n    } else {\n      window.location.href = liveUrl\n    }\n  }\n\n  render() {\n    const { artwork } = this.props\n\n    if (artwork.sale.is_closed) return null\n\n    const registrationAttempted = !!artwork.sale.registrationStatus\n    const registeredToBid =\n      registrationAttempted &&\n      artwork.sale.registrationStatus.qualified_for_bidding\n\n    /**\n     * NOTE: This is making an incorrect assumption that there could only ever\n     *       be 1 live sale with this work. When we run into that case, there is\n     *       likely design work to be done too, so we can adjust this then.\n     */\n    const myLotStanding = artwork.myLotStanding && artwork.myLotStanding[0]\n    const hasMyBids = !!(myLotStanding && myLotStanding.most_recent_bid)\n\n    if (artwork.sale.is_preview) {\n      return (\n        <>\n          {!registrationAttempted && (\n            <Button\n              width=\"100%\"\n              size=\"large\"\n              mt={1}\n              onClick={() => this.redirectToRegister()}\n            >\n              Register to bid\n            </Button>\n          )}\n          {registrationAttempted && !registeredToBid && (\n            <Button width=\"100%\" size=\"large\" mt={1} disabled>\n              Registration pending\n            </Button>\n          )}\n          {registrationAttempted && registeredToBid && (\n            <Button width=\"100%\" size=\"large\" mt={1} disabled>\n              Registration complete\n            </Button>\n          )}\n        </>\n      )\n    }\n\n    if (artwork.sale.is_live_open) {\n      return (\n        <SystemContextConsumer>\n          {({ user }) => {\n            return (\n              <Box>\n                {artwork.sale.is_registration_closed && !registeredToBid && (\n                  <Sans size=\"2\" color=\"black60\" pb={1} textAlign=\"center\">\n                    Registration closed\n                  </Sans>\n                )}\n                <Button\n                  width=\"100%\"\n                  size=\"large\"\n                  onClick={() => this.redirectToLiveBidding(user)}\n                >\n                  {artwork.sale.is_registration_closed && !registeredToBid\n                    ? \"Watch live bidding\"\n                    : \"Enter live bidding\"}\n                </Button>\n              </Box>\n            )\n          }}\n        </SystemContextConsumer>\n      )\n    }\n\n    if (artwork.sale.is_open) {\n      if (registrationAttempted && !registeredToBid) {\n        return (\n          <Button width=\"100%\" size=\"large\" disabled>\n            Registration pending\n          </Button>\n        )\n      }\n      if (artwork.sale.is_registration_closed && !registeredToBid) {\n        return (\n          <Button width=\"100%\" size=\"large\" disabled>\n            Registration closed\n          </Button>\n        )\n      }\n\n      const myLastMaxBid =\n        hasMyBids && myLotStanding.most_recent_bid.max_bid.cents\n      const increments = artwork.sale_artwork.increments.filter(\n        increment => increment.cents > (myLastMaxBid || 0)\n      )\n      const firstIncrement = increments[0]\n      const selectOptions = increments.map(increment => ({\n        value: increment.cents.toString(),\n        text: increment.display,\n      }))\n\n      return (\n        <Box>\n          <Separator mb={2} />\n          <Flex width=\"100%\" flexDirection=\"row\">\n            <Serif size=\"3t\" color=\"black100\" mr={1}>\n              Place max bid\n            </Serif>\n            <Tooltip\n              content=\"Set the maximum amount you would like Artsy to bid up to\n            on your behalf\"\n            >\n              <HelpIcon />\n            </Tooltip>\n          </Flex>\n          <LargeSelect options={selectOptions} onSelect={this.setMaxBid} />\n          <Spacer mb={2} />\n          <Button\n            width=\"100%\"\n            size=\"large\"\n            onClick={() => this.redirectToBid(firstIncrement.cents)}\n          >\n            {hasMyBids ? \"Increase max bid\" : \"Bid\"}\n          </Button>\n        </Box>\n      )\n    }\n  }\n}\n\nexport const ArtworkSidebarBidActionFragmentContainer = createFragmentContainer(\n  ArtworkSidebarBidAction,\n  {\n    artwork: graphql`\n      fragment ArtworkSidebarBidAction_artwork on Artwork {\n        myLotStanding(live: true) {\n          most_recent_bid {\n            max_bid {\n              cents\n            }\n          }\n        }\n        id\n        _id\n        sale {\n          id\n          registrationStatus {\n            qualified_for_bidding\n          }\n          is_preview\n          is_open\n          is_live_open\n          is_closed\n          is_registration_closed\n        }\n        sale_artwork {\n          increments {\n            cents\n            display\n          }\n        }\n      }\n    `,\n  }\n)\n"],"file":"ArtworkSidebarBidAction.js"}