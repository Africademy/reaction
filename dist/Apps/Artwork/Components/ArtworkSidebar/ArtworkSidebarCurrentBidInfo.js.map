{"version":3,"sources":["../../../../../src/Apps/Artwork/Components/ArtworkSidebar/ArtworkSidebarCurrentBidInfo.tsx"],"names":["ArtworkSidebarCurrentBidInfo","artwork","props","sale","is_live_open","is_closed","sale_artwork","current_bid","bidsCount","a","counts","bidder_positions","bidsPresent","bidColor","is_with_reserve","reserve_status","bidTextParts","reserveMessage","reserve_message","push","toLocaleLowerCase","bidText","join","myLotStanding","myBidPresent","most_recent_bid","myMostRecent","myBidWinning","s","active_bid","is_winning","myMaxBid","bid","max_bid","display","React","Component","ArtworkSidebarCurrentBidInfoFragmentContainer"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { get } from \"Utils/get\"\n\nimport { ArtworkSidebarCurrentBidInfo_artwork } from \"__generated__/ArtworkSidebarCurrentBidInfo_artwork.graphql\"\n\nimport {\n  Box,\n  Flex,\n  LosingBidIcon,\n  Sans,\n  Separator,\n  Serif,\n  Spacer,\n  WinningBidIcon,\n} from \"@artsy/palette\"\n\nexport interface ArtworkSidebarCurrentBidInfoProps {\n  artwork: ArtworkSidebarCurrentBidInfo_artwork\n}\n\nexport class ArtworkSidebarCurrentBidInfo extends React.Component<\n  ArtworkSidebarCurrentBidInfoProps\n> {\n  render() {\n    const { artwork } = this.props\n\n    // We do not have reliable Bid info for artworks in Live sales in progress\n    if (artwork.sale.is_live_open) return null\n\n    if (artwork.sale.is_closed) {\n      return (\n        <Box>\n          <Separator mb={3} />\n          <Serif size=\"5t\" weight=\"semibold\" color=\"black100\">\n            Bidding closed\n          </Serif>\n          <Spacer mb={3} />\n        </Box>\n      )\n    }\n\n    // Don't display anything if there is no starting bid info\n    if (!artwork.sale_artwork || !artwork.sale_artwork.current_bid) return null\n\n    const bidsCount = get(artwork, a => a.sale_artwork.counts.bidder_positions)\n    const bidsPresent = bidsCount > 0\n    const bidColor =\n      artwork.sale_artwork.is_with_reserve &&\n      bidsPresent &&\n      artwork.sale_artwork.reserve_status === \"reserve_not_met\"\n        ? \"red100\"\n        : \"black60\"\n\n    const bidTextParts = []\n    let reserveMessage = artwork.sale_artwork.reserve_message\n    if (bidsPresent) {\n      bidTextParts.push(bidsCount === 1 ? \"1 bid\" : bidsCount + \" bids\")\n      if (reserveMessage) reserveMessage = reserveMessage.toLocaleLowerCase()\n    }\n    if (reserveMessage) {\n      reserveMessage = reserveMessage + \".\"\n      bidTextParts.push(reserveMessage)\n    }\n    const bidText = bidTextParts.join(\", \")\n\n    /**\n     * NOTE: This is making an incorrect assumption that there could only ever\n     *       be 1 live sale with this work. When we run into that case, there is\n     *       likely design work to be done too, so we can adjust this then.\n     */\n    const myLotStanding = artwork.myLotStanding && artwork.myLotStanding[0]\n    const myBidPresent = !!(myLotStanding && myLotStanding.most_recent_bid)\n    const myMostRecent = myBidPresent && myLotStanding.most_recent_bid\n    const myBidWinning =\n      myBidPresent && get(myLotStanding, s => s.active_bid.is_winning)\n    const myMaxBid = get(myMostRecent, bid => bid.max_bid.display)\n    return (\n      <Box>\n        <Separator mb={3} />\n        <Flex width=\"100%\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <Serif size=\"5t\" weight=\"semibold\" pr={1}>\n            {bidsPresent ? \"Current bid\" : \"Starting bid\"}\n          </Serif>\n          <Flex\n            flexDirection=\"row\"\n            justifyContent=\"right\"\n            alignContent=\"baseline\"\n          >\n            {myBidPresent && (\n              <Box pt={0.5}>\n                {myBidWinning ? (\n                  <WinningBidIcon fill=\"green100\" />\n                ) : (\n                  <LosingBidIcon fill=\"red100\" />\n                )}\n              </Box>\n            )}\n            <Serif size=\"5t\" weight=\"semibold\" pl={0.5}>\n              {artwork.sale_artwork.current_bid.display}\n            </Serif>\n          </Flex>\n        </Flex>\n        <Flex width=\"100%\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <Sans size=\"2\" color={bidColor} pr={1}>\n            {bidText}\n          </Sans>\n          {myMaxBid && (\n            <Sans size=\"2\" color=\"black60\" pl={1}>\n              Your max: {myMaxBid}\n            </Sans>\n          )}\n        </Flex>\n        <Spacer mb={3} />\n      </Box>\n    )\n  }\n}\n\nexport const ArtworkSidebarCurrentBidInfoFragmentContainer = createFragmentContainer(\n  ArtworkSidebarCurrentBidInfo,\n  {\n    artwork: graphql`\n      fragment ArtworkSidebarCurrentBidInfo_artwork on Artwork {\n        sale {\n          is_closed\n          is_live_open\n        }\n        sale_artwork {\n          is_with_reserve\n          reserve_message\n          reserve_status\n          current_bid {\n            display\n          }\n          counts {\n            bidder_positions\n          }\n        }\n        myLotStanding(live: true) {\n          active_bid {\n            is_winning\n          }\n          most_recent_bid {\n            max_bid {\n              display\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n"],"file":"ArtworkSidebarCurrentBidInfo.js"}