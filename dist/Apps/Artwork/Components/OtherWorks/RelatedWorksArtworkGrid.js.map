{"version":3,"sources":["../../../../../src/Apps/Artwork/Components/OtherWorks/RelatedWorksArtworkGrid.tsx"],"names":["logger","MAX_TAB_ITEMS","RelatedWorksArtworkGrid","context_module","Schema","ContextModule","RelatedWorks","type","Type","ArtworkBrick","action_type","ActionType","Click","isLoading","tab","setState","props","relay","refetch","layerId","data","artworkSlug","artwork","id","error","layers","layer","mediator","artworksConnection","l","names","filter","name","length","handleTabClick","map","key","state","trackBrickClick","bind","React","Component","RelatedWorksArtworkGridRefetchContainer","RelatedWorksArtworkGridQueryRenderer","SystemContext","relayEnvironment","ArtworksContainer","styled","div"],"mappings":"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","sourcesContent":["import { Spinner, Tab, Tabs } from \"@artsy/palette\"\nimport { RelatedWorksArtworkGrid_artwork } from \"__generated__/RelatedWorksArtworkGrid_artwork.graphql\"\nimport { RelatedWorksArtworkGridQuery } from \"__generated__/RelatedWorksArtworkGridQuery.graphql\"\nimport { hideGrid } from \"Apps/Artwork/Components/OtherWorks\"\nimport { Header } from \"Apps/Artwork/Components/OtherWorks/Header\"\nimport { Mediator, SystemContext, withSystemContext } from \"Artsy\"\nimport { track } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport ArtworkGrid from \"Components/ArtworkGrid\"\nimport { take } from \"lodash\"\nimport React, { useContext } from \"react\"\nimport styled from \"styled-components\"\nimport createLogger from \"Utils/logger\"\n\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport { createRefetchContainer, graphql, RelayRefetchProp } from \"react-relay\"\nimport { get } from \"Utils/get\"\n\nconst logger = createLogger(\"RelatedWorksArtworkGrid.tsx\")\n\nconst MAX_TAB_ITEMS = 3\n\ninterface RelatedWorksArtworkGridProps {\n  relay: RelayRefetchProp\n  artwork: RelatedWorksArtworkGrid_artwork\n  mediator?: Mediator\n}\n\ninterface RelatedWorksArtworkGridState {\n  isLoading: boolean\n}\n\n@track({\n  context_module: Schema.ContextModule.RelatedWorks,\n})\nclass RelatedWorksArtworkGrid extends React.Component<\n  RelatedWorksArtworkGridProps,\n  RelatedWorksArtworkGridState\n> {\n  state = {\n    isLoading: false,\n  }\n\n  handleTabClick = (tab: { data: { layerId: string } }) => {\n    this.setState({ isLoading: true })\n\n    this.props.relay.refetch(\n      {\n        layerId: tab.data.layerId,\n        artworkSlug: this.props.artwork.id,\n      },\n      null,\n      error => {\n        this.setState({\n          isLoading: false,\n        })\n        if (error) {\n          logger.error(error)\n        }\n      }\n    )\n  }\n\n  @track({\n    type: Schema.Type.ArtworkBrick,\n    action_type: Schema.ActionType.Click,\n  })\n  trackBrickClick() {\n    // noop\n  }\n\n  render() {\n    const {\n      artwork: { layers, layer },\n      mediator,\n    } = this.props\n\n    // The layer might have failed to fetch, so we use the `get` helper\n    // instead of ordinary destructuring.\n    const artworksConnection = get(layer, l => l.artworksConnection)\n\n    if (hideGrid(artworksConnection)) {\n      return null\n    }\n\n    // For sale artworks are already rendered on the page so we filter them from related works\n    const names = take(layers.filter(l => l.name !== \"For Sale\"), MAX_TAB_ITEMS)\n\n    if (!names.length) {\n      return <></>\n    }\n\n    return (\n      <>\n        <Header title=\"Related works\" />\n        <Tabs justifyContent=\"center\" onChange={this.handleTabClick}>\n          {names.map(({ name, id }, key) => {\n            return (\n              <Tab name={name} key={key} data={{ layerId: id }}>\n                <ArtworksContainer>\n                  {this.state.isLoading ? (\n                    <Spinner />\n                  ) : (\n                    <ArtworkGrid\n                      artworks={artworksConnection}\n                      columnCount={[2, 3, 4]}\n                      preloadImageCount={0}\n                      mediator={mediator}\n                      onBrickClick={this.trackBrickClick.bind(this)}\n                    />\n                  )}\n                </ArtworksContainer>\n              </Tab>\n            )\n          })}\n        </Tabs>\n      </>\n    )\n  }\n}\n\nexport const RelatedWorksArtworkGridRefetchContainer = createRefetchContainer<\n  RelatedWorksArtworkGridProps\n>(\n  withSystemContext(RelatedWorksArtworkGrid),\n  {\n    artwork: graphql`\n      fragment RelatedWorksArtworkGrid_artwork on Artwork\n        @argumentDefinitions(layerId: { type: \"String\" }) {\n        layers {\n          name\n          id\n        }\n        id\n        layer(id: $layerId) {\n          name\n          artworksConnection(first: 8) {\n            ...ArtworkGrid_artworks\n\n            # Used to check for content\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n      }\n    `,\n  },\n  graphql`\n    query RelatedWorksArtworkGridRefetchQuery(\n      $artworkSlug: String!\n      $layerId: String!\n    ) {\n      artwork(id: $artworkSlug) {\n        ...RelatedWorksArtworkGrid_artwork @arguments(layerId: $layerId)\n      }\n    }\n  `\n)\n\n// FIXME: Move to storybooks\n\nexport const RelatedWorksArtworkGridQueryRenderer: React.SFC<{\n  artworkSlug: string\n}> = ({ artworkSlug }) => {\n  const { relayEnvironment } = useContext(SystemContext)\n\n  return (\n    <QueryRenderer<RelatedWorksArtworkGridQuery>\n      environment={relayEnvironment}\n      variables={{\n        artworkSlug,\n      }}\n      query={graphql`\n        query RelatedWorksArtworkGridQuery($artworkSlug: String!) {\n          artwork(id: $artworkSlug) {\n            ...RelatedWorksArtworkGrid_artwork\n          }\n        }\n      `}\n      render={renderWithLoadProgress(RelatedWorksArtworkGridRefetchContainer)}\n    />\n  )\n}\n\n// Set min-height so that spinner doesn't collapse area on tab switch\nconst ArtworksContainer = styled.div`\n  position: relative;\n  min-height: 500px;\n`\n"],"file":"RelatedWorksArtworkGrid.js"}