{"version":3,"sources":["../../../../src/Apps/Artwork/Utils/limitWithCount.tsx"],"names":["limitWithCount","initial","limit","length","remainCount","limited","slice","push"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;AAeO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,OAD4B,EAE5BC,KAF4B,EAGzB;AACH,MAAI,CAACD,OAAD,IAAYA,OAAO,CAACE,MAAR,GAAiB,CAAjC,EAAoC;AAClC,WAAO,EAAP;AACD;;AACD,MAAI,CAACD,KAAD,IAAUD,OAAO,CAACE,MAAR,IAAkBD,KAAhC,EAAuC;AACrC,WAAOD,OAAP;AACD;;AACD,MAAMG,WAAW,GAAGH,OAAO,CAACE,MAAR,GAAiBD,KAArC;AACA,MAAMG,OAAO,GAAGJ,OAAO,CAACK,KAAR,CAAc,CAAd,EAAiBJ,KAAjB,CAAhB;AACAG,EAAAA,OAAO,CAACE,IAAR,YAAiBH,WAAjB;AACA,SAAOC,OAAP;AACD,CAdM","sourcesContent":["/**\n * Helper function to limit array of strings for shorter displays\n * @param initial array of strings to chech for the limit\n * @param limit number of elements to keep\n * \n * @example\n   ```tsx\n   it(\"returns array of limit number of elements and count of the rest\", () => {\n    const initial = [\"let\", \"there\", \"be\", \"light\"]\n    const limit = 2\n    const limited = limitWithCount(initial, limit)\n    expect(limited).toEqual([\"let\", \"there\", \"+2 more\"]) })\n   ```\n */\n\nexport const limitWithCount = (\n  initial: ReadonlyArray<string>,\n  limit: number\n) => {\n  if (!initial || initial.length < 1) {\n    return []\n  }\n  if (!limit || initial.length <= limit) {\n    return initial\n  }\n  const remainCount = initial.length - limit\n  const limited = initial.slice(0, limit)\n  limited.push(`+${remainCount} more`)\n  return limited\n}\n"],"file":"limitWithCount.js"}