{"version":3,"sources":["../../../../src/Apps/Auction/Components/BidForm.tsx"],"names":["validationSchemaForRegisteredUsers","Yup","object","shape","selectedBid","string","required","validationSchemaForUnregisteredUsersWithCreditCard","agreeToTerms","bool","oneOf","getSelectedBid","initialSelectedBid","displayIncrements","selectedIncrement","selectedNum","Number","lastGoodIncrement","i","value","determineDisplayRequirements","bidder","me","isRegistered","requiresCheckbox","requiresPaymentInformation","hasQualifiedCreditCards","BidForm","onSubmit","saleArtwork","showPricingTransparency","increments","increment","cents","minimumNextBid","map","inc","toString","text","display","sale","registrationStatus","validationSchema","values","touched","errors","isSubmitting","setFieldValue","setFieldTouched","type","BidFormFragmentContainer"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  LargeSelect,\n  Sans,\n  Separator,\n  Serif,\n} from \"@artsy/palette\"\nimport { BidForm_me } from \"__generated__/BidForm_me.graphql\"\nimport { BidForm_saleArtwork } from \"__generated__/BidForm_saleArtwork.graphql\"\nimport { PricingTransparency } from \"Apps/Auction/Components/PricingTransparency\"\nimport { ConditionsOfSaleCheckbox } from \"Components/Auction/ConditionsOfSaleCheckbox\"\nimport { Form, Formik, FormikActions, FormikValues } from \"formik\"\nimport { dropWhile, find } from \"lodash\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport Yup from \"yup\"\n\ninterface Props {\n  initialSelectedBid?: string\n  me: BidForm_me\n  onSubmit: (values: FormikValues, actions: FormikActions<object>) => void\n  saleArtwork: BidForm_saleArtwork\n  showPricingTransparency?: boolean\n}\n\ninterface FormValues {\n  selectedBid: string\n  agreeToTerms: boolean\n}\n\nconst validationSchemaForRegisteredUsers = Yup.object().shape({\n  selectedBid: Yup.string().required(),\n})\n\nconst validationSchemaForUnregisteredUsersWithCreditCard = Yup.object().shape({\n  selectedBid: Yup.string().required(),\n  agreeToTerms: Yup.bool().oneOf(\n    [true],\n    \"You must agree to the Conditions of Sale\"\n  ),\n})\n\nconst getSelectedBid = ({\n  initialSelectedBid,\n  displayIncrements,\n}: {\n  initialSelectedBid: Props[\"initialSelectedBid\"]\n  displayIncrements: Array<{ value: string; text: string }>\n}): string => {\n  let selectedIncrement: { value: string }\n  if (!initialSelectedBid) {\n    selectedIncrement = displayIncrements[0]\n  } else {\n    const selectedNum = Number(initialSelectedBid)\n    const lastGoodIncrement = find(\n      displayIncrements,\n      i => Number(i.value) === selectedNum\n    )\n    selectedIncrement = lastGoodIncrement || displayIncrements[0]\n  }\n  return selectedIncrement.value\n}\n\nconst determineDisplayRequirements = (\n  bidder: BidForm_saleArtwork[\"sale\"][\"registrationStatus\"],\n  me: BidForm_me\n) => {\n  const isRegistered = !!bidder\n\n  return {\n    requiresCheckbox: !isRegistered,\n    requiresPaymentInformation: !(isRegistered || me.hasQualifiedCreditCards),\n  }\n}\n\nexport const BidForm: React.FC<Props> = ({\n  initialSelectedBid,\n  me,\n  onSubmit,\n  saleArtwork,\n  showPricingTransparency = false,\n}) => {\n  const displayIncrements = dropWhile(\n    saleArtwork.increments,\n    increment => increment.cents < saleArtwork.minimumNextBid.cents\n  ).map(inc => ({ value: inc.cents.toString(), text: inc.display }))\n\n  const selectedBid = getSelectedBid({ initialSelectedBid, displayIncrements })\n  const { requiresCheckbox } = determineDisplayRequirements(\n    saleArtwork.sale.registrationStatus,\n    me\n  )\n  const validationSchema = requiresCheckbox\n    ? validationSchemaForUnregisteredUsersWithCreditCard\n    : validationSchemaForRegisteredUsers\n\n  return (\n    <Box maxWidth={550}>\n      <Formik<FormValues>\n        initialValues={{\n          selectedBid,\n          agreeToTerms: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n        render={({\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          setFieldValue,\n          setFieldTouched,\n        }) => {\n          return (\n            <Form>\n              <Flex flexDirection=\"column\">\n                <Flex flexDirection=\"column\" py={4}>\n                  <Serif pb={0.5} size=\"4t\" weight=\"semibold\" color=\"black100\">\n                    Set your max bid\n                  </Serif>\n                  <LargeSelect\n                    selected={values.selectedBid}\n                    onSelect={value => {\n                      setFieldValue(\"selectedBid\", value)\n                      setFieldTouched(\"selectedBid\")\n                    }}\n                    options={displayIncrements}\n                  />\n                  {touched.selectedBid && errors.selectedBid && (\n                    <Sans mt={1} color=\"red100\" size=\"2\">\n                      {errors.selectedBid}\n                    </Sans>\n                  )}\n                  {showPricingTransparency && <PricingTransparency />}\n                </Flex>\n\n                <Flex\n                  pb={3}\n                  flexDirection=\"column\"\n                  justifyContent=\"center\"\n                  width=\"100%\"\n                >\n                  {requiresCheckbox && (\n                    <>\n                      <Separator mb={3} />\n\n                      <Box mx=\"auto\" mb={3}>\n                        <ConditionsOfSaleCheckbox\n                          selected={values.agreeToTerms}\n                          onSelect={value => {\n                            setFieldValue(\"agreeToTerms\", value)\n                            setFieldTouched(\"agreeToTerms\")\n                          }}\n                        />\n                        {touched.agreeToTerms && errors.agreeToTerms && (\n                          <Sans\n                            mt={1}\n                            color=\"red100\"\n                            size=\"2\"\n                            textAlign=\"center\"\n                          >\n                            {errors.agreeToTerms}\n                          </Sans>\n                        )}\n                      </Box>\n                    </>\n                  )}\n\n                  <Button\n                    size=\"large\"\n                    width=\"100%\"\n                    loading={isSubmitting}\n                    {...{ type: \"submit\" } as any}\n                  >\n                    Confirm bid\n                  </Button>\n                </Flex>\n              </Flex>\n            </Form>\n          )\n        }}\n      />\n    </Box>\n  )\n}\n\nexport const BidFormFragmentContainer = createFragmentContainer(BidForm, {\n  saleArtwork: graphql`\n    fragment BidForm_saleArtwork on SaleArtwork {\n      minimumNextBid: minimum_next_bid {\n        cents\n      }\n      increments(useMyMaxBid: true) {\n        cents\n        display\n      }\n      sale {\n        registrationStatus {\n          qualifiedForBidding: qualified_for_bidding\n        }\n      }\n    }\n  `,\n  me: graphql`\n    fragment BidForm_me on Me {\n      hasQualifiedCreditCards: has_qualified_credit_cards\n    }\n  `,\n})\n"],"file":"BidForm.js"}