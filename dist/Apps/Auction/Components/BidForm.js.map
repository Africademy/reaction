{"version":3,"sources":["../../../../src/Apps/Auction/Components/BidForm.tsx"],"names":["Yup","addMethod","string","message","test","value","trim","required","isValid","validationSchemaForRegisteredUsers","object","shape","selectedBid","validationSchemaForUnregisteredUsersWithCreditCard","agreeToTerms","bool","oneOf","validationSchemaForUnregisteredUsersWithoutCreditCard","address","name","present","addressLine1","country","city","region","postalCode","phoneNumber","getSelectedBid","initialSelectedBid","displayIncrements","selectedIncrement","selectedNum","Number","lastGoodIncrement","i","determineDisplayRequirements","bidder","me","isRegistered","requiresCheckbox","requiresPaymentInformation","hasQualifiedCreditCards","BidForm","onSubmit","saleArtwork","showPricingTransparency","increments","increment","cents","minimumNextBid","map","inc","toString","text","display","sale","registrationStatus","validationSchema","addressLine2","values","touched","errors","isSubmitting","setFieldValue","setFieldTouched","status","creditCard","type","BidFormFragmentContainer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAWA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAiBAA,aAAIC,SAAJ,CAAcD,aAAIE,MAAlB,EAA0B,SAA1B,EAAqC,UAASC,OAAT,EAAkB;AAAA;;AACrD,SAAO,KAAKC,IAAL,CAAU,cAAV,EAA0BD,OAA1B,EAAmC,UAAAE,KAAK,EAAI;AACjD,WAAO,KAAI,CAACC,IAAL,GACJC,QADI,CACKJ,OADL,EAEJK,OAFI,CAEIH,KAFJ,CAAP;AAGD,GAJM,CAAP;AAKD,CAND;;AAQA,IAAMI,kCAAkC,GAAGT,aAAIU,MAAJ,GAAaC,KAAb,CAAmB;AAC5DC,EAAAA,WAAW,EAAEZ,aAAIE,MAAJ,GAAaK,QAAb;AAD+C,CAAnB,CAA3C;;AAIA,IAAMM,kDAAkD,GAAGb,aAAIU,MAAJ,GAAaC,KAAb,CAAmB;AAC5EC,EAAAA,WAAW,EAAEZ,aAAIE,MAAJ,GAAaK,QAAb,EAD+D;AAE5EO,EAAAA,YAAY,EAAEd,aAAIe,IAAJ,GAAWC,KAAX,CACZ,CAAC,IAAD,CADY,EAEZ,0CAFY;AAF8D,CAAnB,CAA3D;;AAQA,IAAMC,qDAAqD,GAAGjB,aAAIU,MAAJ,GAAaC,KAAb,CAC5D;AACEC,EAAAA,WAAW,EAAEZ,aAAIE,MAAJ,GAAaK,QAAb,EADf;AAEEW,EAAAA,OAAO,EAAElB,aAAIU,MAAJ,CAAW;AAClBS,IAAAA,IAAI,EAAEnB,aAAIE,MAAJ,GAAakB,OAAb,CAAqB,kBAArB,CADY;AAElBC,IAAAA,YAAY,EAAErB,aAAIE,MAAJ,GAAakB,OAAb,CAAqB,qBAArB,CAFI;AAGlBE,IAAAA,OAAO,EAAEtB,aAAIE,MAAJ,GAAakB,OAAb,CAAqB,qBAArB,CAHS;AAIlBG,IAAAA,IAAI,EAAEvB,aAAIE,MAAJ,GAAakB,OAAb,CAAqB,kBAArB,CAJY;AAKlBI,IAAAA,MAAM,EAAExB,aAAIE,MAAJ,GAAakB,OAAb,CAAqB,mBAArB,CALU;AAMlBK,IAAAA,UAAU,EAAEzB,aAAIE,MAAJ,GAAakB,OAAb,CAAqB,yBAArB,CANM;AAOlBM,IAAAA,WAAW,EAAE1B,aAAIE,MAAJ,GAAakB,OAAb,CAAqB,uBAArB;AAPK,GAAX,CAFX;AAWEN,EAAAA,YAAY,EAAEd,aAAIe,IAAJ,GAAWC,KAAX,CACZ,CAAC,IAAD,CADY,EAEZ,0CAFY;AAXhB,CAD4D,CAA9D;;AAmBA,IAAMW,cAAc,GAAG,SAAjBA,cAAiB,OAMT;AAAA,MALZC,kBAKY,QALZA,kBAKY;AAAA,MAJZC,iBAIY,QAJZA,iBAIY;AACZ,MAAIC,iBAAJ;;AACA,MAAI,CAACF,kBAAL,EAAyB;AACvBE,IAAAA,iBAAiB,GAAGD,iBAAiB,CAAC,CAAD,CAArC;AACD,GAFD,MAEO;AACL,QAAME,WAAW,GAAGC,MAAM,CAACJ,kBAAD,CAA1B;AACA,QAAMK,iBAAiB,GAAG,oBACxBJ,iBADwB,EAExB,UAAAK,CAAC;AAAA,aAAIF,MAAM,CAACE,CAAC,CAAC7B,KAAH,CAAN,KAAoB0B,WAAxB;AAAA,KAFuB,CAA1B;AAIAD,IAAAA,iBAAiB,GAAGG,iBAAiB,IAAIJ,iBAAiB,CAAC,CAAD,CAA1D;AACD;;AACD,SAAOC,iBAAiB,CAACzB,KAAzB;AACD,CAnBD;;AAqBO,IAAM8B,4BAA4B,GAAG,SAA/BA,4BAA+B,CAC1CC,MAD0C,EAE1CC,EAF0C,EAGvC;AACH,MAAMC,YAAY,GAAG,CAAC,CAACF,MAAvB;AAEA,SAAO;AACLG,IAAAA,gBAAgB,EAAE,CAACD,YADd;AAELE,IAAAA,0BAA0B,EAAE,EAAEF,YAAY,IAAID,EAAE,CAACI,uBAArB;AAFvB,GAAP;AAID,CAVM;;;;AAYA,IAAMC,OAAwB,GAAG,SAA3BA,OAA2B,QAMlC;AAAA,MALJd,kBAKI,SALJA,kBAKI;AAAA,MAJJS,EAII,SAJJA,EAII;AAAA,MAHJM,QAGI,SAHJA,QAGI;AAAA,MAFJC,WAEI,SAFJA,WAEI;AAAA,oCADJC,uBACI;AAAA,MADJA,uBACI,sCADsB,KACtB;AACJ,MAAMhB,iBAAiB,GAAG,yBACxBe,WAAW,CAACE,UADY,EAExB,UAAAC,SAAS;AAAA,WAAIA,SAAS,CAACC,KAAV,GAAkBJ,WAAW,CAACK,cAAZ,CAA2BD,KAAjD;AAAA,GAFe,EAGxBE,GAHwB,CAGpB,UAAAC,GAAG;AAAA,WAAK;AAAE9C,MAAAA,KAAK,EAAE8C,GAAG,CAACH,KAAJ,CAAUI,QAAV,EAAT;AAA+BC,MAAAA,IAAI,EAAEF,GAAG,CAACG;AAAzC,KAAL;AAAA,GAHiB,CAA1B;AAKA,MAAM1C,WAAW,GAAGe,cAAc,CAAC;AAAEC,IAAAA,kBAAkB,EAAlBA,kBAAF;AAAsBC,IAAAA,iBAAiB,EAAjBA;AAAtB,GAAD,CAAlC;;AANI,8BAUAM,4BAA4B,CAACS,WAAW,CAACW,IAAZ,CAAiBC,kBAAlB,EAAsCnB,EAAtC,CAV5B;AAAA,MAQFE,gBARE,yBAQFA,gBARE;AAAA,MASFC,0BATE,yBASFA,0BATE;;AAWJ,MAAMiB,gBAAgB,GAAGlB,gBAAgB,GACrCC,0BAA0B,GACxBvB,qDADwB,GAExBJ,kDAHmC,GAIrCJ,kCAJJ;AAMA,SACE,6BAAC,YAAD;AAAK,IAAA,QAAQ,EAAE;AAAf,KACE,6BAAC,cAAD;AACE,IAAA,aAAa,EAAE;AACbG,MAAAA,WAAW,EAAXA,WADa;AAEbE,MAAAA,YAAY,EAAE,KAFD;AAGbI,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,EADC;AAEPG,QAAAA,OAAO,EAAE,EAFF;AAGPG,QAAAA,UAAU,EAAE,EAHL;AAIPJ,QAAAA,YAAY,EAAE,EAJP;AAKPqC,QAAAA,YAAY,EAAE,EALP;AAMPnC,QAAAA,IAAI,EAAE,EANC;AAOPC,QAAAA,MAAM,EAAE,EAPD;AAQPE,QAAAA,WAAW,EAAE;AARN;AAHI,KADjB;AAeE,IAAA,gBAAgB,EAAE+B,gBAfpB;AAgBE,IAAA,QAAQ,EAAEd,QAhBZ;AAiBE,IAAA,MAAM,EAAE,uBAQF;AAAA,UAPJgB,MAOI,SAPJA,MAOI;AAAA,UANJC,OAMI,SANJA,OAMI;AAAA,UALJC,MAKI,SALJA,MAKI;AAAA,UAJJC,YAII,SAJJA,YAII;AAAA,UAHJC,aAGI,SAHJA,aAGI;AAAA,UAFJC,eAEI,SAFJA,eAEI;AAAA,UADJC,MACI,SADJA,MACI;AACJ,aACE,6BAAC,YAAD,QACE,6BAAC,aAAD;AAAM,QAAA,aAAa,EAAC;AAApB,SACE,6BAAC,aAAD;AAAM,QAAA,aAAa,EAAC,QAApB;AAA6B,QAAA,EAAE,EAAE;AAAjC,SACE,6BAAC,cAAD;AAAO,QAAA,EAAE,EAAE,GAAX;AAAgB,QAAA,IAAI,EAAC,IAArB;AAA0B,QAAA,MAAM,EAAC,UAAjC;AAA4C,QAAA,KAAK,EAAC;AAAlD,4BADF,EAIE,6BAAC,oBAAD;AACE,QAAA,QAAQ,EAAEN,MAAM,CAAC/C,WADnB;AAEE,QAAA,QAAQ,EAAE,kBAAAP,KAAK,EAAI;AACjB0D,UAAAA,aAAa,CAAC,aAAD,EAAgB1D,KAAhB,CAAb;AACA2D,UAAAA,eAAe,CAAC,aAAD,CAAf;AACD,SALH;AAME,QAAA,OAAO,EAAEnC;AANX,QAJF,EAYG+B,OAAO,CAAChD,WAAR,IAAuBiD,MAAM,CAACjD,WAA9B,IACC,6BAAC,aAAD;AAAM,QAAA,EAAE,EAAE,CAAV;AAAa,QAAA,KAAK,EAAC,QAAnB;AAA4B,QAAA,IAAI,EAAC;AAAjC,SACGiD,MAAM,CAACjD,WADV,CAbJ,EAiBGiC,uBAAuB,IAAI,6BAAC,wCAAD,OAjB9B,CADF,EAqBGL,0BAA0B,IACzB,6BAAC,YAAD,QACE,6BAAC,kBAAD;AAAW,QAAA,EAAE,EAAE;AAAf,QADF,EAEE,6BAAC,8CAAD,OAFF,EAIE,6BAAC,cAAD;AACE,QAAA,EAAE,EAAE,CADN;AAEE,QAAA,EAAE,EAAE,CAFN;AAGE,QAAA,IAAI,EAAC,IAHP;AAIE,QAAA,MAAM,EAAC,UAJT;AAKE,QAAA,KAAK,EAAC;AALR,4BAJF,EAcE,6BAAC,gCAAD;AACE,QAAA,KAAK,EAAE;AAAErC,UAAAA,OAAO,EAAE0D,MAAM,CAACK;AAAlB;AADT,QAdF,EAkBE,6BAAC,YAAD;AAAK,QAAA,EAAE,EAAE;AAAT,SACE,6BAAC,wBAAD;AACE,QAAA,KAAK,EAAEP,MAAM,CAACzC,OADhB;AAEE,QAAA,QAAQ,EAAE,kBAAAA,OAAO;AAAA,iBAAI6C,aAAa,CAAC,SAAD,EAAY7C,OAAZ,CAAjB;AAAA,SAFnB;AAGE,QAAA,MAAM,EAAE2C,MAAM,CAAC3C,OAHjB;AAIE,QAAA,OAAO,EAAE0C,OAAO,CAAC1C,OAJnB;AAKE,QAAA,OAAO,MALT;AAME,QAAA,oBAAoB;AANtB,QADF,CAlBF,CAtBJ,EAqDE,6BAAC,aAAD;AACE,QAAA,EAAE,EAAE,CADN;AAEE,QAAA,aAAa,EAAC,QAFhB;AAGE,QAAA,cAAc,EAAC,QAHjB;AAIE,QAAA,KAAK,EAAC;AAJR,SAMGqB,gBAAgB,IACf,4DACE,6BAAC,kBAAD;AAAW,QAAA,EAAE,EAAE;AAAf,QADF,EAGE,6BAAC,YAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAe,QAAA,EAAE,EAAE;AAAnB,SACE,6BAAC,kDAAD;AACE,QAAA,QAAQ,EAAEoB,MAAM,CAAC7C,YADnB;AAEE,QAAA,QAAQ,EAAE,kBAAAT,KAAK,EAAI;AACjB0D,UAAAA,aAAa,CAAC,cAAD,EAAiB1D,KAAjB,CAAb;AACA2D,UAAAA,eAAe,CAAC,cAAD,CAAf;AACD;AALH,QADF,EAQGJ,OAAO,CAAC9C,YAAR,IAAwB+C,MAAM,CAAC/C,YAA/B,IACC,6BAAC,aAAD;AACE,QAAA,EAAE,EAAE,CADN;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,IAAI,EAAC,GAHP;AAIE,QAAA,SAAS,EAAC;AAJZ,SAMG+C,MAAM,CAAC/C,YANV,CATJ,CAHF,CAPJ,EAgCGmD,MAAM,IACL,6BAAC,aAAD;AAAM,QAAA,SAAS,EAAC,QAAhB;AAAyB,QAAA,IAAI,EAAC,GAA9B;AAAkC,QAAA,KAAK,EAAC,QAAxC;AAAiD,QAAA,EAAE,EAAE;AAArD,SACGA,MADH,MAjCJ,EAsCE,6BAAC,eAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,OAAO,EAAEH;AAHX,SAIM;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAJN,iBAtCF,CArDF,CADF,CADF;AAyGD;AAnIH,IADF,CADF;AAyID,CAhKM;;;AAkKA,IAAMC,wBAAwB,GAAG,yCAAwB1B,OAAxB,EAAiC;AACvEE,EAAAA,WAAW;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,GAD4D;AAiBvEP,EAAAA,EAAE;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjBqE,CAAjC,CAAjC","sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  LargeSelect,\n  Sans,\n  Separator,\n  Serif,\n} from \"@artsy/palette\"\nimport { BidForm_me } from \"__generated__/BidForm_me.graphql\"\nimport { BidForm_saleArtwork } from \"__generated__/BidForm_saleArtwork.graphql\"\nimport { PricingTransparency } from \"Apps/Auction/Components/PricingTransparency\"\nimport { ConditionsOfSaleCheckbox } from \"Components/Auction/ConditionsOfSaleCheckbox\"\nimport { Form, Formik, FormikActions, FormikValues } from \"formik\"\nimport { dropWhile, find } from \"lodash\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport Yup from \"yup\"\n\nimport { CreditCardInstructions } from \"Apps/Auction/Components/CreditCardInstructions\"\nimport { Address, AddressForm } from \"Apps/Order/Components/AddressForm\"\nimport { CreditCardInput } from \"Apps/Order/Components/CreditCardInput\"\n\ninterface Props {\n  initialSelectedBid?: string\n  me: BidForm_me\n  onSubmit: (values: FormikValues, actions: FormikActions<object>) => void\n  saleArtwork: BidForm_saleArtwork\n  showPricingTransparency?: boolean\n}\n\nexport interface FormValues {\n  address?: Address\n  agreeToTerms: boolean\n  creditCard?: string\n  selectedBid: string\n}\n\nYup.addMethod(Yup.string, \"present\", function(message) {\n  return this.test(\"test-present\", message, value => {\n    return this.trim()\n      .required(message)\n      .isValid(value)\n  })\n})\n\nconst validationSchemaForRegisteredUsers = Yup.object().shape({\n  selectedBid: Yup.string().required(),\n})\n\nconst validationSchemaForUnregisteredUsersWithCreditCard = Yup.object().shape({\n  selectedBid: Yup.string().required(),\n  agreeToTerms: Yup.bool().oneOf(\n    [true],\n    \"You must agree to the Conditions of Sale\"\n  ),\n})\n\nconst validationSchemaForUnregisteredUsersWithoutCreditCard = Yup.object().shape(\n  {\n    selectedBid: Yup.string().required(),\n    address: Yup.object({\n      name: Yup.string().present(\"Name is required\"),\n      addressLine1: Yup.string().present(\"Address is required\"),\n      country: Yup.string().present(\"Country is required\"),\n      city: Yup.string().present(\"City is required\"),\n      region: Yup.string().present(\"State is required\"),\n      postalCode: Yup.string().present(\"Postal code is required\"),\n      phoneNumber: Yup.string().present(\"Telephone is required\"),\n    }),\n    agreeToTerms: Yup.bool().oneOf(\n      [true],\n      \"You must agree to the Conditions of Sale\"\n    ),\n  }\n)\n\nconst getSelectedBid = ({\n  initialSelectedBid,\n  displayIncrements,\n}: {\n  initialSelectedBid: Props[\"initialSelectedBid\"]\n  displayIncrements: Array<{ value: string; text: string }>\n}): string => {\n  let selectedIncrement: { value: string }\n  if (!initialSelectedBid) {\n    selectedIncrement = displayIncrements[0]\n  } else {\n    const selectedNum = Number(initialSelectedBid)\n    const lastGoodIncrement = find(\n      displayIncrements,\n      i => Number(i.value) === selectedNum\n    )\n    selectedIncrement = lastGoodIncrement || displayIncrements[0]\n  }\n  return selectedIncrement.value\n}\n\nexport const determineDisplayRequirements = (\n  bidder: BidForm_saleArtwork[\"sale\"][\"registrationStatus\"],\n  me: BidForm_me\n) => {\n  const isRegistered = !!bidder\n\n  return {\n    requiresCheckbox: !isRegistered,\n    requiresPaymentInformation: !(isRegistered || me.hasQualifiedCreditCards),\n  }\n}\n\nexport const BidForm: React.FC<Props> = ({\n  initialSelectedBid,\n  me,\n  onSubmit,\n  saleArtwork,\n  showPricingTransparency = false,\n}) => {\n  const displayIncrements = dropWhile(\n    saleArtwork.increments,\n    increment => increment.cents < saleArtwork.minimumNextBid.cents\n  ).map(inc => ({ value: inc.cents.toString(), text: inc.display }))\n\n  const selectedBid = getSelectedBid({ initialSelectedBid, displayIncrements })\n  const {\n    requiresCheckbox,\n    requiresPaymentInformation,\n  } = determineDisplayRequirements(saleArtwork.sale.registrationStatus, me)\n  const validationSchema = requiresCheckbox\n    ? requiresPaymentInformation\n      ? validationSchemaForUnregisteredUsersWithoutCreditCard\n      : validationSchemaForUnregisteredUsersWithCreditCard\n    : validationSchemaForRegisteredUsers\n\n  return (\n    <Box maxWidth={550}>\n      <Formik<FormValues>\n        initialValues={{\n          selectedBid,\n          agreeToTerms: false,\n          address: {\n            name: \"\",\n            country: \"\",\n            postalCode: \"\",\n            addressLine1: \"\",\n            addressLine2: \"\",\n            city: \"\",\n            region: \"\",\n            phoneNumber: \"\",\n          },\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n        render={({\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          setFieldValue,\n          setFieldTouched,\n          status,\n        }) => {\n          return (\n            <Form>\n              <Flex flexDirection=\"column\">\n                <Flex flexDirection=\"column\" py={4}>\n                  <Serif pb={0.5} size=\"4t\" weight=\"semibold\" color=\"black100\">\n                    Set your max bid\n                  </Serif>\n                  <LargeSelect\n                    selected={values.selectedBid}\n                    onSelect={value => {\n                      setFieldValue(\"selectedBid\", value)\n                      setFieldTouched(\"selectedBid\")\n                    }}\n                    options={displayIncrements}\n                  />\n                  {touched.selectedBid && errors.selectedBid && (\n                    <Sans mt={1} color=\"red100\" size=\"2\">\n                      {errors.selectedBid}\n                    </Sans>\n                  )}\n                  {showPricingTransparency && <PricingTransparency />}\n                </Flex>\n\n                {requiresPaymentInformation && (\n                  <Box>\n                    <Separator mb={3} />\n                    <CreditCardInstructions />\n\n                    <Serif\n                      mt={4}\n                      mb={2}\n                      size=\"4t\"\n                      weight=\"semibold\"\n                      color=\"black100\"\n                    >\n                      Card Information\n                    </Serif>\n\n                    <CreditCardInput\n                      error={{ message: errors.creditCard } as stripe.Error}\n                    />\n\n                    <Box mt={2}>\n                      <AddressForm\n                        value={values.address}\n                        onChange={address => setFieldValue(\"address\", address)}\n                        errors={errors.address}\n                        touched={touched.address}\n                        billing\n                        showPhoneNumberInput\n                      />\n                    </Box>\n                  </Box>\n                )}\n\n                <Flex\n                  pb={3}\n                  flexDirection=\"column\"\n                  justifyContent=\"center\"\n                  width=\"100%\"\n                >\n                  {requiresCheckbox && (\n                    <>\n                      <Separator mb={3} />\n\n                      <Box mx=\"auto\" mb={3}>\n                        <ConditionsOfSaleCheckbox\n                          selected={values.agreeToTerms}\n                          onSelect={value => {\n                            setFieldValue(\"agreeToTerms\", value)\n                            setFieldTouched(\"agreeToTerms\")\n                          }}\n                        />\n                        {touched.agreeToTerms && errors.agreeToTerms && (\n                          <Sans\n                            mt={1}\n                            color=\"red100\"\n                            size=\"2\"\n                            textAlign=\"center\"\n                          >\n                            {errors.agreeToTerms}\n                          </Sans>\n                        )}\n                      </Box>\n                    </>\n                  )}\n\n                  {status && (\n                    <Sans textAlign=\"center\" size=\"3\" color=\"red100\" mb={2}>\n                      {status}.\n                    </Sans>\n                  )}\n\n                  <Button\n                    size=\"large\"\n                    width=\"100%\"\n                    loading={isSubmitting}\n                    {...{ type: \"submit\" } as any}\n                  >\n                    Confirm bid\n                  </Button>\n                </Flex>\n              </Flex>\n            </Form>\n          )\n        }}\n      />\n    </Box>\n  )\n}\n\nexport const BidFormFragmentContainer = createFragmentContainer(BidForm, {\n  saleArtwork: graphql`\n    fragment BidForm_saleArtwork on SaleArtwork {\n      minimumNextBid: minimum_next_bid {\n        cents\n      }\n      increments(useMyMaxBid: true) {\n        cents\n        display\n      }\n      sale {\n        registrationStatus {\n          qualifiedForBidding: qualified_for_bidding\n        }\n      }\n    }\n  `,\n  me: graphql`\n    fragment BidForm_me on Me {\n      hasQualifiedCreditCards: has_qualified_credit_cards\n    }\n  `,\n})\n"],"file":"BidForm.js"}