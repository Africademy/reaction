{"version":3,"sources":["../../../../src/Apps/Auction/Components/BidForm.tsx"],"names":["validationSchema","Yup","object","shape","selectedBid","string","required","agreeToTerms","bool","oneOf","getSelectedBid","initialSelectedBid","displayIncrements","selectedIncrement","selectedNum","Number","lastGoodIncrement","i","value","BidForm","onSubmit","saleArtwork","showPricingTransparency","increments","increment","cents","minimumNextBid","map","inc","toString","text","display","values","touched","errors","isSubmitting","setFieldValue","setFieldTouched","type","BidFormFragmentContainer"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  LargeSelect,\n  Sans,\n  Separator,\n  Serif,\n} from \"@artsy/palette\"\nimport { BidForm_saleArtwork } from \"__generated__/BidForm_saleArtwork.graphql\"\nimport { PricingTransparency } from \"Apps/Auction/Components/PricingTransparency\"\nimport { ConditionsOfSaleCheckbox } from \"Components/Auction/ConditionsOfSaleCheckbox\"\nimport { Form, Formik, FormikActions, FormikValues } from \"formik\"\nimport { dropWhile, find } from \"lodash\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport Yup from \"yup\"\n\ninterface Props {\n  showPricingTransparency?: boolean\n  saleArtwork: BidForm_saleArtwork\n  initialSelectedBid?: string\n  onSubmit: (values: FormikValues, actions: FormikActions<object>) => void\n}\n\ninterface FormValues {\n  selectedBid: string\n  agreeToTerms: boolean\n}\n\nconst validationSchema = Yup.object().shape({\n  selectedBid: Yup.string().required(),\n  agreeToTerms: Yup.bool().oneOf(\n    [true],\n    \"You must agree to the Conditions of Sale\"\n  ),\n})\n\nconst getSelectedBid = ({\n  initialSelectedBid,\n  displayIncrements,\n}: {\n  initialSelectedBid: Props[\"initialSelectedBid\"]\n  displayIncrements: Array<{ value: string; text: string }>\n}): string => {\n  let selectedIncrement: { value: string }\n  if (!initialSelectedBid) {\n    selectedIncrement = displayIncrements[0]\n  } else {\n    const selectedNum = Number(initialSelectedBid)\n    const lastGoodIncrement = find(\n      displayIncrements,\n      i => Number(i.value) === selectedNum\n    )\n    selectedIncrement = lastGoodIncrement || displayIncrements[0]\n  }\n  return selectedIncrement.value\n}\n\nexport const BidForm: React.FC<Props> = ({\n  onSubmit,\n  saleArtwork,\n  showPricingTransparency = false,\n  initialSelectedBid,\n}) => {\n  const displayIncrements = dropWhile(\n    saleArtwork.increments,\n    increment => increment.cents < saleArtwork.minimumNextBid.cents\n  ).map(inc => ({ value: inc.cents.toString(), text: inc.display }))\n\n  const selectedBid = getSelectedBid({ initialSelectedBid, displayIncrements })\n\n  return (\n    <Box maxWidth={550}>\n      <Formik<FormValues>\n        initialValues={{\n          selectedBid,\n          agreeToTerms: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n        render={({\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          setFieldValue,\n          setFieldTouched,\n        }) => {\n          return (\n            <Form>\n              <Flex flexDirection=\"column\">\n                <Flex flexDirection=\"column\" py={4}>\n                  <Serif pb={0.5} size=\"4t\" weight=\"semibold\" color=\"black100\">\n                    Set your max bid\n                  </Serif>\n                  <LargeSelect\n                    selected={values.selectedBid}\n                    onSelect={value => {\n                      setFieldValue(\"selectedBid\", value)\n                      setFieldTouched(\"selectedBid\")\n                    }}\n                    options={displayIncrements}\n                  />\n                  {touched.selectedBid && errors.selectedBid && (\n                    <Sans mt={1} color=\"red100\" size=\"2\">\n                      {errors.selectedBid}\n                    </Sans>\n                  )}\n                  {showPricingTransparency && <PricingTransparency />}\n                </Flex>\n                <Separator />\n                <Flex\n                  py={3}\n                  flexDirection=\"column\"\n                  justifyContent=\"center\"\n                  width=\"100%\"\n                >\n                  <Box mx=\"auto\" mb={3}>\n                    <ConditionsOfSaleCheckbox\n                      selected={values.agreeToTerms}\n                      onSelect={value => {\n                        setFieldValue(\"agreeToTerms\", value)\n                        setFieldTouched(\"agreeToTerms\")\n                      }}\n                    />\n                    {touched.agreeToTerms && errors.agreeToTerms && (\n                      <Sans mt={1} color=\"red100\" size=\"2\" textAlign=\"center\">\n                        {errors.agreeToTerms}\n                      </Sans>\n                    )}\n                  </Box>\n                  <Button\n                    size=\"large\"\n                    mt={3}\n                    width=\"100%\"\n                    loading={isSubmitting}\n                    {...{ type: \"submit\" } as any}\n                  >\n                    Confirm bid\n                  </Button>\n                </Flex>\n              </Flex>\n            </Form>\n          )\n        }}\n      />\n    </Box>\n  )\n}\n\nexport const BidFormFragmentContainer = createFragmentContainer(BidForm, {\n  saleArtwork: graphql`\n    fragment BidForm_saleArtwork on SaleArtwork {\n      minimumNextBid: minimum_next_bid {\n        cents\n      }\n      increments(useMyMaxBid: true) {\n        cents\n        display\n      }\n    }\n  `,\n})\n"],"file":"BidForm.js"}