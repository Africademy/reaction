{"version":3,"sources":["../../../../src/Apps/Auction/Components/LotInfo.tsx"],"names":["LotInfo","artwork","saleArtwork","bidCount","counts","bidderPositions","imageUrl","lotLabel","title","date","artistNames","minimumNextBid","display","LotInfoFragmentContainer"],"mappings":";;;;;;;;;AAAA;;AAGA;;AACA;;;;AAQO,IAAMA,OAAwB,GAAG,SAA3BA,OAA2B,OAA8B;AAAA,MAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AAAA,MAEvCC,QAFuC,GAGhED,WAHgE,CAElEE,MAFkE,CAExDC,eAFwD;AAIpE,SACE,6BAAC,aAAD;AAAM,IAAA,EAAE,EAAE;AAAV,KACE,6BAAC,aAAD;AAAM,IAAA,QAAQ,EAAC;AAAf,KACE,6BAAC,cAAD;AAAO,IAAA,KAAK,EAAC,MAAb;AAAoB,IAAA,GAAG,EAAEJ,OAAO,CAACK;AAAjC,IADF,CADF,EAIE,6BAAC,aAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAa,IAAA,EAAE,EAAE,CAAjB;AAAoB,IAAA,aAAa,EAAC;AAAlC,KACE,6BAAC,aAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAe,IAAA,MAAM,EAAC,QAAtB;AAA+B,IAAA,KAAK,EAAC;AAArC,aACOJ,WAAW,CAACK,QADnB,CADF,EAIE,6BAAC,cAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,KAAK,EAAC;AAAtB,KACE,wCAAIN,OAAO,CAACO,KAAZ,CADF,EAEGP,OAAO,CAACQ,IAAR,gBAAqBR,OAAO,CAACQ,IAA7B,CAFH,CAJF,EAQE,6BAAC,cAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,KAAK,EAAC;AAAtB,KACGR,OAAO,CAACS,WADX,CARF,EAWE,wCAXF,EAYE,6BAAC,cAAD;AAAO,IAAA,IAAI,EAAC;AAAZ,sBACgBR,WAAW,CAACS,cAAZ,CAA2BC,OAD3C,CAZF,EAeGT,QAAQ,GAAG,CAAX,IACC,6BAAC,cAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,KAAK,EAAC;AAAtB,UACIA,QADJ,UACkBA,QAAQ,GAAG,CAAX,IAAgB,GADlC,MAhBJ,CAJF,CADF;AA4BD,CAhCM;;;AAkCA,IAAMU,wBAAwB,GAAG,yCAAwBb,OAAxB,EAAiC;AACvEC,EAAAA,OAAO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,GADgE;AAUvEC,EAAAA,WAAW;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAV4D,CAAjC,CAAjC","sourcesContent":["import { Flex, Image, Sans, Serif } from \"@artsy/palette\"\nimport { LotInfo_artwork } from \"__generated__/LotInfo_artwork.graphql\"\nimport { LotInfo_saleArtwork } from \"__generated__/LotInfo_saleArtwork.graphql\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql, RelayProp } from \"react-relay\"\n\ninterface Props {\n  artwork: LotInfo_artwork\n  saleArtwork: LotInfo_saleArtwork\n  relay: RelayProp\n}\n\nexport const LotInfo: React.FC<Props> = ({ artwork, saleArtwork }) => {\n  const {\n    counts: { bidderPositions: bidCount },\n  } = saleArtwork\n  return (\n    <Flex py={4}>\n      <Flex maxWidth=\"150px\">\n        <Image width=\"100%\" src={artwork.imageUrl} />\n      </Flex>\n      <Flex pl={3} pt={1} flexDirection=\"column\">\n        <Sans size=\"3\" weight=\"medium\" color=\"black100\">\n          Lot {saleArtwork.lotLabel}\n        </Sans>\n        <Serif size=\"3\" color=\"black100\">\n          <i>{artwork.title}</i>\n          {artwork.date && `, ${artwork.date}`}\n        </Serif>\n        <Serif size=\"3\" color=\"black100\">\n          {artwork.artistNames}\n        </Serif>\n        <br />\n        <Serif size=\"3\">\n          Current Bid: {saleArtwork.minimumNextBid.display}\n        </Serif>\n        {bidCount > 0 && (\n          <Serif size=\"3\" color=\"black60\">\n            ({bidCount} bid{bidCount > 1 && \"s\"})\n          </Serif>\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport const LotInfoFragmentContainer = createFragmentContainer(LotInfo, {\n  artwork: graphql`\n    fragment LotInfo_artwork on Artwork {\n      _id\n      date\n      title\n      imageUrl\n      artistNames: artist_names\n    }\n  `,\n  saleArtwork: graphql`\n    fragment LotInfo_saleArtwork on SaleArtwork {\n      counts {\n        bidderPositions: bidder_positions\n      }\n      lotLabel: lot_label\n      minimumNextBid: minimum_next_bid {\n        amount\n        cents\n        display\n      }\n    }\n  `,\n})\n"],"file":"LotInfo.js"}