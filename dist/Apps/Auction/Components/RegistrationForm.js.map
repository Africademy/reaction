{"version":3,"sources":["../../../../src/Apps/Auction/Components/RegistrationForm.tsx"],"names":["StyledCardElement","CardElement","InnerForm","props","touched","errors","isSubmitting","values","setFieldValue","setFieldTouched","message","creditCard","address","_key","agreeToTerms","value","type","Yup","addMethod","string","test","trim","required","isValid","validationSchema","object","shape","name","present","addressLine1","country","city","region","postalCode","phoneNumber","bool","oneOf","OnSubmitValidationError","cb","formikProps","effect","submitCount","clonedErrors","Object","assign","addressErrors","setSubmitting","React","useEffect","RegistrationForm","initialValues","addressLine2","undefined","createTokenAndSubmit","actions","address_line1","address_line2","address_country","address_city","address_state","address_zip","setFieldError","stripe","createToken","then","error","token","result","onSubmit","trackSubmissionErrors","status","setStatus","StripeInjectedRegistrationForm","StripeWrappedRegistrationForm","setStripe","setupStripe","window","Stripe","sd","STRIPE_PUBLISHABLE_KEY","document","querySelector","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { Box, Button, Flex, Sans, Serif } from \"@artsy/palette\"\nimport { Address, AddressForm } from \"Apps/Order/Components/AddressForm\"\nimport { CreditCardInput } from \"Apps/Order/Components/CreditCardInput\"\nimport { ConditionsOfSaleCheckbox } from \"Components/Auction/ConditionsOfSaleCheckbox\"\nimport { ErrorModal } from \"Components/Modal/ErrorModal\"\nimport { Form, Formik, FormikActions, FormikProps } from \"formik\"\nimport React, { useEffect, useState } from \"react\"\nimport {\n  CardElement,\n  Elements,\n  injectStripe,\n  ReactStripeElements,\n  StripeProvider,\n} from \"react-stripe-elements\"\nimport { data as sd } from \"sharify\"\nimport styled from \"styled-components\"\nimport * as Yup from \"yup\"\n\nexport const StyledCardElement = styled(CardElement)`\n  width: 100%;\n  padding: 9px 10px;\n`\n\nexport interface FormResult {\n  token: stripe.Token\n  phoneNumber: string\n}\n\nexport interface FormValues {\n  address: Address\n  creditCard: string\n  agreeToTerms: boolean\n}\n\nconst InnerForm: React.FC<FormikProps<FormValues>> = props => {\n  const {\n    touched,\n    errors,\n    isSubmitting,\n    values,\n    setFieldValue,\n    setFieldTouched,\n  } = props\n\n  return (\n    <Form>\n      <Box mt={4}>\n        <Box mb={2}>\n          <Serif size=\"3t\" mb={0.5}>\n            Credit card\n          </Serif>\n          <CreditCardInput\n            error={{ message: errors.creditCard } as stripe.Error}\n          />\n        </Box>\n      </Box>\n      <Box mt={4}>\n        <Box mt={2}>\n          <AddressForm\n            value={values.address}\n            onChange={(address, _key) => {\n              setFieldValue(\"address\", address)\n            }}\n            errors={errors.address}\n            touched={touched.address}\n            billing\n            showPhoneNumberInput\n          />\n        </Box>\n      </Box>\n\n      <Flex mt={4} mb={2} flexDirection=\"column\" justifyContent=\"center\">\n        <Box mx=\"auto\">\n          <ConditionsOfSaleCheckbox\n            selected={values.agreeToTerms}\n            onSelect={value => {\n              setFieldValue(\"agreeToTerms\", value)\n              setFieldTouched(\"agreeToTerms\")\n            }}\n          />\n        </Box>\n\n        {touched.agreeToTerms && errors.agreeToTerms && (\n          <Sans mt={1} color=\"red100\" size=\"2\" textAlign=\"center\">\n            {errors.agreeToTerms}\n          </Sans>\n        )}\n      </Flex>\n\n      <Button\n        mt={1}\n        size=\"large\"\n        width=\"100%\"\n        loading={isSubmitting}\n        {...{ type: \"submit\" } as any}\n      >\n        Register\n      </Button>\n    </Form>\n  )\n}\n\nYup.addMethod(Yup.string, \"present\", function(message) {\n  return this.test(\"test-present\", message, value => {\n    return this.trim()\n      .required(message)\n      .isValid(value)\n  })\n})\n\nconst validationSchema = Yup.object().shape({\n  address: Yup.object({\n    name: Yup.string().present(\"Name is required\"),\n    addressLine1: Yup.string().present(\"Address is required\"),\n    country: Yup.string().present(\"Country is required\"),\n    city: Yup.string().present(\"City is required\"),\n    region: Yup.string().present(\"State is required\"),\n    postalCode: Yup.string().present(\"Postal code is required\"),\n    phoneNumber: Yup.string().present(\"Telephone is required\"),\n  }),\n  agreeToTerms: Yup.bool().oneOf(\n    [true],\n    \"You must agree to the Conditions of Sale\"\n  ),\n})\n\ntype TrackErrors = (errors: string[]) => void\n\n/*\n  This component exists only to capture formik's renderProps and track form\n  submission events. It essentially says:\n  - IF the form has been submitted at least once\n  - AND the form is not submitting at this moment\n  - AND the form is invalid\n  - AND (in useEffect dependencies array) the form submitting state just\n    changed (because it is false, it must have been true above)\n  - THEN run the callback prop.\n  Background:\n    https://github.com/jaredpalmer/formik/issues/1484#issuecomment-490558973\n */\nconst OnSubmitValidationError: React.FC<{\n  cb: TrackErrors\n  formikProps: FormikProps<FormValues>\n}> = props => {\n  const { cb, formikProps } = props\n\n  const effect = () => {\n    if (\n      formikProps.submitCount > 0 &&\n      !formikProps.isSubmitting &&\n      !formikProps.isValid\n    ) {\n      const clonedErrors = Object.assign({}, formikProps.errors)\n      const addressErrors = clonedErrors.address\n      delete clonedErrors.address\n\n      const errors = Object.assign({}, clonedErrors, addressErrors)\n\n      cb(Object.values(errors))\n      formikProps.setSubmitting(false)\n    }\n  }\n  React.useEffect(effect, [formikProps.submitCount, formikProps.isSubmitting])\n\n  return null\n}\n\nexport interface RegistrationFormProps\n  extends ReactStripeElements.InjectedStripeProps {\n  onSubmit: (formikActions: FormikActions<object>, result: FormResult) => void\n  trackSubmissionErrors: TrackErrors\n}\n\nexport const RegistrationForm: React.FC<RegistrationFormProps> = props => {\n  const initialValues: FormValues = {\n    address: {\n      name: \"\",\n      addressLine1: \"\",\n      addressLine2: \"\",\n      country: \"US\",\n      city: \"\",\n      region: \"\",\n      postalCode: \"\",\n      phoneNumber: \"\",\n    },\n    creditCard: undefined,\n    agreeToTerms: false,\n  }\n\n  function createTokenAndSubmit(\n    values: FormValues,\n    actions: FormikActions<object>\n  ) {\n    const address = {\n      name: values.address.name,\n      address_line1: values.address.addressLine1,\n      address_line2: values.address.addressLine2,\n      address_country: values.address.country,\n      address_city: values.address.city,\n      address_state: values.address.region,\n      address_zip: values.address.postalCode,\n    }\n\n    const { setFieldError, setSubmitting } = actions\n    const { stripe } = props\n\n    stripe.createToken(address).then(({ error, token }) => {\n      if (error) {\n        setFieldError(\"creditCard\", error.message)\n        setSubmitting(false)\n      } else {\n        const result: FormResult = {\n          phoneNumber: values.address.phoneNumber,\n          token,\n        }\n\n        props.onSubmit(actions, result)\n      }\n    })\n  }\n\n  return (\n    <Box maxWidth={550}>\n      <Serif size=\"4\" color=\"black100\">\n        Please enter your credit card information below. The name on your Artsy\n        account must match the name on the card, and a valid credit card is\n        required in order to bid.\n      </Serif>\n      <Serif size=\"4\" mt={2} color=\"black100\">\n        Registration is free. Artsy will never charge this card without your\n        permission, and you are not required to use this card to pay if you win.\n      </Serif>\n      <Box mt={2}>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={createTokenAndSubmit}\n          validationSchema={validationSchema}\n          render={(formikProps: FormikProps<FormValues>) => (\n            <>\n              <OnSubmitValidationError\n                cb={props.trackSubmissionErrors}\n                formikProps={formikProps}\n              />\n              <InnerForm {...formikProps} />\n              <ErrorModal\n                show={formikProps.status === \"submissionFailed\"}\n                onClose={() => {\n                  formikProps.setStatus(null)\n                }}\n              />\n            </>\n          )}\n        />\n      </Box>\n    </Box>\n  )\n}\n\nconst StripeInjectedRegistrationForm = injectStripe(RegistrationForm)\n\nexport const StripeWrappedRegistrationForm: React.FC<\n  RegistrationFormProps\n> = props => {\n  const [stripe, setStripe] = useState(null)\n\n  function setupStripe() {\n    setStripe(window.Stripe(sd.STRIPE_PUBLISHABLE_KEY))\n  }\n\n  useEffect(() => {\n    if (window.Stripe) {\n      setStripe(window.Stripe(sd.STRIPE_PUBLISHABLE_KEY))\n    } else {\n      document.querySelector(\"#stripe-js\").addEventListener(\"load\", setupStripe)\n\n      return () => {\n        document\n          .querySelector(\"#stripe-js\")\n          .removeEventListener(\"load\", setupStripe)\n      }\n    }\n  }, [])\n\n  return (\n    <StripeProvider stripe={stripe}>\n      <Elements>\n        <StripeInjectedRegistrationForm {...props} />\n      </Elements>\n    </StripeProvider>\n  )\n}\n"],"file":"RegistrationForm.js"}