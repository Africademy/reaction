{"version":3,"sources":["../../../../../src/Apps/Auction/Routes/ConfirmBid/index.tsx"],"names":["logger","MAX_POLL_ATTEMPTS","ConfirmBidRoute","props","pollCount","artwork","me","relay","stripe","saleArtwork","sale","environment","trackEvent","registrationStatus","requiresPaymentInformation","createBidderPosition","maxBidAmountCents","Promise","resolve","reject","onCompleted","data","onError","error","mutation","variables","input","sale_id","id","artwork_id","max_bid_amount_cents","onJsError","actions","bidderId","trackConfirmBidFailed","message","setSubmitting","setStatus","errors","action_type","Schema","ActionType","ConfirmBidFailed","bidder_id","error_messages","trackConfirmBidSuccess","positionId","selectedBidAmountCents","ConfirmBidSubmitted","bidder_position_id","order_id","products","product_id","_id","quantity","price","createTokenFromAddress","address","createToken","token","Error","decline_code","handleSubmit","values","selectedBid","Number","possibleExistingBidderId","stripeAddress","name","address_line1","addressLine1","address_line2","addressLine2","address_country","country","address_city","city","address_state","region","address_zip","postalCode","phoneNumber","then","verifyBidderPosition","catch","result","position","messageHeader","sale_artwork","status","bidderPositionID","res","checkBidderPosition","bidderPosition","setTimeout","window","location","assign","sd","APP_URL","getInitialSelectedBid","qs","querystring","parse","search","slice","bid","undefined","StripeInjectedConfirmBidRoute","StripeWrappedConfirmBidRoute","setStripe","setupStripe","Stripe","STRIPE_PUBLISHABLE_KEY","document","querySelector","addEventListener","removeEventListener","TrackingWrappedConfirmBidRoute","Component","p","context_page","PageName","AuctionConfirmBidPage","auction_slug","artwork_slug","user_id","ConfirmBidRouteFragmentContainer"],"mappings":"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","sourcesContent":["import { Box, Separator, Serif } from \"@artsy/palette\"\nimport { BidderPositionQueryResponse } from \"__generated__/BidderPositionQuery.graphql\"\nimport { ConfirmBid_me } from \"__generated__/ConfirmBid_me.graphql\"\nimport {\n  ConfirmBidCreateBidderPositionMutation,\n  ConfirmBidCreateBidderPositionMutationResponse,\n} from \"__generated__/ConfirmBidCreateBidderPositionMutation.graphql\"\nimport { routes_ConfirmBidQueryResponse } from \"__generated__/routes_ConfirmBidQuery.graphql\"\nimport {\n  BidFormFragmentContainer as BidForm,\n  determineDisplayRequirements,\n  FormValues,\n} from \"Apps/Auction/Components/BidForm\"\nimport { LotInfoFragmentContainer as LotInfo } from \"Apps/Auction/Components/LotInfo\"\nimport { bidderPositionQuery } from \"Apps/Auction/Routes/ConfirmBid/BidderPositionQuery\"\nimport { createCreditCardAndUpdatePhone } from \"Apps/Auction/Routes/Register\"\nimport { AppContainer } from \"Apps/Components/AppContainer\"\nimport { trackPageViewWrapper } from \"Apps/Order/Utils/trackPageViewWrapper\"\nimport { track } from \"Artsy\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { useTracking } from \"Artsy/Analytics/useTracking\"\nimport { FormikActions } from \"formik\"\nimport qs from \"qs\"\nimport React, { useEffect, useState } from \"react\"\nimport { Title } from \"react-head\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport {\n  Elements,\n  injectStripe,\n  ReactStripeElements,\n  StripeProvider,\n} from \"react-stripe-elements\"\nimport { data as sd } from \"sharify\"\nimport { get } from \"Utils/get\"\nimport createLogger from \"Utils/logger\"\n\nconst logger = createLogger(\"Apps/Auction/Routes/ConfirmBid\")\n\ntype BidFormActions = FormikActions<FormValues>\n\ninterface ConfirmBidProps extends ReactStripeElements.InjectedStripeProps {\n  artwork: routes_ConfirmBidQueryResponse[\"artwork\"]\n  me: ConfirmBid_me\n  relay: RelayProp\n  location: Location\n}\n\nconst MAX_POLL_ATTEMPTS = 20\n\nexport const ConfirmBidRoute: React.FC<ConfirmBidProps> = props => {\n  let pollCount = 0\n\n  const { artwork, me, relay, stripe } = props\n  const { saleArtwork } = artwork\n  const { sale } = saleArtwork\n  const { environment } = relay\n  const { trackEvent } = useTracking()\n  const { requiresPaymentInformation } = determineDisplayRequirements(\n    (sale as any).registrationStatus,\n    me as any\n  )\n\n  function createBidderPosition(maxBidAmountCents: number) {\n    return new Promise<ConfirmBidCreateBidderPositionMutationResponse>(\n      (resolve, reject) => {\n        commitMutation<ConfirmBidCreateBidderPositionMutation>(environment, {\n          onCompleted: data => resolve(data),\n          onError: error => reject(error),\n          mutation: graphql`\n            mutation ConfirmBidCreateBidderPositionMutation(\n              $input: BidderPositionInput!\n            ) {\n              createBidderPosition(input: $input) {\n                result {\n                  position {\n                    id\n                    sale_artwork {\n                      sale {\n                        registrationStatus {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  status\n                  messageHeader: message_header\n                }\n              }\n            }\n          `,\n          variables: {\n            input: {\n              sale_id: sale.id,\n              artwork_id: artwork.id,\n              max_bid_amount_cents: maxBidAmountCents,\n            },\n          },\n        })\n      }\n    )\n  }\n\n  function onJsError(actions: BidFormActions, error: Error, bidderId: string) {\n    logger.error(error)\n    trackConfirmBidFailed(bidderId, [`JavaScript error: ${error.message}`])\n    actions.setSubmitting(false)\n    actions.setStatus(\n      \"Something went wrong while processing your bid. Please make sure your internet connection is active and try again\"\n    )\n  }\n\n  function trackConfirmBidFailed(bidderId: string, errors: string[]) {\n    trackEvent({\n      action_type: Schema.ActionType.ConfirmBidFailed,\n      bidder_id: bidderId,\n      error_messages: errors,\n    })\n  }\n\n  function trackConfirmBidSuccess(\n    positionId: string,\n    bidderId: string,\n    selectedBidAmountCents: number\n  ) {\n    trackEvent({\n      action_type: Schema.ActionType.ConfirmBidSubmitted,\n      bidder_position_id: positionId,\n      bidder_id: bidderId,\n      order_id: bidderId,\n      products: [\n        {\n          product_id: artwork._id,\n          quantity: 1,\n          price: selectedBidAmountCents / 100,\n        },\n      ],\n    })\n  }\n\n  const createTokenFromAddress = async (address: stripe.TokenOptions) => {\n    const { error, token } = await stripe.createToken(address)\n\n    if (error) {\n      throw new Error(`Stripe error: ${error.message || error.decline_code}`)\n    } else {\n      return token\n    }\n  }\n\n  async function handleSubmit(values: FormValues, actions: BidFormActions) {\n    const selectedBid = Number(values.selectedBid)\n    const possibleExistingBidderId: string | null =\n      sale.registrationStatus && sale.registrationStatus.id\n\n    if (requiresPaymentInformation) {\n      try {\n        const { address } = values\n        const stripeAddress = {\n          name: address.name,\n          address_line1: address.addressLine1,\n          address_line2: address.addressLine2,\n          address_country: address.country,\n          address_city: address.city,\n          address_state: address.region,\n          address_zip: address.postalCode,\n        }\n\n        const token = await createTokenFromAddress(stripeAddress)\n        await createCreditCardAndUpdatePhone(\n          environment,\n          address.phoneNumber,\n          token.id\n        )\n      } catch (error) {\n        onJsError(actions, error, possibleExistingBidderId)\n        return\n      }\n    }\n\n    createBidderPosition(selectedBid)\n      .then(data =>\n        verifyBidderPosition({\n          actions,\n          data,\n          selectedBid,\n          possibleExistingBidderId,\n        })\n      )\n      .catch(error => onJsError(actions, error, possibleExistingBidderId))\n  }\n\n  function verifyBidderPosition({\n    actions,\n    data,\n    possibleExistingBidderId,\n    selectedBid,\n  }: {\n    actions: BidFormActions\n    data: ConfirmBidCreateBidderPositionMutationResponse\n    possibleExistingBidderId: string\n    selectedBid: number\n  }) {\n    const { result } = data.createBidderPosition\n    const { position, messageHeader } = result\n    const bidderId =\n      possibleExistingBidderId ||\n      (position &&\n        position.sale_artwork &&\n        position.sale_artwork.sale &&\n        position.sale_artwork.sale.registrationStatus.id)\n\n    if (result.status === \"SUCCESS\") {\n      bidderPositionQuery(environment, { bidderPositionID: position.id })\n        .then(res =>\n          checkBidderPosition({ actions, data: res, bidderId, selectedBid })\n        )\n        .catch(error => onJsError(actions, error, bidderId))\n    } else {\n      actions.setStatus(messageHeader)\n      actions.setSubmitting(false)\n      trackConfirmBidFailed(bidderId, [messageHeader])\n    }\n  }\n\n  function checkBidderPosition({\n    actions,\n    data,\n    bidderId,\n    selectedBid,\n  }: {\n    actions: BidFormActions\n    data: BidderPositionQueryResponse\n    bidderId: string\n    selectedBid: number\n  }) {\n    const { bidderPosition } = data.me\n    const { status, position, messageHeader } = bidderPosition\n\n    if (status === \"PENDING\" && pollCount < MAX_POLL_ATTEMPTS) {\n      // initiating new request here (vs setInterval) to make sure we wait for\n      // the previous call to return before making a new one\n      setTimeout(\n        () =>\n          bidderPositionQuery(environment, { bidderPositionID: position.id })\n            .then(res =>\n              checkBidderPosition({ actions, data: res, bidderId, selectedBid })\n            )\n            .catch(error => onJsError(actions, error, bidderId)),\n        1000\n      )\n\n      pollCount += 1\n    } else if (status === \"WINNING\") {\n      trackConfirmBidSuccess(position.id, bidderId, selectedBid)\n      window.location.assign(`${sd.APP_URL}/artwork/${artwork.id}`)\n    } else {\n      actions.setStatus(messageHeader)\n      actions.setSubmitting(false)\n      trackConfirmBidFailed(bidderId, [messageHeader])\n    }\n  }\n\n  return (\n    <AppContainer>\n      <Title>Confirm Bid | Artsy</Title>\n\n      <Box maxWidth={550} px={[2, 0]} mx=\"auto\" mt={[1, 0]} mb={[1, 100]}>\n        <Serif size=\"8\">Confirm your bid</Serif>\n\n        <Separator />\n\n        <LotInfo artwork={artwork} saleArtwork={artwork.saleArtwork} />\n\n        <Separator />\n\n        <BidForm\n          initialSelectedBid={getInitialSelectedBid(props.location)}\n          showPricingTransparency={false}\n          saleArtwork={saleArtwork}\n          onSubmit={handleSubmit}\n          me={me as any}\n        />\n      </Box>\n    </AppContainer>\n  )\n}\n\nconst getInitialSelectedBid = (location: Location): string | undefined => {\n  return get(\n    qs,\n    querystring => querystring.parse(location.search.slice(1)).bid,\n    undefined\n  )\n}\n\nconst StripeInjectedConfirmBidRoute = injectStripe(ConfirmBidRoute)\n\nexport const StripeWrappedConfirmBidRoute: React.FC<\n  ConfirmBidProps\n> = props => {\n  const [stripe, setStripe] = useState(null)\n\n  function setupStripe() {\n    setStripe(window.Stripe(sd.STRIPE_PUBLISHABLE_KEY))\n  }\n\n  useEffect(() => {\n    if (window.Stripe) {\n      setStripe(window.Stripe(sd.STRIPE_PUBLISHABLE_KEY))\n    } else {\n      document.querySelector(\"#stripe-js\").addEventListener(\"load\", setupStripe)\n\n      return () => {\n        document\n          .querySelector(\"#stripe-js\")\n          .removeEventListener(\"load\", setupStripe)\n      }\n    }\n  }, [])\n\n  return (\n    <StripeProvider stripe={stripe}>\n      <Elements>\n        <StripeInjectedConfirmBidRoute {...props} />\n      </Elements>\n    </StripeProvider>\n  )\n}\n\nconst TrackingWrappedConfirmBidRoute: React.FC<ConfirmBidProps> = props => {\n  const Component = track<ConfirmBidProps>(p => ({\n    context_page: Schema.PageName.AuctionConfirmBidPage,\n    auction_slug: p.artwork.saleArtwork.sale.id,\n    artwork_slug: p.artwork.id,\n    sale_id: p.artwork.saleArtwork.sale._id,\n    user_id: p.me.id,\n  }))(StripeWrappedConfirmBidRoute)\n\n  return <Component {...props} />\n}\n\nexport const ConfirmBidRouteFragmentContainer = createFragmentContainer(\n  trackPageViewWrapper(TrackingWrappedConfirmBidRoute),\n  {\n    me: graphql`\n      fragment ConfirmBid_me on Me {\n        id\n        hasQualifiedCreditCards: has_qualified_credit_cards\n        ...BidForm_me\n      }\n    `,\n  }\n)\n"],"file":"index.js"}