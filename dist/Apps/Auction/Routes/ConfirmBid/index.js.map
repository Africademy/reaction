{"version":3,"sources":["../../../../../src/Apps/Auction/Routes/ConfirmBid/index.tsx"],"names":["logger","ConfirmBidRoute","props","artwork","saleArtwork","sale","trackEvent","createBidderPosition","maxBidAmountCents","Promise","resolve","reject","relay","environment","onCompleted","data","onError","error","mutation","variables","input","sale_id","id","artwork_id","max_bid_amount_cents","handleMutationError","actions","bidderId","errorMessages","Array","isArray","map","e","message","trackConfirmBidFailed","setSubmitting","setStatus","errors","action_type","Schema","ActionType","ConfirmBidFailed","bidder_id","error_messages","trackConfirmBidSuccess","positionId","selectedBidAmountCents","ConfirmBidSubmitted","bidder_position_id","order_id","products","product_id","_id","quantity","price","handleSubmit","values","registrationStatus","Number","selectedBid","then","result","status","position","window","location","assign","sd","APP_URL","catch","finally","getInitialSelectedBid","qs","querystring","parse","search","slice","bid","undefined","TrackingWrappedConfirmBidRoute","Component","p","context_page","PageName","AuctionConfirmBidPage","auction_slug","artwork_slug","user_id","me","ConfirmBidRouteFragmentContainer"],"mappings":"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","sourcesContent":["import { Box, Separator, Serif } from \"@artsy/palette\"\nimport {\n  ConfirmBidCreateBidderPositionMutation,\n  ConfirmBidCreateBidderPositionMutationResponse,\n} from \"__generated__/ConfirmBidCreateBidderPositionMutation.graphql\"\nimport { routes_ConfirmBidQueryResponse } from \"__generated__/routes_ConfirmBidQuery.graphql\"\nimport { BidFormFragmentContainer as BidForm } from \"Apps/Auction/Components/BidForm\"\nimport { LotInfoFragmentContainer as LotInfo } from \"Apps/Auction/Components/LotInfo\"\nimport { AppContainer } from \"Apps/Components/AppContainer\"\nimport { trackPageViewWrapper } from \"Apps/Order/Utils/trackPageViewWrapper\"\nimport { track } from \"Artsy\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { useTracking } from \"Artsy/Analytics/useTracking\"\nimport { FormikActions } from \"formik\"\nimport qs from \"qs\"\nimport React from \"react\"\nimport { Title } from \"react-head\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport { data as sd } from \"sharify\"\nimport { get } from \"Utils/get\"\nimport createLogger from \"Utils/logger\"\n\nconst logger = createLogger(\"Apps/Auction/Routes/ConfirmBid\")\n\ninterface ConfirmBidProps {\n  artwork: routes_ConfirmBidQueryResponse[\"artwork\"]\n  me: routes_ConfirmBidQueryResponse[\"me\"]\n  relay: RelayProp\n  location: Location\n}\n\nexport const ConfirmBidRoute: React.FC<ConfirmBidProps> = props => {\n  const { artwork } = props\n  const { saleArtwork } = artwork\n  const { sale } = saleArtwork\n\n  const { trackEvent } = useTracking()\n\n  function createBidderPosition(maxBidAmountCents: number) {\n    return new Promise(async (resolve, reject) => {\n      commitMutation<ConfirmBidCreateBidderPositionMutation>(\n        props.relay.environment,\n        {\n          onCompleted: data => {\n            resolve(data)\n          },\n          onError: error => {\n            reject(error)\n          },\n          mutation: graphql`\n            mutation ConfirmBidCreateBidderPositionMutation(\n              $input: BidderPositionInput!\n            ) {\n              createBidderPosition(input: $input) {\n                result {\n                  position {\n                    id\n                  }\n                  status\n                  message_header\n                  message_description_md\n                }\n              }\n            }\n          `,\n          variables: {\n            input: {\n              sale_id: sale.id,\n              artwork_id: artwork.id,\n              max_bid_amount_cents: maxBidAmountCents,\n            },\n          },\n        }\n      )\n    })\n  }\n\n  function handleMutationError(\n    actions: FormikActions<object>,\n    error: Error,\n    bidderId: string\n  ) {\n    logger.error(error)\n\n    let errorMessages: string[]\n    if (Array.isArray(error)) {\n      errorMessages = error.map(e => e.message)\n    } else if (typeof error === \"string\") {\n      errorMessages = [error]\n    } else if (error.message) {\n      errorMessages = [error.message]\n    }\n\n    trackConfirmBidFailed(bidderId, errorMessages)\n\n    actions.setSubmitting(false)\n    actions.setStatus(\"submissionFailed\")\n  }\n\n  function trackConfirmBidFailed(bidderId: string, errors: string[]) {\n    trackEvent({\n      action_type: Schema.ActionType.ConfirmBidFailed,\n      bidder_id: bidderId,\n      error_messages: errors,\n    })\n  }\n\n  function trackConfirmBidSuccess(\n    positionId: string,\n    bidderId: string,\n    selectedBidAmountCents: number\n  ) {\n    trackEvent({\n      action_type: Schema.ActionType.ConfirmBidSubmitted,\n      bidder_position_id: positionId,\n      bidder_id: bidderId,\n      order_id: bidderId,\n      products: [\n        {\n          product_id: artwork._id,\n          quantity: 1,\n          price: selectedBidAmountCents / 100,\n        },\n      ],\n    })\n  }\n\n  function handleSubmit(\n    values: { selectedBid: number },\n    actions: FormikActions<object>\n  ) {\n    const bidderId = sale.registrationStatus.id\n\n    createBidderPosition(Number(values.selectedBid))\n      .then((data: ConfirmBidCreateBidderPositionMutationResponse) => {\n        if (data.createBidderPosition.result.status !== \"SUCCESS\") {\n          trackConfirmBidFailed(bidderId, [\n            \"ConfirmBidCreateBidderPositionMutation failed\",\n          ])\n        } else {\n          const positionId = data.createBidderPosition.result.position.id\n          trackConfirmBidSuccess(positionId, bidderId, values.selectedBid)\n          window.location.assign(\n            `${sd.APP_URL}/auction/${sale.id}/artwork/${artwork.id}`\n          )\n        }\n      })\n      .catch(error => {\n        handleMutationError(actions, error, bidderId)\n      })\n      .finally(() => {\n        actions.setSubmitting(false)\n      })\n  }\n\n  return (\n    <AppContainer>\n      <Title>Confirm Bid | Artsy</Title>\n      <Box maxWidth={550} px={[2, 0]} mx=\"auto\" mt={[1, 0]} mb={[1, 100]}>\n        <Serif size=\"8\">Confirm your bid</Serif>\n        <Serif size=\"8\">\n          This is a release of reaction off of `auct-pt-master`.\n        </Serif>\n        <Separator />\n        <LotInfo artwork={artwork} saleArtwork={artwork.saleArtwork} />\n        <Separator />\n        <BidForm\n          initialSelectedBid={getInitialSelectedBid(props.location)}\n          showPricingTransparency={false}\n          saleArtwork={saleArtwork}\n          onSubmit={handleSubmit}\n        />\n      </Box>\n    </AppContainer>\n  )\n}\n\nconst getInitialSelectedBid = (location: Location): string | undefined => {\n  return get(\n    qs,\n    querystring => querystring.parse(location.search.slice(1)).bid,\n    undefined\n  )\n}\n\nconst TrackingWrappedConfirmBidRoute: React.FC<ConfirmBidProps> = props => {\n  const Component = track<ConfirmBidProps>(p => ({\n    context_page: Schema.PageName.AuctionConfirmBidPage,\n    auction_slug: p.artwork.saleArtwork.sale.id,\n    artwork_slug: p.artwork.id,\n    sale_id: p.artwork.saleArtwork.sale._id,\n    user_id: p.me.id,\n  }))(ConfirmBidRoute)\n\n  return <Component {...props} />\n}\n\nexport const ConfirmBidRouteFragmentContainer = createFragmentContainer(\n  trackPageViewWrapper(TrackingWrappedConfirmBidRoute),\n  {}\n)\n"],"file":"index.js"}