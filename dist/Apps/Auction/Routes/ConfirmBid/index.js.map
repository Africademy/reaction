{"version":3,"sources":["../../../../../src/Apps/Auction/Routes/ConfirmBid/index.tsx"],"names":["logger","MAX_POLL_ATTEMPTS","ConfirmBidRoute","props","pollCount","artwork","me","relay","saleArtwork","sale","trackEvent","createBidderPosition","maxBidAmountCents","Promise","resolve","reject","environment","onCompleted","data","onError","error","mutation","variables","input","sale_id","id","artwork_id","max_bid_amount_cents","handleMutationError","actions","bidderId","errorMessages","Array","isArray","map","e","message","trackConfirmBidFailed","setSubmitting","setStatus","errors","action_type","Schema","ActionType","ConfirmBidFailed","bidder_id","error_messages","trackConfirmBidSuccess","positionId","selectedBidAmountCents","ConfirmBidSubmitted","bidder_position_id","order_id","products","product_id","_id","quantity","price","handleSubmit","values","selectedBid","Number","possibleExistingBidderId","registrationStatus","then","result","status","bidderIdFromMutation","position","sale_artwork","verifyBidderPosition","catch","bidderPositionID","response","checkBidderPosition","console","bidderPosition","setTimeout","window","location","assign","sd","APP_URL","getInitialSelectedBid","qs","querystring","parse","search","slice","bid","undefined","TrackingWrappedConfirmBidRoute","Component","p","context_page","PageName","AuctionConfirmBidPage","auction_slug","artwork_slug","user_id","ConfirmBidRouteFragmentContainer"],"mappings":"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","sourcesContent":["import { Box, Separator, Serif } from \"@artsy/palette\"\nimport { BidderPositionQueryResponse } from \"__generated__/BidderPositionQuery.graphql\"\nimport {\n  ConfirmBidCreateBidderPositionMutation,\n  ConfirmBidCreateBidderPositionMutationResponse,\n} from \"__generated__/ConfirmBidCreateBidderPositionMutation.graphql\"\nimport { routes_ConfirmBidQueryResponse } from \"__generated__/routes_ConfirmBidQuery.graphql\"\nimport { BidFormFragmentContainer as BidForm } from \"Apps/Auction/Components/BidForm\"\nimport { LotInfoFragmentContainer as LotInfo } from \"Apps/Auction/Components/LotInfo\"\nimport { AppContainer } from \"Apps/Components/AppContainer\"\nimport { trackPageViewWrapper } from \"Apps/Order/Utils/trackPageViewWrapper\"\nimport { track } from \"Artsy\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { useTracking } from \"Artsy/Analytics/useTracking\"\nimport { FormikActions } from \"formik\"\nimport qs from \"qs\"\nimport React from \"react\"\nimport { Title } from \"react-head\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport { data as sd } from \"sharify\"\nimport { get } from \"Utils/get\"\nimport createLogger from \"Utils/logger\"\n\nimport { bidderPositionQuery } from \"Apps/Auction/Routes/ConfirmBid/BidderPositionQuery\"\n\nconst logger = createLogger(\"Apps/Auction/Routes/ConfirmBid\")\n\ninterface ConfirmBidProps {\n  artwork: routes_ConfirmBidQueryResponse[\"artwork\"]\n  me: routes_ConfirmBidQueryResponse[\"me\"]\n  relay: RelayProp\n  location: Location\n}\n\nconst MAX_POLL_ATTEMPTS = 20\n\nexport const ConfirmBidRoute: React.FC<ConfirmBidProps> = props => {\n  let pollCount = 0\n\n  const { artwork, me, relay } = props\n  const { saleArtwork } = artwork\n  const { sale } = saleArtwork\n\n  const { trackEvent } = useTracking()\n\n  function createBidderPosition(maxBidAmountCents: number) {\n    return new Promise(async (resolve, reject) => {\n      commitMutation<ConfirmBidCreateBidderPositionMutation>(\n        relay.environment,\n        {\n          onCompleted: data => {\n            resolve(data)\n          },\n          onError: error => {\n            reject(error)\n          },\n          mutation: graphql`\n            mutation ConfirmBidCreateBidderPositionMutation(\n              $input: BidderPositionInput!\n            ) {\n              createBidderPosition(input: $input) {\n                result {\n                  position {\n                    id\n                    sale_artwork {\n                      sale {\n                        registrationStatus {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  status\n                  message_header\n                  message_description_md\n                }\n              }\n            }\n          `,\n          variables: {\n            input: {\n              sale_id: sale.id,\n              artwork_id: artwork.id,\n              max_bid_amount_cents: maxBidAmountCents,\n            },\n          },\n        }\n      )\n    })\n  }\n\n  function handleMutationError(\n    actions: FormikActions<object>,\n    error: Error,\n    bidderId: string\n  ) {\n    logger.error(error)\n\n    let errorMessages: string[]\n    if (Array.isArray(error)) {\n      errorMessages = error.map(e => e.message)\n    } else if (typeof error === \"string\") {\n      errorMessages = [error]\n    } else if (error.message) {\n      errorMessages = [error.message]\n    }\n\n    trackConfirmBidFailed(bidderId, errorMessages)\n\n    actions.setSubmitting(false)\n    actions.setStatus(\"submissionFailed\")\n  }\n\n  function trackConfirmBidFailed(bidderId: string, errors: string[]) {\n    trackEvent({\n      action_type: Schema.ActionType.ConfirmBidFailed,\n      bidder_id: bidderId,\n      error_messages: errors,\n    })\n  }\n\n  function trackConfirmBidSuccess(\n    positionId: string,\n    bidderId: string,\n    selectedBidAmountCents: number\n  ) {\n    trackEvent({\n      action_type: Schema.ActionType.ConfirmBidSubmitted,\n      bidder_position_id: positionId,\n      bidder_id: bidderId,\n      order_id: bidderId,\n      products: [\n        {\n          product_id: artwork._id,\n          quantity: 1,\n          price: selectedBidAmountCents / 100,\n        },\n      ],\n    })\n  }\n\n  function handleSubmit(\n    values: { selectedBid: number },\n    actions: FormikActions<object>\n  ) {\n    const selectedBid = Number(values.selectedBid)\n    const possibleExistingBidderId: string | null = sale.registrationStatus\n      ? sale.registrationStatus.id\n      : null\n\n    createBidderPosition(selectedBid)\n      .then((data: ConfirmBidCreateBidderPositionMutationResponse) => {\n        if (data.createBidderPosition.result.status !== \"SUCCESS\") {\n          trackConfirmBidFailed(possibleExistingBidderId, [\n            \"ConfirmBidCreateBidderPositionMutation failed\",\n          ])\n        } else {\n          const bidderIdFromMutation =\n            data.createBidderPosition.result.position.sale_artwork.sale\n              .registrationStatus.id\n          verifyBidderPosition({\n            data,\n            bidderId: bidderIdFromMutation,\n            selectedBid,\n          })\n        }\n      })\n      .catch(error => {\n        handleMutationError(actions, error, possibleExistingBidderId)\n        actions.setSubmitting(false)\n      })\n  }\n\n  function verifyBidderPosition({\n    data,\n    bidderId,\n    selectedBid,\n  }: {\n    data: ConfirmBidCreateBidderPositionMutationResponse\n    bidderId: string\n    selectedBid: number\n  }) {\n    const { result } = data.createBidderPosition\n    const { position } = result\n\n    if (result.status === \"SUCCESS\") {\n      bidderPositionQuery(relay.environment, { bidderPositionID: position.id })\n        .then(response =>\n          checkBidderPosition({ data: response, bidderId, selectedBid })\n        )\n        .catch(error => console.error(error)) // TODO: Implement error handling. story: AUCT-713\n    } else {\n      // TODO: Implement error handling. story: AUCT-713\n      console.error(\"Bid result was not SUCCESS:\", data)\n    }\n  }\n\n  function checkBidderPosition({\n    data,\n    bidderId,\n    selectedBid,\n  }: {\n    data: BidderPositionQueryResponse\n    bidderId: string\n    selectedBid: number\n  }) {\n    const { bidderPosition } = data.me\n\n    if (bidderPosition.status === \"PENDING\" && pollCount < MAX_POLL_ATTEMPTS) {\n      // initiating new request here (vs setInterval) to make sure we wait for\n      // the previous call to return before making a new one\n      setTimeout(\n        () =>\n          bidderPositionQuery(relay.environment, {\n            bidderPositionID: bidderPosition.position.id,\n          })\n            .then(response =>\n              checkBidderPosition({ data: response, bidderId, selectedBid })\n            )\n            .catch(error => console.error(error)), // TODO: Implement error handling. story: AUCT-713\n        1000\n      )\n\n      pollCount += 1\n    } else if (bidderPosition.status === \"WINNING\") {\n      const positionId = data.me.bidderPosition.position.id\n      trackConfirmBidSuccess(positionId, bidderId, selectedBid)\n\n      window.location.assign(`${sd.APP_URL}/artwork/${artwork.id}`)\n    } else {\n      // TODO: Implement error handling. story: AUCT-713\n    }\n  }\n\n  return (\n    <AppContainer>\n      <Title>Confirm Bid | Artsy</Title>\n\n      <Box maxWidth={550} px={[2, 0]} mx=\"auto\" mt={[1, 0]} mb={[1, 100]}>\n        <Serif size=\"8\">Confirm your bid</Serif>\n\n        <Separator />\n\n        <LotInfo artwork={artwork} saleArtwork={artwork.saleArtwork} />\n\n        <Separator />\n\n        <BidForm\n          initialSelectedBid={getInitialSelectedBid(props.location)}\n          showPricingTransparency={false}\n          saleArtwork={saleArtwork}\n          onSubmit={handleSubmit}\n          me={me}\n        />\n      </Box>\n    </AppContainer>\n  )\n}\n\nconst getInitialSelectedBid = (location: Location): string | undefined => {\n  return get(\n    qs,\n    querystring => querystring.parse(location.search.slice(1)).bid,\n    undefined\n  )\n}\n\nconst TrackingWrappedConfirmBidRoute: React.FC<ConfirmBidProps> = props => {\n  const Component = track<ConfirmBidProps>(p => ({\n    context_page: Schema.PageName.AuctionConfirmBidPage,\n    auction_slug: p.artwork.saleArtwork.sale.id,\n    artwork_slug: p.artwork.id,\n    sale_id: p.artwork.saleArtwork.sale._id,\n    user_id: p.me.id,\n  }))(ConfirmBidRoute)\n\n  return <Component {...props} />\n}\n\nexport const ConfirmBidRouteFragmentContainer = createFragmentContainer(\n  trackPageViewWrapper(TrackingWrappedConfirmBidRoute),\n  {}\n)\n"],"file":"index.js"}