{"version":3,"sources":["../../../../../src/Apps/Auction/Routes/Register/index.tsx"],"names":["logger","RegisterRoute","props","me","relay","sale","tracking","commonProperties","auction_slug","id","auction_state","status","sale_id","_id","user_id","trackRegistrationFailed","errors","trackEvent","action_type","Schema","ActionType","RegistrationSubmitFailed","error_messages","trackRegistrationSuccess","bidderId","RegistrationSubmitted","bidder_id","createBidder","Promise","resolve","reject","environment","onCompleted","data","onError","error","mutation","variables","input","createCreditCardAndUpdatePhone","phone","token","creditCardOrError","createCreditCard","creditCardEdge","mutationError","creditCardInput","profileInput","handleMutationError","actions","errorMessages","Array","isArray","map","e","message","setSubmitting","setStatus","handleSubmit","result","phoneNumber","then","bidder","window","location","assign","sd","APP_URL","catch","TrackingWrappedRegisterRoute","Component","context_page","PageName","AuctionRegistrationPage","RegisterRouteFragmentContainer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA;;AAIA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAOA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAG,qBAAa,8BAAb,CAAf;;AASO,IAAMC,aAAsC,GAAG,SAAzCA,aAAyC,CAAAC,KAAK,EAAI;AAAA,MACrDC,EADqD,GACvBD,KADuB,CACrDC,EADqD;AAAA,MACjDC,KADiD,GACvBF,KADuB,CACjDE,KADiD;AAAA,MAC1CC,IAD0C,GACvBH,KADuB,CAC1CG,IAD0C;AAAA,MACpCC,QADoC,GACvBJ,KADuB,CACpCI,QADoC;AAG7D,MAAMC,gBAAgB,GAAG;AACvBC,IAAAA,YAAY,EAAEH,IAAI,CAACI,EADI;AAEvBC,IAAAA,aAAa,EAAEL,IAAI,CAACM,MAFG;AAGvBC,IAAAA,OAAO,EAAEP,IAAI,CAACQ,GAHS;AAIvBC,IAAAA,OAAO,EAAEX,EAAE,CAACM;AAJW,GAAzB;;AAOA,WAASM,uBAAT,CAAiCC,MAAjC,EAAmD;AACjDV,IAAAA,QAAQ,CAACW,UAAT;AACEC,MAAAA,WAAW,EAAEC,MAAM,CAACC,UAAP,CAAkBC,wBADjC;AAEEC,MAAAA,cAAc,EAAEN;AAFlB,OAGKT,gBAHL;AAKD;;AAED,WAASgB,wBAAT,CAAkCC,QAAlC,EAAoD;AAClDlB,IAAAA,QAAQ,CAACW,UAAT;AACEC,MAAAA,WAAW,EAAEC,MAAM,CAACC,UAAP,CAAkBK,qBADjC;AAEEC,MAAAA,SAAS,EAAEF;AAFb,OAGKjB,gBAHL;AAKD;;AAED,WAASoB,YAAT,GAAwB;AACtB,WAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AACjB,gDAA6C1B,KAAK,CAAC2B,WAAnD,EAAgE;AAC9DC,kBAAAA,WAAW,EAAE,qBAAAC,IAAI,EAAI;AACnBJ,oBAAAA,OAAO,CAACI,IAAD,CAAP;AACD,mBAH6D;AAI9DC,kBAAAA,OAAO,EAAE,iBAAAC,KAAK,EAAI;AAChBL,oBAAAA,MAAM,CAACK,KAAD,CAAN;AACD,mBAN6D;AAO9DC,kBAAAA,QAAQ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAPsD;AAgB9DC,kBAAAA,SAAS,EAAE;AACTC,oBAAAA,KAAK,EAAE;AAAE1B,sBAAAA,OAAO,EAAEP,IAAI,CAACI;AAAhB;AADE;AAhBmD,iBAAhE;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAZ;;AAAA;AAAA;AAAA;AAAA,QAAP;AAsBD;;AAED,WAAS8B,8BAAT,CAAwCC,KAAxC,EAA+CC,KAA/C,EAAsD;AACpD,WAAO,IAAIb,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AACjB,gDACE1B,KAAK,CAAC2B,WADR,EAEE;AACEC,kBAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOjB,MAAP,EAAkB;AAAA,wBAEP0B,iBAFO,GAGzBT,IAHyB,CAE3BU,gBAF2B,CAEPD,iBAFO;;AAK7B,wBAAIA,iBAAiB,CAACE,cAAtB,EAAsC;AACpCf,sBAAAA,OAAO;AACR,qBAFD,MAEO;AACL,0BAAIb,MAAJ,EAAY;AACVc,wBAAAA,MAAM,CAACd,MAAD,CAAN;AACD,uBAFD,MAEO;AACLc,wBAAAA,MAAM,CAACY,iBAAiB,CAACG,aAAnB,CAAN;AACD;AACF;AACF,mBAfH;AAgBEX,kBAAAA,OAAO,EAAEJ,MAhBX;AAiBEM,kBAAAA,QAAQ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAjBV;AAgDEC,kBAAAA,SAAS,EAAE;AACTS,oBAAAA,eAAe,EAAE;AAAEL,sBAAAA,KAAK,EAALA;AAAF,qBADR;AAETM,oBAAAA,YAAY,EAAE;AAAEP,sBAAAA,KAAK,EAALA;AAAF;AAFL;AAhDb,iBAFF;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAZ;;AAAA;AAAA;AAAA;AAAA,QAAP;AA0DD;;AAED,WAASQ,mBAAT,CAA6BC,OAA7B,EAA6Dd,KAA7D,EAA2E;AACzEnC,IAAAA,MAAM,CAACmC,KAAP,CAAaA,KAAb;AAEA,QAAIe,aAAJ;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcjB,KAAd,CAAJ,EAA0B;AACxBe,MAAAA,aAAa,GAAGf,KAAK,CAACkB,GAAN,CAAU,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,OAAN;AAAA,OAAX,CAAhB;AACD,KAFD,MAEO,IAAI,OAAOpB,KAAP,KAAiB,QAArB,EAA+B;AACpCe,MAAAA,aAAa,GAAG,CAACf,KAAD,CAAhB;AACD,KAFM,MAEA,IAAIA,KAAK,CAACoB,OAAV,EAAmB;AACxBL,MAAAA,aAAa,GAAG,CAACf,KAAK,CAACoB,OAAP,CAAhB;AACD;;AAEDxC,IAAAA,uBAAuB,CAACmC,aAAD,CAAvB;AAEAD,IAAAA,OAAO,CAACO,aAAR,CAAsB,KAAtB;AACAP,IAAAA,OAAO,CAACQ,SAAR,CAAkB,kBAAlB;AACD;;AAED,WAASC,YAAT,CAAsBT,OAAtB,EAAsDU,MAAtD,EAA0E;AACxEpB,IAAAA,8BAA8B,CAACoB,MAAM,CAACC,WAAR,EAAqBD,MAAM,CAAClB,KAAP,CAAahC,EAAlC,CAA9B,CACGoD,IADH,CACQ,YAAM;AACVlC,MAAAA,YAAY,GACTkC,IADH,CACQ,UAAC5B,IAAD,EAAgD;AACpDV,QAAAA,wBAAwB,CAACU,IAAI,CAACN,YAAL,CAAkBmC,MAAlB,CAAyBrD,EAA1B,CAAxB;AAEAsD,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,WACKC,cAAGC,OADR,sBAC2B9D,IAAI,CAACI,EADhC;AAGD,OAPH,EAQG2D,KARH,CAQS,UAAAjC,KAAK,EAAI;AACda,QAAAA,mBAAmB,CAACC,OAAD,EAAUd,KAAV,CAAnB;AACD,OAVH;AAWD,KAbH,EAcGiC,KAdH,CAcS,UAAAjC,KAAK,EAAI;AACda,MAAAA,mBAAmB,CAACC,OAAD,EAAUd,KAAV,CAAnB;AACD,KAhBH;AAiBD;;AAED,SACE,6BAAC,0BAAD,QACE,6BAAC,gBAAD,+BADF,EAEE,6BAAC,YAAD;AAAK,IAAA,QAAQ,EAAE,GAAf;AAAoB,IAAA,EAAE,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAxB;AAAgC,IAAA,EAAE,EAAC,MAAnC;AAA0C,IAAA,EAAE,EAAE,CAAC,CAAD,EAAI,CAAJ,CAA9C;AAAsD,IAAA,EAAE,EAAE,CAAC,CAAD,EAAI,GAAJ;AAA1D,KACE,6BAAC,cAAD;AAAO,IAAA,IAAI,EAAC;AAAZ,gCADF,EAEE,6BAAC,kBAAD;AAAW,IAAA,EAAE,EAAE,CAAf;AAAkB,IAAA,EAAE,EAAE;AAAtB,IAFF,EAIE,6BAAC,+CAAD;AACE,IAAA,QAAQ,EAAEuB,YADZ;AAEE,IAAA,qBAAqB,EAAE3C;AAFzB,IAJF,CAFF,CADF;AAcD,CApKM;;;;AAsKP,IAAMsD,4BAAqD,GAAG,SAAxDA,4BAAwD,CAAAnE,KAAK,EAAI;AACrE,MAAMoE,SAAS,GAAG,kBAAM;AACtBC,IAAAA,YAAY,EAAEpD,MAAM,CAACqD,QAAP,CAAgBC;AADR,GAAN,EAEfxE,aAFe,CAAlB;AAIA,SAAO,6BAAC,SAAD,EAAeC,KAAf,CAAP;AACD,CAND;;AAQO,IAAMwE,8BAA8B,GAAG,yCAC5C,gDAAqBL,4BAArB,CAD4C,EAE5C;AACEhE,EAAAA,IAAI;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,GADN;AAQEF,EAAAA,EAAE;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AARJ,CAF4C,CAAvC","sourcesContent":["import { Box, Separator, Serif } from \"@artsy/palette\"\nimport { Register_me } from \"__generated__/Register_me.graphql\"\nimport { Register_sale } from \"__generated__/Register_sale.graphql\"\nimport {\n  RegisterCreateBidderMutation,\n  RegisterCreateBidderMutationResponse,\n} from \"__generated__/RegisterCreateBidderMutation.graphql\"\nimport { RegisterCreateCreditCardAndUpdatePhoneMutation } from \"__generated__/RegisterCreateCreditCardAndUpdatePhoneMutation.graphql\"\nimport {\n  FormResult,\n  StripeWrappedRegistrationForm,\n} from \"Apps/Auction/Components/RegistrationForm\"\nimport { AppContainer } from \"Apps/Components/AppContainer\"\nimport { trackPageViewWrapper } from \"Apps/Order/Utils/trackPageViewWrapper\"\nimport { track } from \"Artsy\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { FormikActions } from \"formik\"\nimport React from \"react\"\nimport { Title } from \"react-head\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport { TrackingProp } from \"react-tracking\"\nimport { data as sd } from \"sharify\"\nimport createLogger from \"Utils/logger\"\n\nconst logger = createLogger(\"Apps/Auction/Routes/Register\")\n\ninterface RegisterProps {\n  sale: Register_sale\n  me: Register_me\n  relay: RelayProp\n  tracking: TrackingProp\n}\n\nexport const RegisterRoute: React.FC<RegisterProps> = props => {\n  const { me, relay, sale, tracking } = props\n\n  const commonProperties = {\n    auction_slug: sale.id,\n    auction_state: sale.status,\n    sale_id: sale._id,\n    user_id: me.id,\n  }\n\n  function trackRegistrationFailed(errors: string[]) {\n    tracking.trackEvent({\n      action_type: Schema.ActionType.RegistrationSubmitFailed,\n      error_messages: errors,\n      ...commonProperties,\n    })\n  }\n\n  function trackRegistrationSuccess(bidderId: string) {\n    tracking.trackEvent({\n      action_type: Schema.ActionType.RegistrationSubmitted,\n      bidder_id: bidderId,\n      ...commonProperties,\n    })\n  }\n\n  function createBidder() {\n    return new Promise(async (resolve, reject) => {\n      commitMutation<RegisterCreateBidderMutation>(relay.environment, {\n        onCompleted: data => {\n          resolve(data)\n        },\n        onError: error => {\n          reject(error)\n        },\n        mutation: graphql`\n          mutation RegisterCreateBidderMutation($input: CreateBidderInput!) {\n            createBidder(input: $input) {\n              bidder {\n                id\n              }\n            }\n          }\n        `,\n        variables: {\n          input: { sale_id: sale.id },\n        },\n      })\n    })\n  }\n\n  function createCreditCardAndUpdatePhone(phone, token) {\n    return new Promise(async (resolve, reject) => {\n      commitMutation<RegisterCreateCreditCardAndUpdatePhoneMutation>(\n        relay.environment,\n        {\n          onCompleted: (data, errors) => {\n            const {\n              createCreditCard: { creditCardOrError },\n            } = data\n\n            if (creditCardOrError.creditCardEdge) {\n              resolve()\n            } else {\n              if (errors) {\n                reject(errors)\n              } else {\n                reject(creditCardOrError.mutationError)\n              }\n            }\n          },\n          onError: reject,\n          mutation: graphql`\n            mutation RegisterCreateCreditCardAndUpdatePhoneMutation(\n              $creditCardInput: CreditCardInput!\n              $profileInput: UpdateMyProfileInput!\n            ) {\n              updateMyUserProfile(input: $profileInput) {\n                user {\n                  id\n                }\n              }\n\n              createCreditCard(input: $creditCardInput) {\n                creditCardOrError {\n                  ... on CreditCardMutationSuccess {\n                    creditCardEdge {\n                      node {\n                        last_digits\n                      }\n                    }\n                  }\n                  ... on CreditCardMutationFailure {\n                    mutationError {\n                      type\n                      message\n                      detail\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            creditCardInput: { token },\n            profileInput: { phone },\n          },\n        }\n      )\n    })\n  }\n\n  function handleMutationError(actions: FormikActions<object>, error: Error) {\n    logger.error(error)\n\n    let errorMessages: string[]\n    if (Array.isArray(error)) {\n      errorMessages = error.map(e => e.message)\n    } else if (typeof error === \"string\") {\n      errorMessages = [error]\n    } else if (error.message) {\n      errorMessages = [error.message]\n    }\n\n    trackRegistrationFailed(errorMessages)\n\n    actions.setSubmitting(false)\n    actions.setStatus(\"submissionFailed\")\n  }\n\n  function handleSubmit(actions: FormikActions<object>, result: FormResult) {\n    createCreditCardAndUpdatePhone(result.phoneNumber, result.token.id)\n      .then(() => {\n        createBidder()\n          .then((data: RegisterCreateBidderMutationResponse) => {\n            trackRegistrationSuccess(data.createBidder.bidder.id)\n\n            window.location.assign(\n              `${sd.APP_URL}/auction/${sale.id}/confirm-registration`\n            )\n          })\n          .catch(error => {\n            handleMutationError(actions, error)\n          })\n      })\n      .catch(error => {\n        handleMutationError(actions, error)\n      })\n  }\n\n  return (\n    <AppContainer>\n      <Title>Auction Registration</Title>\n      <Box maxWidth={550} px={[2, 0]} mx=\"auto\" mt={[1, 0]} mb={[1, 100]}>\n        <Serif size=\"10\">Register to Bid on Artsy</Serif>\n        <Separator mt={1} mb={2} />\n\n        <StripeWrappedRegistrationForm\n          onSubmit={handleSubmit}\n          trackSubmissionErrors={trackRegistrationFailed}\n        />\n      </Box>\n    </AppContainer>\n  )\n}\n\nconst TrackingWrappedRegisterRoute: React.FC<RegisterProps> = props => {\n  const Component = track({\n    context_page: Schema.PageName.AuctionRegistrationPage,\n  })(RegisterRoute)\n\n  return <Component {...props} />\n}\n\nexport const RegisterRouteFragmentContainer = createFragmentContainer(\n  trackPageViewWrapper(TrackingWrappedRegisterRoute),\n  {\n    sale: graphql`\n      fragment Register_sale on Sale {\n        id\n        _id\n        status\n      }\n    `,\n    me: graphql`\n      fragment Register_me on Me {\n        id\n      }\n    `,\n  }\n)\n"],"file":"index.js"}