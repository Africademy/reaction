{"version":3,"sources":["../../../src/Apps/Auction/routes.tsx"],"names":["logger","routes","path","Component","AuctionFAQ","ConfirmBidRouteFragmentContainer","render","props","artwork","me","location","handleRedirect","query","RegisterRouteFragmentContainer","sale","redirect","warn","pathname","reason","RedirectException"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAG,qBAAa,qBAAb,CAAf;AAEO,IAAMC,MAAqB,GAAG,CACnC;AACEC,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,SAAS,EAAEC;AAFb,CADmC,EAKnC;AACEF,EAAAA,IAAI,EAAE,qCADR;AAEEC,EAAAA,SAAS,EAAEE,4CAFb;AAGEC,EAAAA,MAAM,EAAE,sBAA0B;AAAA,QAAvBH,SAAuB,QAAvBA,SAAuB;AAAA,QAAZI,KAAY,QAAZA,KAAY;;AAChC,QAAIJ,SAAS,IAAII,KAAjB,EAAwB;AAAA,kBACYA,KADZ;AAAA,UACdC,OADc,SACdA,OADc;AAAA,UACLC,EADK,SACLA,EADK;AAAA,UACDC,QADC,SACDA,QADC;;AAEtB,UAAI,CAACF,OAAL,EAAc;AACZ,eAAO,6BAAC,oBAAD;AAAW,UAAA,IAAI,EAAE;AAAjB,UAAP;AACD;;AACDG,MAAAA,cAAc,CAAC,qCAAmB;AAAEH,QAAAA,OAAO,EAAPA,OAAF;AAAWC,QAAAA,EAAE,EAAFA;AAAX,OAAnB,EAAoCC,QAApC,CAAD,EAAgDA,QAAhD,CAAd;AACA,aAAO,6BAAC,SAAD,EAAeH,KAAf,CAAP;AACD;AACF,GAZH;AAaEK,EAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAbP,CALmC,EAiDnC;AACEV,EAAAA,IAAI,EAAE,mCADR;AAEEC,EAAAA,SAAS,EAAEU,wCAFb;AAGEP,EAAAA,MAAM,EAAE,uBAA0B;AAAA,QAAvBH,SAAuB,SAAvBA,SAAuB;AAAA,QAAZI,KAAY,SAAZA,KAAY;;AAChC,QAAIJ,SAAS,IAAII,KAAjB,EAAwB;AAAA,kBACSA,KADT;AAAA,UACdG,QADc,SACdA,QADc;AAAA,UACJI,IADI,SACJA,IADI;AAAA,UACEL,EADF,SACEA,EADF;;AAGtB,UAAI,CAACK,IAAL,EAAW;AACT,eAAO,6BAAC,oBAAD;AAAW,UAAA,IAAI,EAAE;AAAjB,UAAP;AACD;;AAEDH,MAAAA,cAAc,CAAC,mCAAiB;AAAEG,QAAAA,IAAI,EAAJA,IAAF;AAAQL,QAAAA,EAAE,EAAFA;AAAR,OAAjB,CAAD,EAAiCC,QAAjC,CAAd;AAEA,aAAO,6BAAC,SAAD,EAAeH,KAAf,CAAP;AACD;AACF,GAfH;AAgBEK,EAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhBP,CAjDmC,CAA9B;;;AAwFP,SAASD,cAAT,CAAwBI,QAAxB,EAA4CL,QAA5C,EAAgE;AAC9D,MAAIK,QAAJ,EAAc;AACZf,IAAAA,MAAM,CAACgB,IAAP,4BACsBN,QAAQ,CAACO,QAD/B,iBAC8CF,QAAQ,CAACb,IADvD,uBAEIa,QAAQ,CAACG,MAFb;AAKA,UAAM,IAAIC,wBAAJ,CAAsBJ,QAAQ,CAACb,IAA/B,CAAN;AACD;AACF","sourcesContent":["import { ErrorPage } from \"Components/ErrorPage\"\nimport { RedirectException, RouteConfig } from \"found\"\nimport React from \"react\"\nimport { graphql } from \"react-relay\"\nimport createLogger from \"Utils/logger\"\nimport { AuctionFAQQueryRenderer as AuctionFAQ } from \"./Components/AuctionFAQ\"\nimport { confirmBidRedirect, Redirect, registerRedirect } from \"./getRedirect\"\nimport { ConfirmBidRouteFragmentContainer } from \"./Routes/ConfirmBid\"\nimport { RegisterRouteFragmentContainer } from \"./Routes/Register\"\n\nconst logger = createLogger(\"Apps/Auction/routes\")\n\nexport const routes: RouteConfig[] = [\n  {\n    path: \"/auction-faq\",\n    Component: AuctionFAQ,\n  },\n  {\n    path: \"/auction/:saleID/bid(2)?/:artworkID\",\n    Component: ConfirmBidRouteFragmentContainer,\n    render: ({ Component, props }) => {\n      if (Component && props) {\n        const { artwork, me, location } = props as any\n        if (!artwork) {\n          return <ErrorPage code={404} />\n        }\n        handleRedirect(confirmBidRedirect({ artwork, me }, location), location)\n        return <Component {...props} />\n      }\n    },\n    query: graphql`\n      query routes_ConfirmBidQuery($saleID: String!, $artworkID: String!) {\n        artwork(id: $artworkID) {\n          ...LotInfo_artwork\n          _id\n          id\n          saleArtwork: sale_artwork(sale_id: $saleID) {\n            ...LotInfo_saleArtwork\n            ...BidForm_saleArtwork\n            _id\n            id\n            sale {\n              registrationStatus {\n                id\n                qualified_for_bidding\n              }\n              _id\n              id\n              name\n              is_closed\n              is_registration_closed\n            }\n          }\n        }\n        me {\n          ...ConfirmBid_me\n          has_qualified_credit_cards\n        }\n      }\n    `,\n  },\n  {\n    path: \"/auction-registration(2)?/:saleID\",\n    Component: RegisterRouteFragmentContainer,\n    render: ({ Component, props }) => {\n      if (Component && props) {\n        const { location, sale, me } = props as any\n\n        if (!sale) {\n          return <ErrorPage code={404} />\n        }\n\n        handleRedirect(registerRedirect({ sale, me }), location)\n\n        return <Component {...props} />\n      }\n    },\n    query: graphql`\n      query routes_RegisterQuery($saleID: String!) {\n        sale(id: $saleID) @principalField {\n          id\n          is_auction\n          is_registration_closed\n          is_preview\n          is_open\n          is_auction\n          registrationStatus {\n            qualified_for_bidding\n          }\n          ...Register_sale\n        }\n        me {\n          has_qualified_credit_cards\n          ...Register_me\n        }\n      }\n    `,\n  },\n]\n\nfunction handleRedirect(redirect: Redirect, location: Location) {\n  if (redirect) {\n    logger.warn(\n      `Redirecting from ${location.pathname} to ${redirect.path} because '${\n        redirect.reason\n      }'`\n    )\n    throw new RedirectException(redirect.path)\n  }\n}\n"],"file":"routes.js"}