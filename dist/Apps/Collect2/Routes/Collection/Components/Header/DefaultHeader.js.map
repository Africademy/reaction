{"version":3,"sources":["../../../../../../../src/Apps/Collect2/Routes/Collection/Components/Header/DefaultHeader.tsx"],"names":["IMAGE_MARGIN_X","LARGE_VIEWPORT_WIDTH","CollectionDefaultHeader","headerArtworks","defaultHeaderImageHeight","collection_id","collection_slug","artworks","hits","viewportWidth","width","smallViewport","duplicatedArtworks","slice","artworksToRender","getHeaderArtworks","trackEvent","map","artwork","i","href","action_type","AnalyticsSchema","ActionType","Click","context_module","ContextModule","ArtworkBanner","context_page_owner_type","OwnerType","Collection","context_page","PageName","CollectionPage","context_page_owner_id","context_page_owner_slug","destination_path","image","small","url","large","artworksArray","headerWidth","isSmallViewport","artworkWidths","shouldAppendDuplicateArtworksToHeader","length","push","CollectionDefaultHeaderFragmentContainer","DefaultHeaderContainer","Box","media","xs","HeaderArtworks","Flex","HeaderImage","Image"],"mappings":"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","sourcesContent":["import { Box, color, Flex, Image, media, space } from \"@artsy/palette\"\nimport { DefaultHeader_headerArtworks } from \"__generated__/DefaultHeader_headerArtworks.graphql\"\nimport { AnalyticsSchema } from \"Artsy/Analytics\"\nimport { useTracking } from \"Artsy/Analytics/useTracking\"\nimport React, { FC } from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\nimport { useWindowSize } from \"Utils/Hooks/useWindowSize\"\n\ninterface CollectionDefaultHeaderProps {\n  headerArtworks: DefaultHeader_headerArtworks\n  defaultHeaderImageHeight: number\n  collection_id: string\n  collection_slug: string\n}\n\nconst IMAGE_MARGIN_X = 10\nconst LARGE_VIEWPORT_WIDTH = 880\n\nexport const CollectionDefaultHeader: FC<CollectionDefaultHeaderProps> = ({\n  headerArtworks,\n  defaultHeaderImageHeight,\n  collection_id,\n  collection_slug,\n}) => {\n  const { hits: artworks } = headerArtworks\n\n  if (!artworks) {\n    return null\n  }\n\n  const viewportWidth = useWindowSize().width\n  const smallViewport = viewportWidth < LARGE_VIEWPORT_WIDTH\n  /**\n   * Relay is returning 12 artworks since this query populates both the artworks\n   *  used for merchandisable artists and those used for this component.\n   *  Slice the artworks array to get just the first 10 in the result set.\n   */\n  const duplicatedArtworks = artworks.slice(0, 10)\n  const artworksToRender = getHeaderArtworks(\n    duplicatedArtworks,\n    viewportWidth,\n    smallViewport\n  )\n\n  const { trackEvent } = useTracking()\n\n  return (\n    <header>\n      <DefaultHeaderContainer\n        position={[\"relative\", \"absolute\"]}\n        left={[\"auto\", 0]}\n        width={[\"auto\", 1]}\n        height={[160, 160, 250]}\n      >\n        <HeaderArtworks>\n          {artworksToRender.map((artwork, i) => {\n            return (\n              <a\n                href={artwork.href}\n                key={artwork.href}\n                onClick={() => {\n                  trackEvent({\n                    action_type: AnalyticsSchema.ActionType.Click,\n                    context_module: AnalyticsSchema.ContextModule.ArtworkBanner,\n                    context_page_owner_type:\n                      AnalyticsSchema.OwnerType.Collection,\n                    context_page: AnalyticsSchema.PageName.CollectionPage,\n                    context_page_owner_id: collection_id,\n                    context_page_owner_slug: collection_slug,\n                    destination_path: artwork.href,\n                  })\n                }}\n              >\n                <HeaderImage\n                  height={defaultHeaderImageHeight}\n                  src={\n                    smallViewport\n                      ? (artwork.image.small.url as string)\n                      : (artwork.image.large.url as string)\n                  }\n                  preventRightClick\n                />\n              </a>\n            )\n          })}\n        </HeaderArtworks>\n      </DefaultHeaderContainer>\n    </header>\n  )\n}\n\nexport const getHeaderArtworks = (\n  artworksArray: any[],\n  headerWidth: number,\n  isSmallViewport: boolean\n) => {\n  let artworkWidths = 0\n  let shouldAppendDuplicateArtworksToHeader = true\n  const headerArtworks: any[] = []\n\n  if (artworksArray.length < 1) {\n    return [] as any[]\n  }\n\n  /**\n   * Loop through the initial artworks array, appending an artwork to the output array,\n   * until the summed widths of the artworks in the output array are greater than the\n   * width of the viewport.\n   */\n  while (shouldAppendDuplicateArtworksToHeader) {\n    for (const artwork of artworksArray) {\n      if (artworkWidths > headerWidth) {\n        headerArtworks.push(artwork)\n        shouldAppendDuplicateArtworksToHeader = false\n        return headerArtworks\n      }\n\n      headerArtworks.push(artwork)\n\n      isSmallViewport\n        ? (artworkWidths += artwork.image.small.width + IMAGE_MARGIN_X)\n        : (artworkWidths += artwork.image.large.width + IMAGE_MARGIN_X)\n    }\n  }\n}\n\nexport const CollectionDefaultHeaderFragmentContainer = createFragmentContainer(\n  CollectionDefaultHeader,\n  {\n    headerArtworks: graphql`\n      fragment DefaultHeader_headerArtworks on FilterArtworks {\n        hits {\n          href\n          id\n          image {\n            small: resized(height: 160) {\n              url\n              width\n              height\n            }\n            large: resized(height: 220) {\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n\nconst DefaultHeaderContainer = styled(Box)`\n  background-color: ${color(\"black5\")};\n  overflow: hidden;\n\n  ${media.xs`\n    margin-left: -20px;\n    margin-right: -20px;\n  `};\n`\nconst HeaderArtworks = styled(Flex)`\n  flex-direction: row;\n  position: absolute;\n  bottom: 0;\n\n  & a:first-child > img {\n    margin-left: 0px;\n  }\n\n  & a:last-child > img {\n    margin-left: 0px;\n  }\n`\nconst HeaderImage = styled(Image)`\n  margin-right: ${space(0.5)}px;\n  margin-left: ${space(0.5)}px;\n`\n"],"file":"DefaultHeader.js"}