{"version":3,"sources":["../../../../src/Apps/Order/Components/OfferInput.tsx"],"names":["OfferInput","props","id","showError","onFocus","ev","currentValue","currentTarget","value","nonDigitMatch","match","cursorOffset","indexOf","nextValue","replace","setSelectionRange","onChange","Number","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;IASaA,U;;;;;;;;;;;;;6BACF;AAAA;;AAAA,wBAC4B,KAAKC,KADjC;AAAA,UACCC,EADD,eACCA,EADD;AAAA,UACKC,SADL,eACKA,SADL;AAAA,UACgBC,OADhB,eACgBA,OADhB;AAGP,aACE,6BAAC,cAAD;AACE,QAAA,EAAE,EAAEF,EADN;AAEE,QAAA,KAAK,EAAC,YAFR;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,OAAO,EAAC,OAJV;AAKE,QAAA,YAAY,EAAE,IALhB;AAME,QAAA,KAAK,EAAEC,SAAS,GAAG,kCAAH,GAAwC,IAN1D;AAOE,QAAA,OAAO,EAAEC,OAPX;AAQE,QAAA,QAAQ,EAAE,kBAAAC,EAAE,EAAI;AACd,cAAMC,YAAY,GAAGD,EAAE,CAACE,aAAH,CAAiBC,KAAtC;AACA,cAAMC,aAAa,GAAGH,YAAY,CAACI,KAAb,CAAmB,IAAnB,CAAtB;;AAEA,cAAID,aAAJ,EAAmB;AACjB,gBAAME,YAAY,GAAGL,YAAY,CAACM,OAAb,CAAqBH,aAAa,CAAC,CAAD,CAAlC,CAArB;AACA,gBAAMI,SAAS,GAAGP,YAAY,CAACQ,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAlB;AACAT,YAAAA,EAAE,CAACE,aAAH,CAAiBC,KAAjB,GAAyBK,SAAzB;AACAR,YAAAA,EAAE,CAACE,aAAH,CAAiBQ,iBAAjB,CAAmCJ,YAAnC,EAAiDA,YAAjD;AACD;;AAED,UAAA,KAAI,CAACV,KAAL,CAAWe,QAAX,CAAoBC,MAAM,CAACZ,EAAE,CAACE,aAAH,CAAiBC,KAAjB,IAA0B,GAA3B,CAA1B;AACD,SApBH;AAqBE,QAAA,KAAK;AArBP,QADF;AAyBD;;;;EA7B6BU,eAAMC,S","sourcesContent":["import Input from \"Components/Input\"\nimport React from \"react\"\n\nexport interface OfferInputProps {\n  id: string\n  showError?: boolean\n  onChange: (value: number) => void\n  onFocus?: () => void\n}\n\nexport class OfferInput extends React.Component<OfferInputProps> {\n  render() {\n    const { id, showError, onFocus } = this.props\n\n    return (\n      <Input\n        id={id}\n        title=\"Your offer\"\n        type=\"text\"\n        pattern=\"[0-9]\"\n        defaultValue={null}\n        error={showError ? \"Offer amount missing or invalid.\" : null}\n        onFocus={onFocus}\n        onChange={ev => {\n          const currentValue = ev.currentTarget.value\n          const nonDigitMatch = currentValue.match(/\\D/)\n\n          if (nonDigitMatch) {\n            const cursorOffset = currentValue.indexOf(nonDigitMatch[0])\n            const nextValue = currentValue.replace(/\\D/g, \"\")\n            ev.currentTarget.value = nextValue\n            ev.currentTarget.setSelectionRange(cursorOffset, cursorOffset)\n          }\n\n          this.props.onChange(Number(ev.currentTarget.value || \"0\"))\n        }}\n        block\n      />\n    )\n  }\n}\n"],"file":"OfferInput.js"}