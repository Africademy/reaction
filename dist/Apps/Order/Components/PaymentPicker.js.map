{"version":3,"sources":["../../../../src/Apps/Order/Components/PaymentPicker.tsx"],"names":["PaymentPicker","props","state","args","showBillingAddress","order","action_type","Schema","ActionType","Click","subject","Subject","BNMOUseShippingAddress","flow","type","hideBillingAddress","stripeError","isCreatingStripeToken","address","startingAddress","addressErrors","addressTouched","creditCardSelection","getInitialCreditCardSelection","saveNewCreditCard","setState","stripeBillingAddress","getStripeBillingAddress","stripe","createToken","creditCardId","id","needsAddress","errors","hasErrors","touchedAddress","createStripeToken","stripeResult","error","createCreditCard","input","token","oneTimeUse","creditCardOrError","mutationError","detail","message","creditCard","key","requestedFulfillment","__typename","isPickup","me","creditCards","edges","length","node","emptyAddress","country","orderCard","creditCardsArray","map","e","some","card","unshift","userHasExistingCards","val","creditCardProps","concat","response","handleChangeHideBillingAddress","bind","onAddressChange","selectedBillingAddress","name","addressLine1","addressLine2","city","region","postalCode","address_line1","address_line2","address_city","address_state","address_zip","address_country","variables","commitMutation","mutation","phoneNumber","React","Component","PaymentPickerWithInnerRef","innerRef","PaymentPickerFragmentContainer"],"mappings":"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","sourcesContent":["import { PaymentPicker_me } from \"__generated__/PaymentPicker_me.graphql\"\nimport { PaymentPicker_order } from \"__generated__/PaymentPicker_order.graphql\"\nimport { PaymentPickerCreateCreditCardMutation } from \"__generated__/PaymentPickerCreateCreditCardMutation.graphql\"\nimport {\n  Address,\n  AddressChangeHandler,\n  AddressErrors,\n  AddressForm,\n  AddressTouched,\n  emptyAddress,\n} from \"Apps/Order/Components/AddressForm\"\n\nimport { CreditCardInput } from \"Apps/Order/Components/CreditCardInput\"\nimport { validateAddress } from \"Apps/Order/Utils/formValidators\"\nimport { track } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { injectStripe, ReactStripeElements } from \"react-stripe-elements\"\n\nimport {\n  BorderedRadio,\n  Checkbox,\n  Collapse,\n  Flex,\n  Link,\n  RadioGroup,\n  Sans,\n  Serif,\n  Spacer,\n} from \"@artsy/palette\"\nimport { CommitMutation } from \"Apps/Order/Utils/commitMutation\"\nimport { CreditCardDetails } from \"./CreditCardDetails\"\n\nexport interface PaymentPickerProps\n  extends ReactStripeElements.InjectedStripeProps {\n  order: PaymentPicker_order\n  me: PaymentPicker_me\n  commitMutation: CommitMutation\n  innerRef: React.RefObject<PaymentPicker>\n}\n\ninterface PaymentPickerState {\n  hideBillingAddress: boolean\n  address: Address\n  addressErrors: AddressErrors\n  addressTouched: AddressTouched\n  stripeError: stripe.Error\n  isCreatingStripeToken: boolean\n  creditCardSelection: { type: \"existing\"; id: string } | { type: \"new\" }\n  saveNewCreditCard: boolean\n}\n\nexport class PaymentPicker extends React.Component<\n  PaymentPickerProps,\n  PaymentPickerState\n> {\n  state = {\n    hideBillingAddress: true,\n    stripeError: null,\n    isCreatingStripeToken: false,\n    address: this.startingAddress(),\n    addressErrors: {},\n    addressTouched: {},\n    creditCardSelection: this.getInitialCreditCardSelection(),\n    saveNewCreditCard: true,\n  }\n\n  private getInitialCreditCardSelection(): PaymentPickerState[\"creditCardSelection\"] {\n    if (this.props.order.creditCard) {\n      return { type: \"existing\", id: this.props.order.creditCard.id }\n    } else {\n      return this.props.me.creditCards.edges.length\n        ? { type: \"existing\", id: this.props.me.creditCards.edges[0].node.id }\n        : { type: \"new\" }\n    }\n  }\n\n  private startingAddress(): Address {\n    return {\n      ...emptyAddress,\n      country: \"US\",\n    }\n  }\n\n  private get touchedAddress() {\n    return {\n      name: true,\n      country: true,\n      postalCode: true,\n      addressLine1: true,\n      addressLine2: true,\n      city: true,\n      region: true,\n      phoneNumber: true,\n    }\n  }\n\n  private createStripeToken = async () => {\n    try {\n      this.setState({ isCreatingStripeToken: true })\n      const stripeBillingAddress = this.getStripeBillingAddress()\n      return await this.props.stripe.createToken(stripeBillingAddress)\n    } finally {\n      this.setState({ isCreatingStripeToken: false })\n    }\n  }\n\n  getCreditCardId: () => Promise<\n    | { type: \"error\"; error: string | undefined }\n    | { type: \"internal_error\"; error: string | undefined }\n    | { type: \"invalid_form\" }\n    | { type: \"success\"; creditCardId: string }\n  > = async () => {\n    const { creditCardSelection, saveNewCreditCard } = this.state\n    if (creditCardSelection.type === \"existing\") {\n      return { type: \"success\", creditCardId: creditCardSelection.id }\n    }\n\n    if (this.needsAddress()) {\n      const { errors, hasErrors } = validateAddress(this.state.address)\n      if (hasErrors) {\n        this.setState({\n          addressErrors: errors,\n          addressTouched: this.touchedAddress,\n        })\n        return { type: \"invalid_form\" }\n      }\n    }\n\n    const stripeResult = await this.createStripeToken()\n    if (stripeResult.error) {\n      this.setState({\n        stripeError: stripeResult.error,\n      })\n      return { type: \"invalid_form\" }\n    }\n\n    const creditCardOrError = (await this.createCreditCard({\n      input: {\n        token: stripeResult.token.id,\n        oneTimeUse: !saveNewCreditCard,\n      },\n    })).createCreditCard.creditCardOrError\n\n    if (\n      creditCardOrError.mutationError &&\n      creditCardOrError.mutationError.detail\n    ) {\n      return { type: \"error\", error: creditCardOrError.mutationError.detail }\n    } else if (\n      creditCardOrError.mutationError &&\n      creditCardOrError.mutationError.message\n    ) {\n      return {\n        type: \"internal_error\",\n        error: creditCardOrError.mutationError.message,\n      }\n    } else\n      return { type: \"success\", creditCardId: creditCardOrError.creditCard.id }\n  }\n\n  @track((props: PaymentPickerProps, state, args) => {\n    const showBillingAddress = !args[0]\n    if (showBillingAddress && props.order.state === \"PENDING\") {\n      return {\n        action_type: Schema.ActionType.Click,\n        subject: Schema.Subject.BNMOUseShippingAddress,\n        flow: \"buy now\",\n        type: \"checkbox\",\n      }\n    }\n  })\n  private handleChangeHideBillingAddress(hideBillingAddress: boolean) {\n    if (!hideBillingAddress) {\n      this.setState({\n        address: {\n          ...emptyAddress,\n          country: \"US\",\n        },\n      })\n    }\n\n    this.setState({ hideBillingAddress })\n  }\n\n  private onAddressChange: AddressChangeHandler = (address, key) => {\n    const { errors } = validateAddress(address)\n    this.setState({\n      address,\n      addressErrors: {\n        ...this.state.addressErrors,\n        [key]: errors[key],\n      },\n      addressTouched: {\n        ...this.state.addressTouched,\n        [key]: true,\n      },\n    })\n  }\n\n  render() {\n    const {\n      stripeError,\n      address,\n      addressErrors,\n      addressTouched,\n      creditCardSelection,\n    } = this.state\n    const {\n      me: { creditCards },\n    } = this.props\n\n    const orderCard = this.props.order.creditCard\n\n    const creditCardsArray = creditCards.edges.map(e => e.node)\n\n    // only add the unsaved card to the cards array if it exists and is not already there\n    if (\n      orderCard != null &&\n      !creditCardsArray.some(card => card.id === orderCard.id)\n    ) {\n      creditCardsArray.unshift(orderCard)\n    }\n\n    const userHasExistingCards = creditCardsArray.length > 0\n\n    return (\n      <>\n        {userHasExistingCards && (\n          <>\n            <RadioGroup\n              onSelect={val => {\n                if (val === \"new\") {\n                  this.setState({ creditCardSelection: { type: \"new\" } })\n                } else {\n                  this.setState({\n                    creditCardSelection: { type: \"existing\", id: val },\n                  })\n                }\n              }}\n              defaultValue={\n                creditCardSelection.type === \"new\"\n                  ? \"new\"\n                  : creditCardSelection.id\n              }\n            >\n              {creditCardsArray\n                .map(e => {\n                  const { id, ...creditCardProps } = e\n                  return (\n                    <BorderedRadio value={id} key={id}>\n                      <CreditCardDetails\n                        responsive={false}\n                        {...creditCardProps}\n                      />\n                    </BorderedRadio>\n                  )\n                })\n                .concat([\n                  <BorderedRadio\n                    data-test=\"AddNewCard\"\n                    value=\"new\"\n                    key=\"new\"\n                    selected={creditCardSelection.type === \"new\"}\n                  >\n                    Add another card.\n                  </BorderedRadio>,\n                ])}\n            </RadioGroup>\n            <Spacer mb={1} />\n            <Sans size=\"2\">\n              <Link href=\"/user/payments\" target=\"_blank\">\n                Manage cards\n              </Link>\n            </Sans>\n          </>\n        )}\n\n        <Collapse open={this.state.creditCardSelection.type === \"new\"}>\n          {userHasExistingCards && <Spacer mb={3} />}\n          <Flex flexDirection=\"column\">\n            <Serif mb={1} size=\"3t\" color=\"black100\" lineHeight=\"1.1em\">\n              Credit card\n            </Serif>\n            <CreditCardInput\n              error={stripeError}\n              onChange={response => {\n                this.setState({ stripeError: response.error })\n              }}\n            />\n\n            {!this.isPickup() && (\n              <>\n                <Spacer mb={2} />\n                <Checkbox\n                  selected={this.state.hideBillingAddress}\n                  onSelect={this.handleChangeHideBillingAddress.bind(this)}\n                  data-test=\"BillingAndShippingAreTheSame\"\n                >\n                  Billing and shipping addresses are the same.\n                </Checkbox>\n              </>\n            )}\n            <Collapse open={this.needsAddress()}>\n              <Spacer mb={2} />\n              <AddressForm\n                value={address}\n                errors={addressErrors}\n                touched={addressTouched}\n                onChange={this.onAddressChange}\n                billing\n              />\n              <Spacer mb={2} />\n            </Collapse>\n            <Checkbox\n              data-test=\"SaveNewCreditCard\"\n              selected={this.state.saveNewCreditCard}\n              onSelect={() =>\n                this.setState({\n                  saveNewCreditCard: !this.state.saveNewCreditCard,\n                })\n              }\n            >\n              Save credit card for later use.\n            </Checkbox>\n          </Flex>\n        </Collapse>\n      </>\n    )\n  }\n\n  private getStripeBillingAddress(): stripe.TokenOptions {\n    const selectedBillingAddress = (this.needsAddress()\n      ? this.state.address\n      : this.props.order.requestedFulfillment) as Address\n    const {\n      name,\n      addressLine1,\n      addressLine2,\n      city,\n      region,\n      postalCode,\n      country,\n    } = selectedBillingAddress\n    return {\n      name,\n      address_line1: addressLine1,\n      address_line2: addressLine2,\n      address_city: city,\n      address_state: region,\n      address_zip: postalCode,\n      address_country: country,\n    }\n  }\n\n  private createCreditCard(\n    variables: PaymentPickerCreateCreditCardMutation[\"variables\"]\n  ) {\n    return this.props.commitMutation<PaymentPickerCreateCreditCardMutation>({\n      variables,\n      mutation: graphql`\n        mutation PaymentPickerCreateCreditCardMutation(\n          $input: CreditCardInput!\n        ) {\n          createCreditCard(input: $input) {\n            creditCardOrError {\n              ... on CreditCardMutationSuccess {\n                creditCard {\n                  id\n                  name\n                  street1\n                  street2\n                  city\n                  state\n                  country\n                  postal_code\n                  expiration_month\n                  expiration_year\n                  last_digits\n                  brand\n                }\n              }\n              ... on CreditCardMutationFailure {\n                mutationError {\n                  type\n                  message\n                  detail\n                }\n              }\n            }\n          }\n        }\n      `,\n    })\n  }\n\n  private isPickup = () => {\n    return this.props.order.requestedFulfillment.__typename === \"CommercePickup\"\n  }\n\n  private needsAddress = () => {\n    return this.isPickup() || !this.state.hideBillingAddress\n  }\n}\n\n// Our mess of HOC wrappers is not amenable to ref forwarding, so to expose a\n// ref to the PaymentPicker instance (for getCreditCardId) we'll add an\n// `innerRef` prop which gets sneakily injected here\nconst PaymentPickerWithInnerRef: React.SFC<\n  PaymentPickerProps & { innerRef: React.RefObject<PaymentPicker> }\n> = ({ innerRef, ...props }) => (\n  <PaymentPicker ref={innerRef} {...props as any} />\n)\n\nexport const PaymentPickerFragmentContainer = createFragmentContainer(\n  // 😭 HOCs\n  injectStripe(track()(\n    PaymentPickerWithInnerRef\n  ) as typeof PaymentPickerWithInnerRef),\n  {\n    me: graphql`\n      fragment PaymentPicker_me on Me {\n        creditCards(first: 100) {\n          edges {\n            node {\n              id\n              brand\n              last_digits\n              expiration_month\n              expiration_year\n            }\n          }\n        }\n      }\n    `,\n    order: graphql`\n      fragment PaymentPicker_order on CommerceOrder {\n        id\n        mode\n        state\n        creditCard {\n          id\n          name\n          street1\n          street2\n          city\n          state\n          country\n          postal_code\n          expiration_month\n          expiration_year\n          last_digits\n          brand\n        }\n        requestedFulfillment {\n          __typename\n          ... on CommerceShip {\n            name\n            addressLine1\n            addressLine2\n            city\n            region\n            country\n            postalCode\n          }\n          ... on CommercePickup {\n            fulfillmentType\n          }\n        }\n        lineItems {\n          edges {\n            node {\n              artwork {\n                id\n              }\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n"],"file":"PaymentPicker.js"}