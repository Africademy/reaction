{"version":3,"sources":["../../../../../src/Apps/Order/Components/__mocks__/PaymentPicker.tsx"],"names":["goodResult","type","creditCardId","useGoodResult","PaymentPickerMock","getCreditCardId","mockResolvedValue","invalidFormResult","useInvalidFormResult","errorResult","error","useErrorResult","internalErrorResult","useInternalErrorResult","useThrownError","mockRejectedValue","Error","jest","fn","Promise","resolve","beforeEach","mockReset","PaymentPickerFragmentContainer","innerRef","current"],"mappings":";;;;;;;;;;;AAAA;;AAQA,IAAMA,UAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE,SAD+B;AAErCC,EAAAA,YAAY,EAAE;AAFuB,CAAvC;;AAKO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjCC,EAAAA,iBAAiB,CAACC,eAAlB,CAAkCC,iBAAlC,CAAoDN,UAApD;AACD,CAFM;;;AAIP,IAAMO,iBAAqC,GAAG;AAC5CN,EAAAA,IAAI,EAAE;AADsC,CAA9C;;AAIO,IAAMO,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACxCJ,EAAAA,iBAAiB,CAACC,eAAlB,CAAkCC,iBAAlC,CAAoDC,iBAApD;AACD,CAFM;;;AAIP,IAAME,WAA+B,GAAG;AACtCR,EAAAA,IAAI,EAAE,OADgC;AAEtCS,EAAAA,KAAK,EAAE;AAF+B,CAAxC;;AAIO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClCP,EAAAA,iBAAiB,CAACC,eAAlB,CAAkCC,iBAAlC,CAAoDG,WAApD;AACD,CAFM;;;AAIP,IAAMG,mBAAuC,GAAG;AAC9CX,EAAAA,IAAI,EAAE,gBADwC;AAE9CS,EAAAA,KAAK,EAAE;AAFuC,CAAhD;;AAIO,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAC1CT,EAAAA,iBAAiB,CAACC,eAAlB,CAAkCC,iBAAlC,CAAoDM,mBAApD;AACD,CAFM;;;;AAIA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClCV,EAAAA,iBAAiB,CAACC,eAAlB,CAAkCU,iBAAlC,CAAoD,IAAIC,KAAJ,CAAU,cAAV,CAApD;AACD,CAFM;;;AAIP,IAAMZ,iBAAiB,GAAG;AACxBC,EAAAA,eAAe,EAAEY,IAAI,CAACC,EAAL,CACf;AAAA,WAAMC,OAAO,CAACC,OAAR,CAAgBpB,UAAhB,CAAN;AAAA,GADe;AADO,CAA1B;AAMAqB,UAAU,CAAC,YAAM;AACfjB,EAAAA,iBAAiB,CAACC,eAAlB,CAAkCiB,SAAlC;AACAnB,EAAAA,aAAa;AACd,CAHS,CAAV;;AAKO,IAAMoB,8BAA8B,GAAG,SAAjCA,8BAAiC,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC9DA,EAAAA,QAAQ,CAACC,OAAT,GAAmBrB,iBAAnB;AACA,SAAO,0BAAc,KAAd,CAAP;AACD,CAHM","sourcesContent":["import { createElement } from \"react\"\nimport { PaymentPicker } from \"../PaymentPicker\"\n\ntype UnpackPromise<T> = T extends Promise<infer R> ? R : T\ntype CreditCardIdResult = UnpackPromise<\n  ReturnType<PaymentPicker[\"getCreditCardId\"]>\n>\n\nconst goodResult: CreditCardIdResult = {\n  type: \"success\",\n  creditCardId: \"credit-card-id\",\n}\n\nexport const useGoodResult = () => {\n  PaymentPickerMock.getCreditCardId.mockResolvedValue(goodResult)\n}\n\nconst invalidFormResult: CreditCardIdResult = {\n  type: \"invalid_form\",\n}\n\nexport const useInvalidFormResult = () => {\n  PaymentPickerMock.getCreditCardId.mockResolvedValue(invalidFormResult)\n}\n\nconst errorResult: CreditCardIdResult = {\n  type: \"error\",\n  error: \"This is the description of an error.\",\n}\nexport const useErrorResult = () => {\n  PaymentPickerMock.getCreditCardId.mockResolvedValue(errorResult)\n}\n\nconst internalErrorResult: CreditCardIdResult = {\n  type: \"internal_error\",\n  error: \"This is the description of an internal error.\",\n}\nexport const useInternalErrorResult = () => {\n  PaymentPickerMock.getCreditCardId.mockResolvedValue(internalErrorResult)\n}\n\nexport const useThrownError = () => {\n  PaymentPickerMock.getCreditCardId.mockRejectedValue(new Error(\"Actual error\"))\n}\n\nconst PaymentPickerMock = {\n  getCreditCardId: jest.fn(\n    () => Promise.resolve(goodResult) as Promise<CreditCardIdResult>\n  ),\n}\n\nbeforeEach(() => {\n  PaymentPickerMock.getCreditCardId.mockReset()\n  useGoodResult()\n})\n\nexport const PaymentPickerFragmentContainer = ({ innerRef }) => {\n  innerRef.current = PaymentPickerMock\n  return createElement(\"div\")\n}\n"],"file":"PaymentPicker.js"}