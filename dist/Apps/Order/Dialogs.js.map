{"version":3,"sources":["../../../src/Apps/Order/Dialogs.tsx"],"names":["DialogContainer","props","show","heading","detail","primaryCta","text","action","onForceClose","Promise","resolve","setState","state","hide","r","setTimeout","title","message","confirmButtonText","cancelButtonText","accept","confirmed","reject","secondaryCta","onClose","supportEmail","continueButtonText","onContinue","onDismiss","Container","extractDialogHelpers","showErrorDialog","showConfirmDialog","injectDialog","Component","dialog","ConnectedModalDialog","dialogs"],"mappings":"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","sourcesContent":["import { Link } from \"@artsy/palette\"\nimport { ModalDialog, ModalDialogProps } from \"Components/Modal/ModalDialog\"\nimport React from \"react\"\nimport { Container, Subscribe } from \"unstated\"\n\ninterface DialogState {\n  props: ModalDialogProps\n  onForceClose: () => Promise<void>\n}\n\nexport class DialogContainer extends Container<DialogState> {\n  state: DialogState = {\n    props: {\n      show: false,\n      heading: null,\n      detail: null,\n      primaryCta: {\n        text: \"\",\n        action: () => void 0,\n      },\n    },\n    onForceClose: () => Promise.resolve(),\n  }\n\n  /**\n   * Hides the the currently-showing dialog\n   */\n  hide = () => {\n    this.setState({ props: { ...this.state.props, show: false } })\n  }\n\n  /**\n   * @param props the props for the ModalDialog\n   * @param onForceClose if someone else shows a modal while yours is open this\n   * will be called before your modal is closed. It can return a promise if you\n   * need to do async stuff before the next modal is shown.\n   * @returns a promise that is resolved after your modal is shown\n   */\n  show = async ({\n    props,\n    onForceClose,\n  }: {\n    props: ModalDialogProps\n    onForceClose: () => any\n  }) => {\n    if (this.state.props.show) {\n      // need to gracefully allow existing modal to close\n      await Promise.resolve(this.state.onForceClose())\n      this.hide()\n      // give a little pause so the user can see a transition between the two\n      await new Promise(r => setTimeout(r, 400))\n    }\n\n    return new Promise(resolve => {\n      this.setState({ props, onForceClose }, resolve)\n    })\n  }\n\n  showConfirmDialog = ({\n    title,\n    message,\n    confirmButtonText = \"Continue\",\n    cancelButtonText = \"Cancel\",\n  }: {\n    title: React.ReactNode\n    message: React.ReactNode\n    confirmButtonText?: string\n    cancelButtonText?: string\n  }): Promise<{ confirmed: boolean }> => {\n    return new Promise<{ confirmed: boolean }>(resolve => {\n      const accept = () => {\n        this.hide()\n        resolve({ confirmed: true })\n      }\n      const reject = () => {\n        this.hide()\n        resolve({ confirmed: false })\n      }\n\n      this.show({\n        props: {\n          show: true,\n          heading: title,\n          detail: message,\n          primaryCta: {\n            text: confirmButtonText,\n            action: accept,\n          },\n          secondaryCta: {\n            text: cancelButtonText,\n            action: reject,\n          },\n          onClose: reject,\n        },\n        onForceClose: reject,\n      })\n    })\n  }\n\n  /**\n   * returns a promise that resolves to `true` if the user clicked the\n   * continue button, and `false` if the modal was dismissed through other means.\n   */\n  showErrorDialog = ({\n    title = \"An error occurred\",\n    supportEmail = \"orders@artsy.net\",\n    message = (\n      <>\n        Something went wrong. Please try again or contact{\" \"}\n        <Link href={`mailto:${supportEmail}}`}>{supportEmail}</Link>.\n      </>\n    ),\n    continueButtonText = \"Continue\",\n  }: {\n    title?: string\n    message?: React.ReactNode\n    supportEmail?: string\n    continueButtonText?: string\n  } = {}): Promise<boolean> => {\n    return new Promise<boolean>(resolve => {\n      const onContinue = () => {\n        this.hide()\n        resolve(true)\n      }\n\n      const onDismiss = () => {\n        this.hide()\n        resolve(false)\n      }\n\n      this.show({\n        props: {\n          show: true,\n          heading: title,\n          detail: message,\n          primaryCta: {\n            text: continueButtonText,\n            action: onContinue,\n          },\n          onClose: onDismiss,\n        },\n        onForceClose: onDismiss,\n      })\n    })\n  }\n}\n\nconst extractDialogHelpers = ({\n  show,\n  hide,\n  showErrorDialog,\n  showConfirmDialog,\n}: DialogContainer) => ({\n  show,\n  hide,\n  showErrorDialog,\n  showConfirmDialog,\n})\n\nexport type Dialog = ReturnType<typeof extractDialogHelpers>\n\n/**\n * Injects the `dialog` prop into the given page component\n * @param Component\n */\nexport function injectDialog<R extends { dialog: Dialog }>(\n  Component: React.ComponentType<R>\n): React.ComponentType<Omit<R, \"dialog\">> {\n  return props => (\n    <Subscribe to={[DialogContainer]}>\n      {(dialog: DialogContainer) => (\n        <Component {...props as R} dialog={extractDialogHelpers(dialog)} />\n      )}\n    </Subscribe>\n  )\n}\n\nexport const ConnectedModalDialog = () => (\n  <Subscribe to={[DialogContainer]}>\n    {(dialogs: DialogContainer) => <ModalDialog {...dialogs.state.props} />}\n  </Subscribe>\n)\n"],"file":"Dialogs.js"}