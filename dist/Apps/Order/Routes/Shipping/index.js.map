{"version":3,"sources":["../../../../../src/Apps/Order/Routes/Shipping/index.tsx"],"names":["logger","ShippingRoute","props","state","args","action_type","Schema","ActionType","Click","subject","Subject","BNMOProvideShipping","BNMOArrangePickup","flow","type","shippingOption","order","requestedFulfillment","__typename","address","startingAddress","addressErrors","addressTouched","validateAddress","errors","hasErrors","setState","touchedAddress","setShipping","input","id","fulfillmentType","shipping","orderOrError","commerceSetShipping","error","handleSubmitError","router","push","dialog","showErrorDialog","key","variables","commitMutation","mutation","parsedData","e","JSON","parse","data","code","title","message","failure_code","name","addressLine1","city","region","country","postalCode","phoneNumber","usOrCanada","Object","keys","filter","length","isCommittingMutation","artwork","lineItems","edges","node","mode","offerFlowSteps","buyNowFlowSteps","pointerEvents","pickup_available","onSelectShippingOption","bind","onAddressChange","onlyShipsDomestically","shippingCountry","onContinueButtonPressed","emptyAddress","addressLine2","Component","ShippingFragmentContainer"],"mappings":"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","sourcesContent":["import {\n  BorderedRadio,\n  Button,\n  Col,\n  Collapse,\n  Flex,\n  RadioGroup,\n  Row,\n  Sans,\n  Spacer,\n} from \"@artsy/palette\"\nimport { Shipping_order } from \"__generated__/Shipping_order.graphql\"\nimport {\n  CommerceOrderFulfillmentTypeEnum,\n  ShippingOrderAddressUpdateMutation,\n} from \"__generated__/ShippingOrderAddressUpdateMutation.graphql\"\nimport { HorizontalPadding } from \"Apps/Components/HorizontalPadding\"\nimport {\n  Address,\n  AddressChangeHandler,\n  AddressErrors,\n  AddressForm,\n  AddressTouched,\n  emptyAddress,\n} from \"Apps/Order/Components/AddressForm\"\nimport { ArtworkSummaryItemFragmentContainer as ArtworkSummaryItem } from \"Apps/Order/Components/ArtworkSummaryItem\"\nimport {\n  buyNowFlowSteps,\n  offerFlowSteps,\n  OrderStepper,\n} from \"Apps/Order/Components/OrderStepper\"\nimport { TransactionDetailsSummaryItemFragmentContainer as TransactionDetailsSummaryItem } from \"Apps/Order/Components/TransactionDetailsSummaryItem\"\nimport { TwoColumnLayout } from \"Apps/Order/Components/TwoColumnLayout\"\nimport { Dialog, injectDialog } from \"Apps/Order/Dialogs\"\nimport {\n  CommitMutation,\n  injectCommitMutation,\n} from \"Apps/Order/Utils/commitMutation\"\nimport { validatePresence } from \"Apps/Order/Utils/formValidators\"\nimport { trackPageViewWrapper } from \"Apps/Order/Utils/trackPageViewWrapper\"\nimport { track } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { Router } from \"found\"\nimport { pick } from \"lodash\"\nimport React, { Component } from \"react\"\nimport { createFragmentContainer, graphql, RelayProp } from \"react-relay\"\nimport { get } from \"Utils/get\"\nimport createLogger from \"Utils/logger\"\nimport { Media } from \"Utils/Responsive\"\n\nexport interface ShippingProps {\n  order: Shipping_order\n  relay?: RelayProp\n  router: Router\n  dialog: Dialog\n  commitMutation: CommitMutation\n  isCommittingMutation: boolean\n}\n\nexport interface ShippingState {\n  shippingOption: CommerceOrderFulfillmentTypeEnum\n  address: Address\n  addressErrors: AddressErrors\n  addressTouched: AddressTouched\n}\n\nconst logger = createLogger(\"Order/Routes/Shipping/index.tsx\")\n\n@track()\nexport class ShippingRoute extends Component<ShippingProps, ShippingState> {\n  state: ShippingState = {\n    shippingOption: (this.props.order.requestedFulfillment &&\n    this.props.order.requestedFulfillment.__typename !== \"CommerceShip\"\n      ? \"PICKUP\"\n      : \"SHIP\") as CommerceOrderFulfillmentTypeEnum,\n    address: this.startingAddress,\n    addressErrors: {},\n    addressTouched: {},\n  }\n\n  get startingAddress() {\n    return {\n      ...emptyAddress,\n      country: \"US\",\n      // We need to pull out _only_ the values specified by the Address type,\n      // since our state will be used for Relay variables later on. The\n      // easiest way to do this is with the emptyAddress.\n      ...pick(this.props.order.requestedFulfillment, Object.keys(emptyAddress)),\n    }\n  }\n\n  get touchedAddress() {\n    return {\n      name: true,\n      country: true,\n      postalCode: true,\n      addressLine1: true,\n      addressLine2: true,\n      city: true,\n      region: true,\n      phoneNumber: true,\n    }\n  }\n\n  setShipping(variables: ShippingOrderAddressUpdateMutation[\"variables\"]) {\n    return this.props.commitMutation<ShippingOrderAddressUpdateMutation>({\n      variables,\n      mutation: graphql`\n        mutation ShippingOrderAddressUpdateMutation(\n          $input: CommerceSetShippingInput!\n        ) {\n          commerceSetShipping(input: $input) {\n            orderOrError {\n              ... on CommerceOrderWithMutationSuccess {\n                __typename\n                order {\n                  id\n                  state\n                  requestedFulfillment {\n                    __typename\n                    ... on CommerceShip {\n                      name\n                      addressLine1\n                      addressLine2\n                      city\n                      region\n                      country\n                      postalCode\n                      phoneNumber\n                    }\n                  }\n                }\n              }\n              ... on CommerceOrderWithMutationFailure {\n                error {\n                  type\n                  code\n                  data\n                }\n              }\n            }\n          }\n        }\n      `,\n    })\n  }\n\n  onContinueButtonPressed = async () => {\n    const { address, shippingOption } = this.state\n\n    if (shippingOption === \"SHIP\") {\n      const { errors, hasErrors } = this.validateAddress(this.state.address)\n      if (hasErrors) {\n        this.setState({\n          addressErrors: errors,\n          addressTouched: this.touchedAddress,\n        })\n        return\n      }\n    }\n\n    try {\n      const orderOrError = (await this.setShipping({\n        input: {\n          id: this.props.order.id,\n          fulfillmentType: shippingOption,\n          shipping: address,\n        },\n      })).commerceSetShipping.orderOrError\n\n      if (orderOrError.error) {\n        this.handleSubmitError(orderOrError.error)\n        return\n      }\n\n      this.props.router.push(`/orders/${this.props.order.id}/payment`)\n    } catch (error) {\n      logger.error(error)\n      this.props.dialog.showErrorDialog()\n    }\n  }\n\n  handleSubmitError(error: { code: string; data: string }) {\n    logger.error(error)\n    const parsedData = get(error, e => JSON.parse(e.data), {})\n    if (\n      error.code === \"missing_region\" ||\n      error.code === \"missing_country\" ||\n      error.code === \"missing_postal_code\"\n    ) {\n      this.props.dialog.showErrorDialog({\n        title: \"Invalid address\",\n        message:\n          \"There was an error processing your address. Please review and try again.\",\n      })\n    } else if (\n      error.code === \"unsupported_shipping_location\" &&\n      parsedData.failure_code === \"domestic_shipping_only\"\n    ) {\n      this.props.dialog.showErrorDialog({\n        title: \"Can't ship to that address\",\n        message:\n          \"This work can only be shipped to the continental United States.\",\n      })\n    } else {\n      this.props.dialog.showErrorDialog()\n    }\n  }\n\n  private validateAddress(address: Address) {\n    const {\n      name,\n      addressLine1,\n      city,\n      region,\n      country,\n      postalCode,\n      phoneNumber,\n    } = address\n    const usOrCanada = country === \"US\" || country === \"CA\"\n    const errors = {\n      name: validatePresence(name),\n      addressLine1: validatePresence(addressLine1),\n      city: validatePresence(city),\n      region: usOrCanada && validatePresence(region),\n      country: validatePresence(country),\n      postalCode: usOrCanada && validatePresence(postalCode),\n      phoneNumber: validatePresence(phoneNumber),\n    }\n    const hasErrors = Object.keys(errors).filter(key => errors[key]).length > 0\n\n    return {\n      errors,\n      hasErrors,\n    }\n  }\n\n  onAddressChange: AddressChangeHandler = (address, key) => {\n    const { errors } = this.validateAddress(address)\n    this.setState({\n      address,\n      addressErrors: {\n        ...this.state.addressErrors,\n        ...errors,\n      },\n      addressTouched: {\n        ...this.state.addressTouched,\n        [key]: true,\n      },\n    })\n  }\n\n  @track((props, state, args) => ({\n    action_type: Schema.ActionType.Click,\n    subject:\n      args[0] === \"SHIP\"\n        ? Schema.Subject.BNMOProvideShipping\n        : Schema.Subject.BNMOArrangePickup,\n    flow: \"buy now\",\n    type: \"button\",\n  }))\n  onSelectShippingOption(shippingOption: CommerceOrderFulfillmentTypeEnum) {\n    this.setState({ shippingOption })\n  }\n\n  render() {\n    const { order, isCommittingMutation } = this.props\n    const { address, addressErrors, addressTouched } = this.state\n    const artwork = get(\n      this.props,\n      props => order.lineItems.edges[0].node.artwork\n    )\n\n    return (\n      <>\n        <HorizontalPadding px={[0, 4]}>\n          <Row>\n            <Col>\n              <OrderStepper\n                currentStep=\"Shipping\"\n                steps={\n                  order.mode === \"OFFER\" ? offerFlowSteps : buyNowFlowSteps\n                }\n              />\n            </Col>\n          </Row>\n        </HorizontalPadding>\n\n        <HorizontalPadding>\n          <TwoColumnLayout\n            Content={\n              <Flex\n                flexDirection=\"column\"\n                style={isCommittingMutation ? { pointerEvents: \"none\" } : {}}\n              >\n                {/* TODO: Make RadioGroup generic for the allowed values,\n                  which could also ensure the children only use\n                  allowed values. */}\n                {artwork.pickup_available && (\n                  <>\n                    <RadioGroup\n                      onSelect={this.onSelectShippingOption.bind(this)}\n                      defaultValue={this.state.shippingOption}\n                    >\n                      <BorderedRadio\n                        value=\"SHIP\"\n                        label=\"Add shipping address\"\n                      />\n\n                      <BorderedRadio\n                        value=\"PICKUP\"\n                        label=\"Arrange for pickup (free)\"\n                      >\n                        <Collapse open={this.state.shippingOption === \"PICKUP\"}>\n                          <Sans size=\"2\" color=\"black60\">\n                            After your order is confirmed, a specialist will\n                            contact you within 2 business days to coordinate\n                            pickup.\n                          </Sans>\n                        </Collapse>\n                      </BorderedRadio>\n                    </RadioGroup>\n                    <Spacer mb={3} />\n                  </>\n                )}\n\n                <Collapse\n                  open={\n                    !artwork.pickup_available ||\n                    this.state.shippingOption === \"SHIP\"\n                  }\n                >\n                  <AddressForm\n                    value={address}\n                    errors={addressErrors}\n                    touched={addressTouched}\n                    onChange={this.onAddressChange}\n                    domesticOnly={artwork.onlyShipsDomestically}\n                    shippingCountry={artwork.shippingCountry}\n                  />\n                </Collapse>\n\n                <Media greaterThan=\"xs\">\n                  <Button\n                    onClick={this.onContinueButtonPressed}\n                    loading={isCommittingMutation}\n                    size=\"large\"\n                    width=\"100%\"\n                  >\n                    Continue\n                  </Button>\n                </Media>\n              </Flex>\n            }\n            Sidebar={\n              <Flex flexDirection=\"column\">\n                <Flex flexDirection=\"column\">\n                  <ArtworkSummaryItem order={order} />\n                  <TransactionDetailsSummaryItem order={order} />\n                </Flex>\n                <Spacer mb={[2, 3]} />\n                <Media at=\"xs\">\n                  <Spacer mb={3} />\n                  <Button\n                    onClick={this.onContinueButtonPressed}\n                    loading={isCommittingMutation}\n                    size=\"large\"\n                    width=\"100%\"\n                  >\n                    Continue\n                  </Button>\n                </Media>\n              </Flex>\n            }\n          />\n        </HorizontalPadding>\n      </>\n    )\n  }\n}\n\nexport const ShippingFragmentContainer = createFragmentContainer(\n  trackPageViewWrapper(injectCommitMutation(injectDialog(ShippingRoute))),\n  {\n    order: graphql`\n      fragment Shipping_order on CommerceOrder {\n        id\n        mode\n        state\n        requestedFulfillment {\n          __typename\n          ... on CommerceShip {\n            name\n            addressLine1\n            addressLine2\n            city\n            region\n            country\n            postalCode\n            phoneNumber\n          }\n        }\n        lineItems {\n          edges {\n            node {\n              artwork {\n                id\n                pickup_available\n                onlyShipsDomestically\n                shippingCountry\n              }\n            }\n          }\n        }\n        ...ArtworkSummaryItem_order\n        ...TransactionDetailsSummaryItem_order\n      }\n    `,\n  }\n)\n"],"file":"index.js"}