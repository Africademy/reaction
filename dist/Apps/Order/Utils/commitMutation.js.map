{"version":3,"sources":["../../../../src/Apps/Order/Utils/commitMutation.tsx"],"names":["MutationContext","React","createContext","isCommittingMutation","commitMutation","Error","ProvideMutationContext","variables","mutation","state","setState","Promise","resolve","reject","props","relayEnvironment","onCompleted","data","errors","join","onError","e","children","Component","injectCommitMutation","SystemContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAMA,eAAe,GAAGC,eAAMC,aAAN,CAAyC;AAC/DC,EAAAA,oBAAoB,EAAE,KADyC;AAE/DC,EAAAA,cAF+D,4BAE9C;AACf,UAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD;AAJ8D,CAAzC,CAAxB;;IAOMC,sB;;;;;;;;;;;;;;;;;;gEAImC,E;;4DAC/B;AAAEH,MAAAA,oBAAoB,EAAE;AAAxB,K;;qEACyB,gBAA6B;AAAA,UAA1BI,SAA0B,QAA1BA,SAA0B;AAAA,UAAfC,QAAe,QAAfA,QAAe;;AAC5D,UAAI,MAAKC,KAAL,CAAWN,oBAAf,EAAqC;AACnC,cAAM,IAAIE,KAAJ,CACJ,6DADI,CAAN;AAGD;;AACD,YAAKK,QAAL,CAAc;AAAEP,QAAAA,oBAAoB,EAAE;AAAxB,OAAd;;AACA,aAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AACF,0CAAoB,MAAKC,KAAL,CAAWC,gBAA/B,EAAiD;AAC/CP,YAAAA,QAAQ,EAARA,QAD+C;AAE/CD,YAAAA,SAAS,EAATA,SAF+C;AAG/CS,YAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,MAAP,EAAkB;AAC7B,oBAAKR,QAAL,CAAc;AAAEP,gBAAAA,oBAAoB,EAAE;AAAxB,eAAd,EAA+C,YAAM;AACnD,oBAAIe,MAAJ,EAAY;AACVL,kBAAAA,MAAM,CAAC,IAAIR,KAAJ,CAAUa,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAV,CAAD,CAAN;AACA;AACD;;AACDP,gBAAAA,OAAO,CAACK,IAAD,CAAP;AACD,eAND;AAOD,aAX8C;AAY/CG,YAAAA,OAAO,EAAE,iBAAAC,CAAC,EAAI;AACZ,oBAAKX,QAAL,CAAc;AAAEP,gBAAAA,oBAAoB,EAAE;AAAxB,eAAd,EAA+C,YAAM;AACnDU,gBAAAA,MAAM,CAACQ,CAAD,CAAN;AACD,eAFD;AAGD;AAhB8C,WAAjD;AAkBD,SAnBD,CAmBE,OAAOA,CAAP,EAAU;AACVR,UAAAA,MAAM,CAACQ,CAAD,CAAN;AACD;AACF,OAvBM,CAAP;AAwBD,K;;;;;;;6BAEQ;AACP,aACE,6BAAC,eAAD,CAAiB,QAAjB;AACE,QAAA,KAAK,EAAE;AACLjB,UAAAA,cAAc,EAAE,KAAKA,cADhB;AAELD,UAAAA,oBAAoB,EAAE,KAAKM,KAAL,CAAWN;AAF5B;AADT,SAMG,KAAKW,KAAL,CAAWQ,QANd,CADF;AAUD;;;;EAlDkCrB,eAAMsB,S;;AAqDpC,SAASC,oBAAT,CACLD,SADK,EAEwD;AAC7D,SAAO,UAAAT,KAAK,EAAI;AAAA,sBACe,uBAAWW,oBAAX,CADf;AAAA,QACNV,gBADM,eACNA,gBADM;;AAEd,WACE,6BAAC,sBAAD;AAAwB,MAAA,gBAAgB,EAAEA;AAA1C,OACE,6BAAC,eAAD,CAAiB,QAAjB,QACG;AAAA,UAAGZ,oBAAH,SAAGA,oBAAH;AAAA,UAAyBC,cAAzB,SAAyBA,cAAzB;AAAA,aACC,6BAAC,SAAD;AACE,QAAA,oBAAoB,EAAED,oBADxB;AAEE,QAAA,cAAc,EAAEC;AAFlB,SAGMU,KAHN,EADD;AAAA,KADH,CADF,CADF;AAaD,GAfD;AAgBD","sourcesContent":["import { SystemContext } from \"Artsy\"\nimport React, { useContext } from \"react\"\nimport {\n  commitMutation as relayCommitMutation,\n  GraphQLTaggedNode,\n} from \"react-relay\"\nimport { Environment, OperationBase } from \"relay-runtime\"\n\nexport type CommitMutation = <MutationType extends OperationBase>(args: {\n  mutation: GraphQLTaggedNode\n  variables: MutationType[\"variables\"]\n}) => Promise<MutationType[\"response\"]>\n\ninterface CommitMutationProps {\n  commitMutation: CommitMutation\n  isCommittingMutation: boolean\n}\n\nconst MutationContext = React.createContext<CommitMutationProps>({\n  isCommittingMutation: false,\n  commitMutation() {\n    throw new Error(\"no mutation context in react tree\")\n  },\n})\n\nclass ProvideMutationContext extends React.Component<\n  { relayEnvironment: Environment },\n  { isCommittingMutation: boolean }\n> {\n  execQueue: Array<() => Promise<any>> = []\n  state = { isCommittingMutation: false }\n  commitMutation: CommitMutation = ({ variables, mutation }) => {\n    if (this.state.isCommittingMutation) {\n      throw new Error(\n        \"Mutliple simulataneous mutations is not currently supported\"\n      )\n    }\n    this.setState({ isCommittingMutation: true })\n    return new Promise((resolve, reject) => {\n      try {\n        relayCommitMutation(this.props.relayEnvironment, {\n          mutation,\n          variables,\n          onCompleted: (data, errors) => {\n            this.setState({ isCommittingMutation: false }, () => {\n              if (errors) {\n                reject(new Error(errors.join(\"\\n\")))\n                return\n              }\n              resolve(data)\n            })\n          },\n          onError: e => {\n            this.setState({ isCommittingMutation: false }, () => {\n              reject(e)\n            })\n          },\n        })\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  render() {\n    return (\n      <MutationContext.Provider\n        value={{\n          commitMutation: this.commitMutation,\n          isCommittingMutation: this.state.isCommittingMutation,\n        }}\n      >\n        {this.props.children}\n      </MutationContext.Provider>\n    )\n  }\n}\n\nexport function injectCommitMutation<Props extends CommitMutationProps>(\n  Component: React.ComponentType<Props>\n): React.ComponentType<Omit<Props, keyof CommitMutationProps>> {\n  return props => {\n    const { relayEnvironment } = useContext(SystemContext)\n    return (\n      <ProvideMutationContext relayEnvironment={relayEnvironment}>\n        <MutationContext.Consumer>\n          {({ isCommittingMutation, commitMutation }) => (\n            <Component\n              isCommittingMutation={isCommittingMutation}\n              commitMutation={commitMutation}\n              {...props as Props}\n            />\n          )}\n        </MutationContext.Consumer>\n      </ProvideMutationContext>\n    )\n  }\n}\n"],"file":"commitMutation.js"}