{"version":3,"sources":["../../../../src/Apps/Order/Utils/formValidators.tsx"],"names":["validatePresence","value","undefined","trim","validateAddress","address","name","addressLine1","city","region","country","postalCode","usOrCanada","errors","hasErrors","Object","keys","filter","key","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAGO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAA2B;AACzD,MAAIA,KAAK,KAAKC,SAAV,IAAuB,uBAAQD,KAAK,CAACE,IAAN,EAAR,CAA3B,EAAkD;AAChD,WAAO,wBAAP;AACD;;AACD,SAAO,IAAP;AACD,CALM;;;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAsB;AAAA,MAC3CC,IAD2C,GACeD,OADf,CAC3CC,IAD2C;AAAA,MACrCC,YADqC,GACeF,OADf,CACrCE,YADqC;AAAA,MACvBC,IADuB,GACeH,OADf,CACvBG,IADuB;AAAA,MACjBC,MADiB,GACeJ,OADf,CACjBI,MADiB;AAAA,MACTC,OADS,GACeL,OADf,CACTK,OADS;AAAA,MACAC,UADA,GACeN,OADf,CACAM,UADA;AAEnD,MAAMC,UAAU,GAAGF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,IAAnD;AACA,MAAMG,MAAM,GAAG;AACbP,IAAAA,IAAI,EAAEN,gBAAgB,CAACM,IAAD,CADT;AAEbC,IAAAA,YAAY,EAAEP,gBAAgB,CAACO,YAAD,CAFjB;AAGbC,IAAAA,IAAI,EAAER,gBAAgB,CAACQ,IAAD,CAHT;AAIbC,IAAAA,MAAM,EAAEG,UAAU,IAAIZ,gBAAgB,CAACS,MAAD,CAJzB;AAKbC,IAAAA,OAAO,EAAEV,gBAAgB,CAACU,OAAD,CALZ;AAMbC,IAAAA,UAAU,EAAEC,UAAU,IAAIZ,gBAAgB,CAACW,UAAD;AAN7B,GAAf;AAQA,MAAMG,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,CAA2B,UAAAC,GAAG;AAAA,WAAIL,MAAM,CAACK,GAAD,CAAV;AAAA,GAA9B,EAA+CC,MAA/C,GAAwD,CAA1E;AAEA,SAAO;AACLN,IAAAA,MAAM,EAANA,MADK;AAELC,IAAAA,SAAS,EAATA;AAFK,GAAP;AAID,CAjBM","sourcesContent":["import { Address } from \"Apps/Order/Components/AddressForm\"\nimport { isEmpty } from \"lodash\"\n\nexport const validatePresence = (value: string): string => {\n  if (value === undefined || isEmpty(value.trim())) {\n    return \"This field is required\"\n  }\n  return null\n}\n\nexport const validateAddress = (address: Address) => {\n  const { name, addressLine1, city, region, country, postalCode } = address\n  const usOrCanada = country === \"US\" || country === \"CA\"\n  const errors = {\n    name: validatePresence(name),\n    addressLine1: validatePresence(addressLine1),\n    city: validatePresence(city),\n    region: usOrCanada && validatePresence(region),\n    country: validatePresence(country),\n    postalCode: usOrCanada && validatePresence(postalCode),\n  }\n  const hasErrors = Object.keys(errors).filter(key => errors[key]).length > 0\n\n  return {\n    errors,\n    hasErrors,\n  }\n}\n"],"file":"formValidators.js"}