{"version":3,"sources":["../../../src/Apps/Order/routes.tsx"],"names":["routes","path","Component","OrderApp","query","render","props","location","order","redirect","redirects","pathname","replace","process","env","NODE_ENV","console","error","reason","RedirectException","children","RespondRoute","onTransition","confirmRouteExit","cacheConfig","force","OfferRoute","ShippingRoute","PaymentRoute","NewPaymentRoute","CounterRoute","ReviewRoute","AcceptRoute","RejectRoute","StatusRoute","Redirect","from","to"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAMA;;;;AADA;AAWA;AAEO,IAAMA,MAAqB,GAAG,CACnC;AACEC,EAAAA,IAAI,EAAE,sBADR;AAEEC,EAAAA,SAAS,EAAEC,kBAFb;AAGE;AACA;AACAC,EAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,GALP;AAgBEC,EAAAA,MAAM,EAAE,sBAA0B;AAAA,QAAvBH,SAAuB,QAAvBA,SAAuB;AAAA,QAAZI,KAAY,QAAZA,KAAY;;AAChC,QAAIJ,SAAS,IAAII,KAAjB,EAAwB;AAAA,kBACMA,KADN;AAAA,UACdC,QADc,SACdA,QADc;AAAA,UACJC,KADI,SACJA,KADI;;AAGtB,UAAIA,KAAJ,EAAW;AACT,YAAMC,QAAQ,GAAG,8BACfC,oBADe,EAEfH,QAAQ,CAACI,QAAT,CAAkBC,OAAlB,CAA0B,oBAA1B,EAAgD,EAAhD,CAFe,EAGf;AAAEJ,UAAAA,KAAK,EAALA;AAAF,SAHe,CAAjB;;AAKA,YAAIC,QAAQ,KAAK,IAAjB,EAAuB;AACrB,cAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,YAAAA,OAAO,CAACC,KAAR,4BACsBV,QAAQ,CAACI,QAD/B,iBAEIF,QAAQ,CAACR,IAFb,uBAGeQ,QAAQ,CAACS,MAHxB;AAKD;;AACD,gBAAM,IAAIC,wBAAJ,CAAsBV,QAAQ,CAACR,IAA/B,CAAN;AACD;AACF;;AAED,aAAO,oBAAC,SAAD,EAAeK,KAAf,CAAP;AACD;AACF,GAxCH;AAyCEc,EAAAA,QAAQ,EAAE,CACR;AACEnB,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,SAAS,EAAEmB,iCAFb;AAGEC,IAAAA,YAAY,EAAEC,2BAHhB;AAIEnB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAJP;AAWEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAXf,GADQ,EAgBR;AACExB,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,SAAS,EAAEwB,6BAFb;AAGEJ,IAAAA,YAAY,EAAEC,2BAHhB;AAIEnB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAJP;AAWEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAXf,GAhBQ,EA+BR;AACExB,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,SAAS,EAAEyB,mCAFb;AAGEL,IAAAA,YAAY,EAAEC,2BAHhB;AAIEnB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAJP;AAWEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAXf,GA/BQ,EA8CR;AACExB,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,SAAS,EAAE0B,iCAFb;AAGEN,IAAAA,YAAY,EAAEC,2BAHhB;AAIEnB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAJP;AAcEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAdf,GA9CQ,EAgER;AACExB,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,SAAS,EAAE2B,uCAFb;AAGEP,IAAAA,YAAY,EAAEC,2BAHhB;AAIEnB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAJP;AAcEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAdf,GAhEQ,EAkFR;AACExB,IAAAA,IAAI,EAAE,gBADR;AAEEC,IAAAA,SAAS,EAAE4B,iCAFb;AAGER,IAAAA,YAAY,EAAEC,2BAHhB;AAIEnB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAJP;AAWEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAXf,GAlFQ,EAiGR;AACExB,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,SAAS,EAAE6B,+BAFb;AAGET,IAAAA,YAAY,EAAEC,2BAHhB;AAIEnB,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAJP;AAWEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAXf,GAjGQ,EAgHR;AACExB,IAAAA,IAAI,EAAE,eADR;AAEEC,IAAAA,SAAS,EAAE8B,+BAFb;AAGE5B,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAHP;AAUEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAVf,GAhHQ,EA8HR;AACExB,IAAAA,IAAI,EAAE,gBADR;AAEEC,IAAAA,SAAS,EAAE+B,+BAFb;AAGE7B,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHP,GA9HQ,EAyIR;AACEH,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,SAAS,EAAEgC,+BAFb;AAGE9B,IAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAHP;AAUEoB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AADI;AAVf,GAzIQ,EAuJR,IAAIU,eAAJ,CAAa;AACX;AACAC,IAAAA,IAAI,EAAE,GAFK;AAGXC,IAAAA,EAAE,EAAE;AAHO,GAAb,CAvJQ,EA4JR;AACEpC,IAAAA,IAAI,EAAE,GADR;AAEEC,IAAAA,SAAS,EAAE,mBAAAI,KAAK,EAAI;AAClB,aAAO,oBAAC,oBAAD;AAAW,QAAA,IAAI,EAAE;AAAjB,QAAP;AACD;AAJH,GA5JQ;AAzCZ,CADmC,CAA9B","sourcesContent":["import { getRedirect } from \"Apps/Order/getRedirect\"\nimport { confirmRouteExit, redirects } from \"Apps/Order/redirects\"\nimport { Redirect, RedirectException, RouteConfig } from \"found\"\nimport * as React from \"react\"\nimport { graphql } from \"react-relay\"\nimport { OrderApp } from \"./OrderApp\"\n\nimport { AcceptFragmentContainer as AcceptRoute } from \"Apps/Order/Routes/Accept\"\nimport { NewPaymentFragmentContainer as NewPaymentRoute } from \"Apps/Order/Routes/NewPayment\"\nimport { OfferFragmentContainer as OfferRoute } from \"Apps/Order/Routes/Offer\"\nimport { PaymentFragmentContainer as PaymentRoute } from \"Apps/Order/Routes/Payment\"\nimport { RejectFragmentContainer as RejectRoute } from \"Apps/Order/Routes/Reject\"\nimport { RespondFragmentContainer as RespondRoute } from \"Apps/Order/Routes/Respond\"\nimport { ReviewFragmentContainer as ReviewRoute } from \"Apps/Order/Routes/Review\"\nimport { ShippingFragmentContainer as ShippingRoute } from \"Apps/Order/Routes/Shipping\"\nimport { StatusFragmentContainer as StatusRoute } from \"Apps/Order/Routes/Status\"\nimport { CounterFragmentContainer as CounterRoute } from \"./Routes/Counter\"\n\n// @ts-ignore\nimport { ComponentClass, StatelessComponent } from \"react\"\n\n// @ts-ignore\nimport { ErrorPage } from \"Components/ErrorPage\"\n// @ts-ignore\nimport { PaymentProps } from \"./Routes/Payment\"\n// @ts-ignore\nimport { ReviewProps } from \"./Routes/Review\"\n// @ts-ignore\nimport { ShippingProps } from \"./Routes/Shipping\"\n// @ts-ignore\nimport { StatusProps } from \"./Routes/Status\"\n\n// FIXME:\n// * `render` functions requires casting\nexport const routes: RouteConfig[] = [\n  {\n    path: \"/order(2|s)/:orderID\",\n    Component: OrderApp,\n    // TODO: Better support `@principalField` in Metaphysics.\n    // This currently only works because of the `order` field alias.\n    query: graphql`\n      query routes_OrderQuery($orderID: ID!) {\n        me {\n          name\n        }\n        order: commerceOrder(id: $orderID) @principalField {\n          ...redirects_order @relay(mask: false)\n          ...OrderApp_order @relay(mask: false)\n        }\n      }\n    `,\n    render: ({ Component, props }) => {\n      if (Component && props) {\n        const { location, order } = props as any\n\n        if (order) {\n          const redirect = getRedirect(\n            redirects,\n            location.pathname.replace(/order(2|s)\\/[^\\/]+/, \"\"),\n            { order }\n          )\n          if (redirect !== null) {\n            if (process.env.NODE_ENV === \"development\") {\n              console.error(\n                `Redirecting from ${location.pathname} to ${\n                  redirect.path\n                } because '${redirect.reason}'`\n              )\n            }\n            throw new RedirectException(redirect.path)\n          }\n        }\n\n        return <Component {...props} />\n      }\n    },\n    children: [\n      {\n        path: \"respond\",\n        Component: RespondRoute,\n        onTransition: confirmRouteExit,\n        query: graphql`\n          query routes_RespondQuery($orderID: ID!) {\n            order: commerceOrder(id: $orderID) {\n              ...Respond_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      {\n        path: \"offer\",\n        Component: OfferRoute,\n        onTransition: confirmRouteExit,\n        query: graphql`\n          query routes_OfferQuery($orderID: ID!) {\n            order: commerceOrder(id: $orderID) {\n              ...Offer_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      {\n        path: \"shipping\",\n        Component: ShippingRoute,\n        onTransition: confirmRouteExit,\n        query: graphql`\n          query routes_ShippingQuery($orderID: ID!) {\n            order: commerceOrder(id: $orderID) {\n              ...Shipping_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      {\n        path: \"payment\",\n        Component: PaymentRoute,\n        onTransition: confirmRouteExit,\n        query: graphql`\n          query routes_PaymentQuery($orderID: ID!) {\n            me {\n              ...Payment_me\n            }\n            order: commerceOrder(id: $orderID) {\n              ...Payment_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      {\n        path: \"payment/new\",\n        Component: NewPaymentRoute,\n        onTransition: confirmRouteExit,\n        query: graphql`\n          query routes_NewPaymentQuery($orderID: ID!) {\n            me {\n              ...NewPayment_me\n            }\n            order: commerceOrder(id: $orderID) {\n              ...NewPayment_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      {\n        path: \"review/counter\",\n        Component: CounterRoute,\n        onTransition: confirmRouteExit,\n        query: graphql`\n          query routes_CounterQuery($orderID: ID!) {\n            order: commerceOrder(id: $orderID) {\n              ...Counter_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      {\n        path: \"review\",\n        Component: ReviewRoute,\n        onTransition: confirmRouteExit,\n        query: graphql`\n          query routes_ReviewQuery($orderID: ID!) {\n            order: commerceOrder(id: $orderID) {\n              ...Review_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      {\n        path: \"review/accept\",\n        Component: AcceptRoute,\n        query: graphql`\n          query routes_AcceptQuery($orderID: ID!) {\n            order: commerceOrder(id: $orderID) {\n              ...Accept_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      {\n        path: \"review/decline\",\n        Component: RejectRoute,\n        query: graphql`\n          query routes_RejectQuery($orderID: ID!) {\n            order: commerceOrder(id: $orderID) {\n              ...Reject_order\n            }\n          }\n        `,\n      },\n      {\n        path: \"status\",\n        Component: StatusRoute,\n        query: graphql`\n          query routes_StatusQuery($orderID: ID!) {\n            order: commerceOrder(id: $orderID) {\n              ...Status_order\n            }\n          }\n        `,\n        cacheConfig: {\n          force: true,\n        },\n      },\n      new Redirect({\n        // For now, redirect the empty route to the shipping page\n        from: \"/\",\n        to: \"/orders/:orderID/shipping\",\n      }) as any,\n      {\n        path: \"*\",\n        Component: props => {\n          return <ErrorPage code={404} />\n        },\n      },\n    ],\n  },\n]\n"],"file":"routes.js"}