{"version":3,"sources":["../../../../src/Apps/Search/Components/SendFeedback.tsx"],"names":["logger","SendFeedbackForm","submitted","message","name","email","triggeredValidation","relayEnvironment","props","state","mutation","variables","input","optimisticUpdater","setTimeout","setState","onCompleted","data","feedbackOrError","sendFeedback","mutationError","error","ErrorWithMetadata","type","value","currentTarget","errorForText","errorForEmail","match","EMAIL_REGEX","key","text","user","renderPersonalInfoInputs","renderFeedbackTextArea","hasErrors","handleClick","renderSuccess","renderFeedbackForm","React","Component","FeedbackContainer","Flex","FeedbackTextAreaContainer","Box","LoggedOutInputContainer","SendFeedback"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  CheckCircleIcon,\n  color,\n  Flex,\n  Input,\n  Serif,\n  TextArea,\n} from \"@artsy/palette\"\nimport { SendFeedbackSearchResultsMutation } from \"__generated__/SendFeedbackSearchResultsMutation.graphql\"\nimport { SystemContextProps } from \"Artsy\"\nimport { withSystemContext } from \"Artsy\"\nimport { EMAIL_REGEX } from \"Components/Publishing/Constants\"\nimport React from \"react\"\nimport { commitMutation, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\nimport { ErrorWithMetadata } from \"Utils/errors\"\nimport createLogger from \"Utils/logger\"\n\ninterface Inputs {\n  message: string\n  name: string\n  email: string\n}\n\ninterface State extends Inputs {\n  submitted: boolean\n  triggeredValidation: boolean\n}\n\nconst logger = createLogger(\"Apps/Search/Components/SendFeedback.tsx\")\n\nclass SendFeedbackForm extends React.Component<SystemContextProps, State> {\n  state = {\n    submitted: false,\n    message: \"\",\n    name: \"\",\n    email: \"\",\n    triggeredValidation: false,\n  }\n\n  handleClick() {\n    const { relayEnvironment } = this.props\n    const { message, name, email } = this.state\n\n    commitMutation<SendFeedbackSearchResultsMutation>(relayEnvironment, {\n      mutation: graphql`\n        mutation SendFeedbackSearchResultsMutation(\n          $input: SendFeedbackMutationInput!\n        ) {\n          sendFeedback(input: $input) {\n            feedbackOrError {\n              ... on SendFeedbackMutationSuccess {\n                feedback {\n                  message\n                }\n              }\n              ... on SendFeedbackMutationFailure {\n                mutationError {\n                  type\n                  message\n                  detail\n                }\n              }\n            }\n          }\n        }\n      `,\n      variables: {\n        input: { message, email, name },\n      },\n      // Add slight delay to make UX seem a bit nicer\n      optimisticUpdater: () => {\n        setTimeout(\n          () =>\n            this.setState({\n              submitted: true,\n            }),\n          500\n        )\n      },\n      onCompleted: data => {\n        const {\n          sendFeedback: { feedbackOrError },\n        } = data\n        if (feedbackOrError.mutationError) {\n          logger.error(\n            new ErrorWithMetadata(\n              feedbackOrError.mutationError.type,\n              feedbackOrError.mutationError.message\n            )\n          )\n        } else {\n          this.setState({\n            submitted: true,\n          })\n        }\n      },\n    })\n  }\n\n  renderPersonalInfoInputs() {\n    return (\n      <LoggedOutInputContainer mt={2} alignContent=\"space-between\">\n        <Box mr={1} width=\"50%\">\n          <Input\n            name=\"name\"\n            placeholder=\"Your name\"\n            onChange={({ currentTarget: { value } }) => {\n              this.setState({ name: value })\n            }}\n            required\n            error={this.errorForText(\"name\")}\n          />\n        </Box>\n        <Box width=\"50%\">\n          <Input\n            name=\"email\"\n            placeholder=\"Email address\"\n            onChange={({ currentTarget: { value } }) => {\n              this.setState({ email: value })\n            }}\n            required\n            error={this.errorForEmail()}\n          />\n        </Box>\n      </LoggedOutInputContainer>\n    )\n  }\n\n  errorForEmail() {\n    const { email, triggeredValidation } = this.state\n    if (!triggeredValidation) return\n    if (!email) return \"Cannot leave field blank\"\n    if (!email.match(EMAIL_REGEX)) return \"Invalid email.\"\n  }\n\n  errorForText(key: \"message\" | \"name\") {\n    const { triggeredValidation } = this.state\n    if (!triggeredValidation) return\n    const text = this.state[key]\n    if (!text) return \"Cannot leave field blank\"\n  }\n\n  hasErrors(): boolean {\n    const { user } = this.props\n    if (user) return !!this.errorForText(\"message\")\n\n    return !!(\n      this.errorForEmail() ||\n      this.errorForText(\"message\") ||\n      this.errorForText(\"name\")\n    )\n  }\n\n  renderFeedbackTextArea() {\n    return (\n      <FeedbackTextAreaContainer my={3}>\n        <TextArea\n          onChange={({ value }) => {\n            this.setState({ message: value })\n          }}\n          placeholder=\"Your comments here\"\n          required\n          error={this.errorForText(\"message\")}\n        />\n      </FeedbackTextAreaContainer>\n    )\n  }\n\n  renderSuccess() {\n    return (\n      <>\n        <CheckCircleIcon />\n        <Box mt={1} textAlign=\"center\">\n          <Serif size=\"4\">Your message has been sent!</Serif>\n        </Box>\n        <Box>\n          <Serif size=\"2\">Thank you for helping to improve Artsy.</Serif>\n        </Box>\n      </>\n    )\n  }\n\n  renderFeedbackForm() {\n    const { user } = this.props\n    return (\n      <>\n        <Box textAlign=\"center\">\n          <Serif size=\"5\">Your feedback is important to us.</Serif>\n        </Box>\n        <Box>\n          <Serif size=\"3\">\n            Tell us how we can improve and help you find what you are looking\n            for.\n          </Serif>\n        </Box>\n        {!user ? this.renderPersonalInfoInputs() : null}\n        {this.renderFeedbackTextArea()}\n        <Button\n          onClick={() => {\n            this.setState({ triggeredValidation: true }, () => {\n              if (this.hasErrors()) return\n              this.handleClick()\n            })\n          }}\n        >\n          Submit\n        </Button>\n      </>\n    )\n  }\n\n  render() {\n    const { submitted } = this.state\n\n    return (\n      <Box bg={color(\"black5\")} p={6} mt={3}>\n        <FeedbackContainer\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          width=\"100%\"\n        >\n          {submitted ? this.renderSuccess() : this.renderFeedbackForm()}\n        </FeedbackContainer>\n      </Box>\n    )\n  }\n}\n\nconst FeedbackContainer = styled(Flex)`\n  min-height: 212px;\n`\n\nconst FeedbackTextAreaContainer = styled(Box)`\n  max-width: 484px;\n  width: 100%;\n`\n\nconst LoggedOutInputContainer = styled(Flex)`\n  max-width: 484px;\n  width: 100%;\n`\n\nexport const SendFeedback = withSystemContext(SendFeedbackForm)\n"],"file":"SendFeedback.js"}