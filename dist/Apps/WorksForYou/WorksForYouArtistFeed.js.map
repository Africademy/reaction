{"version":3,"sources":["../../../src/Apps/WorksForYou/WorksForYouArtistFeed.tsx"],"names":["PageSize","WorksForYouArtistFeed","loading","hasMore","props","viewer","artist","artworks_connection","pageInfo","hasNextPage","state","setState","relay","loadMore","error","console","forSale","avatarImageUrl","p","image","resized","url","meta","counts","for_sale_artworks","toLocaleString","artworks","name","href","loadMoreArtworks","user","React","Component","WorksForYouArtistFeedPaginationContainer","direction","getConnectionFromProps","getFragmentVariables","prevVars","totalCount","count","getVariables","_props","fragmentVariables","cursor","query","SpinnerContainer","styled","div"],"mappings":"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","sourcesContent":["import { EntityHeader, Spacer, Spinner } from \"@artsy/palette\"\nimport { WorksForYouArtistFeed_viewer } from \"__generated__/WorksForYouArtistFeed_viewer.graphql\"\nimport { SystemContextProps } from \"Artsy\"\nimport ArtworkGrid from \"Components/ArtworkGrid\"\nimport * as React from \"react\"\nimport styled from \"styled-components\"\nimport { get } from \"Utils/get\"\n\nimport {\n  ConnectionData,\n  createPaginationContainer,\n  graphql,\n  RelayPaginationProp,\n} from \"react-relay\"\n\ninterface Props extends SystemContextProps {\n  relay?: RelayPaginationProp\n  viewer: WorksForYouArtistFeed_viewer\n  artistID: string\n  forSale?: boolean\n}\n\ninterface State {\n  loading: boolean\n}\n\nconst PageSize = 10\n\nexport class WorksForYouArtistFeed extends React.Component<Props, State> {\n  state = {\n    loading: false,\n  }\n\n  loadMoreArtworks() {\n    const hasMore = this.props.viewer.artist.artworks_connection.pageInfo\n      .hasNextPage\n\n    if (hasMore && !this.state.loading) {\n      this.setState({ loading: true }, () => {\n        this.props.relay.loadMore(PageSize, error => {\n          if (error) {\n            console.error(error)\n          }\n\n          this.setState({ loading: false })\n        })\n      })\n    }\n  }\n\n  render() {\n    const {\n      forSale,\n      viewer: { artist },\n    } = this.props\n\n    const avatarImageUrl = get(artist, p => p.image.resized.url)\n    const meta =\n      (forSale\n        ? get(artist, p => p.counts.for_sale_artworks, \"\").toLocaleString()\n        : get(artist, p => p.counts.artworks, \"\").toLocaleString()) + \" Works\"\n\n    return (\n      <>\n        <EntityHeader\n          name={artist.name}\n          meta={meta}\n          imageUrl={avatarImageUrl}\n          href={artist.href}\n        />\n\n        <Spacer mb={3} />\n\n        <ArtworkGrid\n          artworks={artist.artworks_connection}\n          columnCount={3}\n          itemMargin={40}\n          onLoadMore={() => this.loadMoreArtworks()}\n          user={this.props.user}\n        />\n\n        {this.state.loading && (\n          <SpinnerContainer>\n            <Spinner />\n          </SpinnerContainer>\n        )}\n      </>\n    )\n  }\n}\n\nexport const WorksForYouArtistFeedPaginationContainer = createPaginationContainer(\n  WorksForYouArtistFeed,\n  {\n    viewer: graphql`\n      fragment WorksForYouArtistFeed_viewer on Viewer\n        @argumentDefinitions(\n          count: { type: \"Int\", defaultValue: 10 }\n          cursor: { type: \"String\" }\n          artistID: { type: \"String!\", defaultValue: \"\" }\n          filter: {\n            type: \"[ArtistArtworksFilters]\"\n            defaultValue: [IS_FOR_SALE]\n          }\n        ) {\n        artist(id: $artistID) {\n          name\n          href\n          counts {\n            artworks\n            for_sale_artworks\n          }\n          image {\n            resized(height: 80, width: 80) {\n              url\n            }\n          }\n          artworks_connection(\n            sort: PUBLISHED_AT_DESC\n            first: $count\n            after: $cursor\n            filter: $filter\n          ) @connection(key: \"WorksForYouArtistFeed_artworks_connection\") {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            ...ArtworkGrid_artworks\n            edges {\n              node {\n                __id\n              }\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: \"forward\",\n    getConnectionFromProps(props) {\n      return props.viewer.artist.artworks_connection as ConnectionData\n    },\n    getFragmentVariables(prevVars, totalCount) {\n      return {\n        ...prevVars,\n        count: totalCount,\n      }\n    },\n    getVariables(_props, { count, cursor }, fragmentVariables) {\n      return {\n        // in most cases, for variables other than connection filters like\n        // `first`, `after`, etc. you may want to use the previous values.\n        ...fragmentVariables,\n        count,\n        cursor,\n      }\n    },\n    query: graphql`\n      query WorksForYouArtistFeedPaginationQuery(\n        $artistID: String!\n        $count: Int!\n        $cursor: String\n        $filter: [ArtistArtworksFilters]\n      ) {\n        viewer {\n          ...WorksForYouArtistFeed_viewer\n            @arguments(\n              artistID: $artistID\n              count: $count\n              cursor: $cursor\n              filter: $filter\n            )\n        }\n      }\n    `,\n  }\n)\n\nconst SpinnerContainer = styled.div`\n  width: 100%;\n  height: 100px;\n  position: relative;\n`\n"],"file":"WorksForYouArtistFeed.js"}