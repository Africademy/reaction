{"version":3,"sources":["../../../src/Apps/WorksForYou/WorksForYouFeed.tsx"],"names":["PageSize","RefreshInterval","WorksForYouFeed","loading","interval","setInterval","maybeLoadMore","setState","state","clearInterval","threshold","window","innerHeight","scrollY","el","ReactDOM","findDOMNode","parentElement","clientHeight","scrollTop","loadMoreArtworks","hasMore","props","viewer","me","followsAndSaves","notifications","pageInfo","hasNextPage","relay","loadMore","error","console","edges","map","index","node","avatarImageUrl","p","image","resized","url","meta","summary","published_at","artists","href","artworksConnection","user","Component","WorksForYouFeedPaginationContainer","direction","getConnectionFromProps","getFragmentVariables","prevVars","totalCount","count","getVariables","_props","fragmentVariables","cursor","query","SpinnerContainer","styled","div"],"mappings":"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","sourcesContent":["import { Box, EntityHeader, Separator, Spacer, Spinner } from \"@artsy/palette\"\nimport { WorksForYouFeed_viewer } from \"__generated__/WorksForYouFeed_viewer.graphql\"\nimport { SystemContextProps } from \"Artsy\"\nimport ArtworkGrid from \"Components/ArtworkGrid\"\nimport React, { Component } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport styled from \"styled-components\"\nimport { get } from \"Utils/get\"\n\nimport {\n  ConnectionData,\n  createPaginationContainer,\n  graphql,\n  RelayPaginationProp,\n} from \"react-relay\"\n\ninterface Props extends SystemContextProps {\n  relay?: RelayPaginationProp\n  user?: User\n  viewer: WorksForYouFeed_viewer\n}\n\ninterface State {\n  loading: boolean\n  interval: any\n}\n\nconst PageSize = 10\nconst RefreshInterval = 150 // ms\n\nexport class WorksForYouFeed extends Component<Props, State> {\n  state = {\n    loading: false,\n    interval: null,\n  }\n\n  componentDidMount() {\n    const interval = setInterval(() => {\n      this.maybeLoadMore()\n    }, RefreshInterval)\n\n    this.setState({\n      interval,\n    })\n  }\n\n  componentWillUnmount() {\n    if (this.state.interval) {\n      clearInterval(this.state.interval)\n    }\n  }\n\n  maybeLoadMore() {\n    const threshold = window.innerHeight + window.scrollY\n    const el = ReactDOM.findDOMNode(this).parentElement as Element\n    if (threshold >= el.clientHeight + el.scrollTop) {\n      this.loadMoreArtworks()\n    }\n  }\n\n  loadMoreArtworks() {\n    const hasMore = this.props.viewer.me.followsAndSaves.notifications.pageInfo\n      .hasNextPage\n\n    if (!hasMore && this.state.interval) {\n      clearInterval(this.state.interval)\n    }\n    if (hasMore && !this.state.loading) {\n      this.setState({ loading: true }, () => {\n        this.props.relay.loadMore(PageSize, error => {\n          if (error) {\n            console.error(error)\n          }\n\n          this.setState({ loading: false })\n        })\n      })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.viewer.me.followsAndSaves.notifications.edges.map(\n          ({ node }, index) => {\n            const avatarImageUrl = get(node, p => p.image.resized.url)\n            const meta = `${node.summary}, ${node.published_at}`\n\n            return (\n              <Box key={index}>\n                <EntityHeader\n                  name={node.artists}\n                  meta={meta}\n                  imageUrl={avatarImageUrl}\n                  href={node.href}\n                />\n\n                <Spacer mb={3} />\n\n                <ArtworkGrid\n                  artworks={node.artworksConnection}\n                  columnCount={3}\n                  preloadImageCount={9}\n                  itemMargin={40}\n                  user={this.props.user}\n                />\n\n                <Box mt={4} mb={3}>\n                  <Separator />\n                </Box>\n              </Box>\n            )\n          }\n        )}\n\n        <SpinnerContainer>\n          {this.state.loading ? <Spinner /> : \"\"}\n        </SpinnerContainer>\n      </>\n    )\n  }\n}\n\nexport const WorksForYouFeedPaginationContainer = createPaginationContainer(\n  WorksForYouFeed,\n  {\n    viewer: graphql`\n      fragment WorksForYouFeed_viewer on Viewer\n        @argumentDefinitions(\n          count: { type: \"Int\", defaultValue: 10 }\n          cursor: { type: \"String\" }\n          for_sale: { type: \"Boolean\", defaultValue: true }\n        ) {\n        me {\n          followsAndSaves {\n            notifications: bundledArtworksByArtist(\n              sort: PUBLISHED_AT_DESC\n              first: $count\n              after: $cursor\n              for_sale: $for_sale\n            ) @connection(key: \"WorksForYou_notifications\") {\n              pageInfo {\n                hasNextPage\n                endCursor\n              }\n              edges {\n                node {\n                  __id\n                  href\n                  summary\n                  artists\n                  published_at(format: \"MMM DD\")\n                  artworksConnection {\n                    ...ArtworkGrid_artworks\n                  }\n                  image {\n                    resized(height: 80, width: 80) {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: \"forward\",\n    getConnectionFromProps(props) {\n      return props.viewer.me.followsAndSaves.notifications as ConnectionData\n    },\n    getFragmentVariables(prevVars, totalCount) {\n      return {\n        ...prevVars,\n        count: totalCount,\n      }\n    },\n    getVariables(_props, { count, cursor }, fragmentVariables) {\n      return {\n        // in most cases, for variables other than connection filters like\n        // `first`, `after`, etc. you may want to use the previous values.\n        ...fragmentVariables,\n        count,\n        cursor,\n      }\n    },\n    query: graphql`\n      query WorksForYouFeedPaginationQuery($count: Int!, $cursor: String) {\n        viewer {\n          ...WorksForYouFeed_viewer @arguments(count: $count, cursor: $cursor)\n        }\n      }\n    `,\n  }\n)\n\nconst SpinnerContainer = styled.div`\n  width: 100%;\n  height: 100px;\n  position: relative;\n`\n"],"file":"WorksForYouFeed.js"}