{"version":3,"sources":["../../../src/Artsy/Relay/createRelaySSREnvironment.ts"],"names":["isServer","window","isDevelopment","process","env","NODE_ENV","sd","loggingEnabled","METAPHYSICS_ENDPOINT","USER_AGENT","ReactionVersion","createRelaySSREnvironment","config","cache","checkStatus","user","relayNetwork","userAgent","relaySSRMiddleware","require","default","debug","headers","timeZone","Intl","DateTimeFormat","resolvedOptions","error","console","warn","middlewares","url","id","accessToken","getMiddleware","size","ttl","onInit","queryResponseCache","hydrateCacheFromSSR","disableServerMiddlewareTip","network","RelayNetworkLayer","noThrow","source","RecordSource","store","Store","environment","Environment","ssrData","JSON","parse","__RELAY_BOOTSTRAP__","forEach","request","key","json","queryID","variables","set"],"mappings":"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","sourcesContent":["import \"isomorphic-fetch\"\nimport \"regenerator-runtime/runtime\"\n\nimport { isEmpty } from \"lodash\"\nimport { version as ReactionVersion } from \"package.json\"\nimport RelayClientSSR from \"react-relay-network-modern-ssr/node8/client\"\nimport RelayServerSSR from \"react-relay-network-modern-ssr/node8/server\"\nimport { Environment, RecordSource, RelayNetwork, Store } from \"relay-runtime\"\nimport { data as sd } from \"sharify\"\n\nimport {\n  cacheMiddleware,\n  errorMiddleware,\n  loggerMiddleware,\n  RelayNetworkLayer,\n  urlMiddleware,\n} from \"react-relay-network-modern/node8\"\nimport { metaphysicsErrorHandlerMiddleware } from \"./middleware/metaphysicsErrorHandlerMiddleware\"\nimport { metaphysicsExtensionsLoggerMiddleware } from \"./middleware/metaphysicsExtensionsLoggerMiddleware\"\nimport { principalFieldErrorHandlerMiddleware } from \"./middleware/principalFieldErrorHandlerMiddleware\"\nimport { searchBarImmediateResolveMiddleware } from \"./middleware/searchBarImmediateResolveMiddleware\"\n\nconst isServer = typeof window === \"undefined\"\nconst isDevelopment =\n  (isServer ? process.env.NODE_ENV : sd.NODE_ENV) === \"development\"\n\n// Only log on the client during development\nconst loggingEnabled = isDevelopment && !isServer\n\nconst METAPHYSICS_ENDPOINT = isServer\n  ? process.env.METAPHYSICS_ENDPOINT\n  : sd.METAPHYSICS_ENDPOINT\n\nconst USER_AGENT = `Reaction/${ReactionVersion}`\n\ninterface Config {\n  cache?: object\n  user?: User\n  checkStatus?: boolean\n  relayNetwork?: RelayNetwork\n  userAgent?: string\n}\n\nexport interface RelaySSREnvironment extends Environment {\n  relaySSRMiddleware: RelayClientSSR | RelayServerSSR\n  toggleFetching?: (isFetching) => void\n}\n\nexport function createRelaySSREnvironment(config: Config = {}) {\n  const { cache = {}, checkStatus, user, relayNetwork, userAgent } = config\n\n  /**\n   * Lazy load these here so we can safely ignore the server module from client\n   * bundles without that leading to an exception trying to import it\n   * unconditionally at the top-level.\n   */\n  const relaySSRMiddleware = isServer\n    ? new (require(\"react-relay-network-modern-ssr/node8/server\")).default()\n    : new (require(\"react-relay-network-modern-ssr/node8/client\")).default(\n        cache\n      )\n\n  relaySSRMiddleware.debug = false\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    /**\n     * Chrome still doesn’t support setting the `User-Agent` header, but as this\n     * isn’t critical information either we’re not going to work around it by\n     * adding e.g. a `X-User-Agent` header, for now.\n     *\n     * See https://bugs.chromium.org/p/chromium/issues/detail?id=571722\n     */\n    \"User-Agent\": userAgent ? `${userAgent}; ${USER_AGENT}` : USER_AGENT,\n  }\n\n  let timeZone\n  try {\n    timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone\n    headers[\"X-TIMEZONE\"] = timeZone\n  } catch (error) {\n    console.warn(\"Browser does not support i18n API, not setting TZ header.\")\n  }\n\n  const middlewares = [\n    searchBarImmediateResolveMiddleware(),\n    urlMiddleware({\n      url: METAPHYSICS_ENDPOINT,\n      headers: !!user\n        ? {\n            ...headers,\n            \"X-USER-ID\": user && user.id,\n            \"X-ACCESS-TOKEN\": user && user.accessToken,\n          }\n        : headers,\n    }),\n    relaySSRMiddleware.getMiddleware(),\n    cacheMiddleware({\n      size: 100, // max 100 requests\n      ttl: 900000, // 15 minutes\n      onInit: queryResponseCache => {\n        if (!isServer) {\n          hydrateCacheFromSSR(queryResponseCache)\n        }\n      },\n    }),\n    principalFieldErrorHandlerMiddleware(),\n    metaphysicsErrorHandlerMiddleware({ checkStatus }),\n    loggingEnabled && loggerMiddleware(),\n    loggingEnabled && metaphysicsExtensionsLoggerMiddleware(),\n    loggingEnabled && errorMiddleware({ disableServerMiddlewareTip: true }),\n  ]\n\n  // TODO: The `noThrow` option is used since we do our own error handling,\n  // and don't want the default behavior of throwing when `result.errors` exists.\n  // https://github.com/relay-tools/react-relay-network-modern#advanced-options-2nd-argument-after-middlewares\n  // This is still 'experimental' and might be removed.\n  const network =\n    relayNetwork || new RelayNetworkLayer(middlewares, { noThrow: true })\n\n  const source = new RecordSource()\n  const store = new Store(source)\n\n  const environment = new Environment({\n    network,\n    store,\n  }) as RelaySSREnvironment\n\n  environment.relaySSRMiddleware = relaySSRMiddleware\n\n  return environment\n}\n\n/**\n * During the client-side rehydration phase take SSR cache and add to Relay's\n * QueryResponseCache, which is used inside of cacheMiddleware.\n *\n * @param cache RelayQueryResponseCache\n */\nexport function hydrateCacheFromSSR(queryResponseCache) {\n  const ssrData = JSON.parse(window.__RELAY_BOOTSTRAP__ || \"{}\")\n\n  if (!isEmpty(ssrData)) {\n    try {\n      ssrData.forEach(request => {\n        const [key, json] = request\n        const { queryID, variables } = JSON.parse(key)\n        queryResponseCache.set(queryID, variables, json) // See: https://facebook.github.io/relay/docs/en/network-layer.html#caching\n      })\n    } catch (error) {\n      console.error(\"Relay/createEnvironment\", error)\n    }\n  }\n}\n"],"file":"createRelaySSREnvironment.js"}