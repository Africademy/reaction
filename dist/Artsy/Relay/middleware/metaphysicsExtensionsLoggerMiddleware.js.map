{"version":3,"sources":["../../../../src/Artsy/Relay/middleware/metaphysicsExtensionsLoggerMiddleware.ts"],"names":["metaphysicsExtensionsLoggerMiddleware","next","req","then","res","json","extensions","console","groupCollapsed","requests","stitching","stitchCount","Object","keys","length","stitchSummary","apis","requestCount","map","k","reduce","a","c","colorForRequests","noBold","noColor","requestSummary","title","forEach","host","group","route","log","groupEnd","stitchedSchema"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\n\n/**\n * This takes the extra extension metadata that staging and dev metaphysics\n * sends about API requests it makes for you, and logs it out during dev\n * time into your console at the same places as the relay queries.\n */\nexport function metaphysicsExtensionsLoggerMiddleware() {\n  return next => req => {\n    return next(req).then(res => {\n      if (\n        res.json.extensions &&\n        console.groupCollapsed &&\n        res.json.extensions.requests\n      ) {\n        // See: https://github.com/artsy/metaphysics/blob/master/src/lib/loaders/api/extensionsLogger.ts\n        const requests = res.json.extensions.requests\n\n        // Pull out the stitching logs, e.g. what graphql requests\n        // did stitching do for you under the hood\n        const stitching = requests.stitching\n        const stitchCount = stitching && Object.keys(stitching.requests).length\n        const stitchSummary = stitchCount ? `${stitchCount} stitched` : \"\"\n\n        // Grab the rest API requests (only ones that use DataLoader)\n        // so this is kinda a sub-set but it's more or less everything\n        const apis = _.omit(requests, [\"stitching\"])\n        const requestCount = Object.keys(apis)\n          .map(k => Object.keys(requests[k].requests).length) // API requests\n          .reduce((a, c) => a + c, 0) // Add them all up\n\n        // Not telling anyone off, but over 15 is probably a point\n        // where you want that highlighted.\n        const colorForRequests =\n          requestCount >= 15 ? \"color: #F1AF1B;\" : \"color: #6E1EFF;\"\n\n        // The way the console coloring works is you use %c as an inline span\n        // sentinal to correlate style to the next set of characters\n        //\n        // So we'll need some styles to work with\n        const noBold = \"font-weight: normal;\"\n        const noColor = \"color: black; font-weight: normal;\"\n        const requestSummary = requestCount\n          ? `%c ${requestCount} %ccalls` // These need consistent amounts of %c\n          : \"%c%c\"\n\n        const title = `%cMetaphysics API -${requestSummary} ${stitchSummary}`\n\n        // Make sure we have something to show\n        if (requestCount || stitchCount) {\n          // The main title for the metaphysics section\n          console.groupCollapsed(title, noBold, colorForRequests, noColor)\n\n          // Loop through all of the hosts, make a subsection for those\n          // and show the raw request obj in-case we add new things to it\n          if (requestCount) {\n            Object.keys(apis).forEach(host => {\n              console.group(host)\n              Object.keys(apis[host].requests).forEach(route => {\n                console.log(route, apis[host].requests[route])\n              })\n              console.groupEnd()\n            })\n          }\n\n          // Show stitched queries inline. This will probably need work in\n          // the future, because I bet it's ugly.\n\n          if (stitchCount) {\n            console.group(\"Stitched\")\n            Object.keys(stitching.requests).forEach(stitchedSchema => {\n              console.log(stitching.requests[stitchedSchema])\n            })\n            console.groupEnd()\n          }\n\n          // Wrap up the metaphysics section\n          console.groupEnd()\n        }\n      }\n      return res\n    })\n  }\n}\n"],"file":"metaphysicsExtensionsLoggerMiddleware.js"}