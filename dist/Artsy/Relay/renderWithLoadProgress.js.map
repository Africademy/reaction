{"version":3,"sources":["../../../src/Artsy/Relay/renderWithLoadProgress.tsx"],"names":["SpinnerContainer","styled","figure","RouteSpinnerContainer","RouteSpinner","LoadingClassName","handleError","error","jest","logger","message","networkError","response","_bodyInit","body","data","JSON","parse","console","e","renderWithLoadProgress","Container","initialProps","wrapperProps","spinnerProps","props","retry"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;AAEA;;;;;;AAMA,IAAMA,gBAAgB,GAAGC,0BAAOC,MAAV;AAAA;AAAA;AAAA,iIAAtB;;AAeA,IAAMC,qBAAqB,GAAGF,0BAAOC,MAAV;AAAA;AAAA;AAAA,kDAA3B;;AAMO,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SACE,6BAAC,qBAAD;AAAuB,IAAA,SAAS,EAAEC;AAAlC,KACE,6BAAC,gBAAD,OADF,CADF;AAKD,CANM;;;AAQA,IAAMA,gBAAgB,GAAG,eAAzB;;;AAEP,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3B;AACA,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,UAAMD,KAAN;AACD;;AAED,MAAME,MAAM,GAAG,qBAAa,oCAAb,CAAf;;AAEA,MAAIF,KAAK,CAACG,OAAV,EAAmB;AACjBD,IAAAA,MAAM,CAACF,KAAP,CAAaA,KAAK,CAACG,OAAnB;AACD;;AAED,MAAMC,YAAY,GAAGJ,KAArB;;AACA,MAAII,YAAY,CAACC,QAAb,IAAyBD,YAAY,CAACC,QAAb,CAAsBC,SAAnD,EAA8D;AAC5D,QAAMC,IAAI,GAAGH,YAAY,CAACC,QAAb,CAAsBC,SAAnC;;AACA,QAAI;AACF,UAAME,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAb;AACAI,MAAAA,OAAO,CAACX,KAAR,4BAAyCQ,IAAzC;AACAN,MAAAA,MAAM,CAACF,KAAP,CAAaQ,IAAb;AACD,KAJD,CAIE,OAAOI,CAAP,EAAU;AACVV,MAAAA,MAAM,CAACF,KAAP,CAAa,wCAAb,EAAuDY,CAAvD;AACD;AACF;AACF,CAvBD;;AA6BO,SAASC,sBAAT,CACLC,SADK,EAKoB;AAAA,MAHzBC,YAGyB,uEAHF,EAGE;AAAA,MAFzBC,YAEyB,uEAFF,EAEE;AAAA,MADzBC,YACyB,uEADI,EACJ;AACzB;AAEA,SAAO,gBAA6B;AAAA,QAA1BjB,KAA0B,QAA1BA,KAA0B;AAAA,QAAnBkB,KAAmB,QAAnBA,KAAmB;AAAA,QAAZC,KAAY,QAAZA,KAAY;;AAClC,QAAInB,KAAJ,EAAW;AACT;AACA;AACAD,MAAAA,WAAW,CAACC,KAAD,CAAX;AACA,aAAO,IAAP;AACD,KALD,MAKO,IAAIkB,KAAJ,EAAW;AAChB,aAAO,6BAAC,SAAD,eAAeH,YAAf,EAAiCG,KAAjC,EAAP;AACD,KAFM,MAEA;AACL,aACE,6BAAC,gBAAD;AAAkB,QAAA,SAAS,EAAEpB;AAA7B,SAAmDkB,YAAnD,GACE,6BAAC,gBAAD,EAAaC,YAAb,CADF,CADF;AAKD;AACF,GAfD;AAgBD","sourcesContent":["import { Spinner, SpinnerProps } from \"@artsy/palette\"\nimport React from \"react\"\nimport { ReadyState, RelayContainer } from \"react-relay\"\nimport styled from \"styled-components\"\nimport createLogger from \"Utils/logger\"\n\n/**\n * WARNING: Do _not_ change this element to something common like a div. If the\n * element of this container is the same as the element used in the RelayContainer\n * then rehydration can fail and cause the RelayContainer to receive styles\n * from the SpinnerContainer and Spinner.\n */\nconst SpinnerContainer = styled.figure`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  position: relative;\n\n  /*\n    Noticed some weird behavior in force due to figure margin being set to 0\n    in global css. Adding padding of 22 gets things back to visual default.\n  */\n  margin: unset;\n  padding: 22px;\n`\n\nconst RouteSpinnerContainer = styled.figure`\n  width: 100%;\n  height: 100px;\n  position: relative;\n`\n\nexport const RouteSpinner = () => {\n  return (\n    <RouteSpinnerContainer className={LoadingClassName}>\n      <Spinner />\n    </RouteSpinnerContainer>\n  )\n}\n\nexport const LoadingClassName = \"relay-loading\"\n\nconst handleError = error => {\n  // In tests we want errors to clearly bubble up.\n  if (typeof jest !== \"undefined\") {\n    throw error\n  }\n\n  const logger = createLogger(\"Artsy/Relay/renderWithLoadProgress\")\n\n  if (error.message) {\n    logger.error(error.message)\n  }\n\n  const networkError = error as any\n  if (networkError.response && networkError.response._bodyInit) {\n    const body = networkError.response._bodyInit\n    try {\n      const data = JSON.parse(body)\n      console.error(`Metaphysics Error data:`, data)\n      logger.error(data)\n    } catch (e) {\n      logger.error(\"Metaphysics Error could not be parsed.\", e)\n    }\n  }\n}\n\nexport type LoadProgressRenderer<P> = (\n  readyState: ReadyState<P>\n) => React.ReactElement<RelayContainer<P>> | null\n\nexport function renderWithLoadProgress<P>(\n  Container: RelayContainer<P>,\n  initialProps: object = {},\n  wrapperProps: object = {},\n  spinnerProps: SpinnerProps = {}\n): LoadProgressRenderer<P> {\n  // TODO: We need design for retrying or the approval to use the iOS design.\n  // See also: https://artsyproduct.atlassian.net/browse/PLATFORM-1272\n  return ({ error, props, retry }) => {\n    if (error) {\n      // TODO: Should we add a callback here so that containers can gracefully\n      //       handle an error state?\n      handleError(error)\n      return null\n    } else if (props) {\n      return <Container {...initialProps} {...props as any} />\n    } else {\n      return (\n        <SpinnerContainer className={LoadingClassName} {...wrapperProps}>\n          <Spinner {...spinnerProps} />\n        </SpinnerContainer>\n      )\n    }\n  }\n}\n"],"file":"renderWithLoadProgress.js"}