{"version":3,"sources":["../../../../src/Artsy/Router/Utils/Route.tsx"],"names":["createRender","fetchIndicator","render","renderArgs","Component","props","error","HttpError","undefined","Route","query","getQuery","BaseRoute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAeA,SAASA,YAAT,OAGsB;AAAA,iCAFpBC,cAEoB;AAAA,MAFpBA,cAEoB,oCAFH,SAEG;AAAA,MADpBC,MACoB,QADpBA,MACoB;AACpB,SAAO,UAACC,UAAD,EAAgC;AAAA,QAC7BC,SAD6B,GACDD,UADC,CAC7BC,SAD6B;AAAA,QAClBC,KADkB,GACDF,UADC,CAClBE,KADkB;AAAA,QACXC,KADW,GACDH,UADC,CACXG,KADW;;AAErC,QAAIA,KAAK,IAAIA,KAAK,YAAYC,gBAA9B,EAAyC;AACvC,YAAMD,KAAN;AACD;;AAED,QAAIJ,MAAJ,EAAY;AACV,aAAOA,MAAM,CAACC,UAAD,CAAb;AACD;;AAED,QAAIC,SAAS,KAAKI,SAAlB,EAA6B;AAC3B,aAAOA,SAAP;AACD,KAZoC,CAcrC;;;AACA,QAAI,CAACH,KAAL,EAAY;AACV,UAAIJ,cAAc,KAAK,SAAvB,EAAkC;AAChC,eAAO,6BAAC,oCAAD,OAAP,CADgC,CAGhC;AACA;AACD,OALD,MAKO,IAAIA,cAAc,KAAK,SAAvB,EAAkC;AACvC;;;;;;;;;;;;;;;;;;AAwBA;AACD,OA1BM,MA0BA;AACL;AACD;AACF;;AAED,WAAO,6BAAC,SAAD,EAAeI,KAAf,CAAP;AACD,GArDD;AAsDD;;IAEYI,K;;;;;AACX,iBAAYJ,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,QAAI,EAAEA,KAAK,CAACK,KAAN,IAAeL,KAAK,CAACM,QAAvB,CAAJ,EAAsC;AACpC,iFAAMN,KAAN;AACA;AACD;;AAJgB,gGAOZA,KAPY;AAQfH,MAAAA,MAAM,EAAEF,YAAY,CAACK,KAAD;AARL;AAUlB;;;EAXwBO,c","sourcesContent":["/**\n * Taken from @taion as per example of how they actually use found-relay and\n * have default setup for each route.\n */\n\nimport { RouteSpinner } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { HttpError } from \"found\"\nimport BaseRoute from \"found/lib/Route\"\nimport React from \"react\"\n\ntype FetchIndicator = \"spinner\" | \"overlay\"\n\ninterface CreateRenderProps {\n  fetchIndicator?: FetchIndicator\n  render?: (props) => React.ReactNode\n}\n\ninterface RenderArgProps {\n  Component: React.ComponentType\n  props?: object\n  error?: Error\n}\n\nfunction createRender({\n  fetchIndicator = \"spinner\",\n  render,\n}: CreateRenderProps) {\n  return (renderArgs: RenderArgProps) => {\n    const { Component, props, error } = renderArgs\n    if (error && error instanceof HttpError) {\n      throw error\n    }\n\n    if (render) {\n      return render(renderArgs)\n    }\n\n    if (Component === undefined) {\n      return undefined\n    }\n\n    // This should only ever show when doing client-side routing.\n    if (!props) {\n      if (fetchIndicator === \"spinner\") {\n        return <RouteSpinner />\n\n        // TODO: At some point  we might want to make this a little fancier. If\n        // undefined  is returned here, then we defer to `RenderStatus` component.\n      } else if (fetchIndicator === \"overlay\") {\n        /*\n          In attempting to avoid the use of <StaticContainer> in RenderStatus.tsx,\n          which freezes the component tree with `shouldComponentUpdate = false`,\n          we stored the previously-rendered component and props in a variable and\n          instead of returning undefined here, we returned <PrevComponent {...prevProps} />.\n\n          However, when the component is rendered by react, it errors out because\n          the data in prevProps has seemingly been garbage collected.\n\n          Relay has the ability to `retain` data in the store. We should investigate,\n          which would give us greater control over our component tree when top-level\n          route transitions occur.\n\n          See: https://graphql.slack.com/archives/C0BEXJLKG/p1561741782163900\n\n          export const setLocal = (query: GraphQLTaggedNode, localData: object) => {\n            const request = getRequest(query);\n            const operation = createOperationDescriptor(request, {});\n\n            env.commitPayload(operation, localData);\n            env.retain(operation.root);  // <== here @en_js magic :wink:\n          };\n        */\n\n        return\n      } else {\n        return\n      }\n    }\n\n    return <Component {...props} />\n  }\n}\n\nexport class Route extends BaseRoute {\n  constructor(props) {\n    if (!(props.query || props.getQuery)) {\n      super(props)\n      return\n    }\n\n    super({\n      ...props,\n      render: createRender(props),\n    })\n  }\n}\n"],"file":"Route.js"}