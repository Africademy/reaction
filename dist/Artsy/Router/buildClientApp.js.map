{"version":3,"sources":["../../../src/Artsy/Router/buildClientApp.tsx"],"names":["logger","buildClientApp","config","Promise","resolve","reject","context","history","initialRoute","routes","user","relayEnvironment","cache","JSON","parse","window","__RELAY_BOOTSTRAP__","getHistoryProtocol","protocol","BrowserProtocol","HashProtocol","MemoryProtocol","historyMiddlewares","queryStringParsing","stringify","qs","resolver","Resolver","Renderer","renderPending","RenderPending","renderReady","RenderReady","renderError","RenderError","historyProtocol","historyOptions","options","routeConfig","matchContext","render","renderArgs","Router","ClientApp","error"],"mappings":"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","sourcesContent":["import React, { ComponentType } from \"react\"\n\nimport { Resolver } from \"found-relay\"\nimport { ScrollManager } from \"found-scroll\"\nimport createInitialFarceRouter from \"found/lib/createInitialFarceRouter\"\nimport createRender from \"found/lib/createRender\"\n\nimport BrowserProtocol from \"farce/lib/BrowserProtocol\"\nimport createQueryMiddleware from \"farce/lib/createQueryMiddleware\"\nimport HashProtocol from \"farce/lib/HashProtocol\"\nimport MemoryProtocol from \"farce/lib/MemoryProtocol\"\nimport qs from \"qs\"\n\nimport createLogger from \"Utils/logger\"\nimport { getUser } from \"Utils/user\"\nimport { createRouteConfig } from \"./Utils/createRouteConfig\"\nimport { queryStringParsing } from \"./Utils/queryStringParsing\"\n\nimport { createRelaySSREnvironment } from \"Artsy/Relay/createRelaySSREnvironment\"\nimport { Boot } from \"Artsy/Router/Boot\"\n\nimport { RouterConfig } from \"./\"\n\nimport { RenderError, RenderPending, RenderReady } from \"./Utils/RenderStatus\"\n\ninterface Resolve {\n  ClientApp: ComponentType<any>\n}\n\nconst logger = createLogger(\"Artsy/Router/buildClientApp.tsx\")\n\nexport function buildClientApp(config: RouterConfig): Promise<Resolve> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        context = {},\n        history = {},\n        initialRoute = \"/\",\n        routes = [],\n      } = config\n\n      const user = getUser(context.user)\n      const relayEnvironment =\n        context.relayEnvironment ||\n        createRelaySSREnvironment({\n          cache: JSON.parse(window.__RELAY_BOOTSTRAP__ || \"{}\"),\n          user,\n        })\n\n      const getHistoryProtocol = () => {\n        switch (history.protocol) {\n          case \"browser\":\n            return new BrowserProtocol()\n          case \"hash\":\n            return new HashProtocol()\n          case \"memory\":\n            return new MemoryProtocol(initialRoute)\n          default:\n            return new BrowserProtocol()\n        }\n      }\n\n      const historyMiddlewares = [\n        createQueryMiddleware({\n          parse: queryStringParsing,\n          stringify: qs.stringify,\n        }),\n      ]\n      const resolver = new Resolver(relayEnvironment)\n\n      const Renderer = createRender({\n        renderPending: RenderPending,\n        renderReady: RenderReady,\n        renderError: RenderError,\n      })\n\n      const Router = await createInitialFarceRouter({\n        historyProtocol: getHistoryProtocol(),\n        historyMiddlewares,\n        historyOptions: history.options,\n        routeConfig: createRouteConfig(routes),\n        matchContext: { user },\n        resolver,\n        render: renderArgs => {\n          return (\n            <ScrollManager renderArgs={renderArgs}>\n              <Renderer {...renderArgs} />\n            </ScrollManager>\n          )\n        },\n      })\n\n      const ClientApp = () => {\n        return (\n          <Boot\n            context={context}\n            user={user}\n            relayEnvironment={relayEnvironment}\n            routes={routes}\n          >\n            <Router resolver={resolver} />\n          </Boot>\n        )\n      }\n\n      resolve({\n        ClientApp,\n      })\n    } catch (error) {\n      logger.error(error)\n      reject(error)\n    }\n  })\n}\n"],"file":"buildClientApp.js"}