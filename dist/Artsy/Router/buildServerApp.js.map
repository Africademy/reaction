{"version":3,"sources":["../../../src/Artsy/Router/buildServerApp.tsx"],"names":["MediaStyle","logger","buildServerApp","config","Promise","resolve","reject","context","routes","url","userAgent","user","relayEnvironment","historyMiddlewares","parse","queryStringParsing","stringify","qs","resolver","Resolver","Render","renderPending","RenderPending","renderReady","RenderReady","renderError","RenderError","routeConfig","render","props","matchContext","redirect","status","element","headTags","matchingMediaQueries","ServerApp","tags","sheet","ServerStyleSheet","html","ReactDOMServer","renderToString","collectStyles","relaySSRMiddleware","getCache","data","getStyleTags","relayData","styleTags","bodyHTML","_relayData","cleanRelayData","scripts","push","serializeRelayData","result","join","jest","Object","defineProperty","__THOU_SHALT_NOT_FAFF_AROUND_WITH_THIS_HERE_OBJECT_WE_ARE_SERIOUS__","value","error","Symbol","forEach","item","i","_res","console","hydrationData","isJSON"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport serialize from \"serialize-javascript\"\nimport { ServerStyleSheet } from \"styled-components\"\n\nimport { Resolver } from \"found-relay\"\nimport createRender from \"found/lib/createRender\"\nimport { getFarceResult } from \"found/lib/server\"\nimport qs from \"qs\"\n\nimport createQueryMiddleware from \"farce/lib/createQueryMiddleware\"\n\nimport { createRelaySSREnvironment } from \"Artsy/Relay/createRelaySSREnvironment\"\nimport { Boot } from \"Artsy/Router/Boot\"\n\nimport createLogger from \"Utils/logger\"\nimport { createMediaStyle } from \"Utils/Responsive\"\nimport { trace } from \"Utils/trace\"\nimport { getUser } from \"Utils/user\"\nimport { createRouteConfig } from \"./Utils/createRouteConfig\"\nimport { matchingMediaQueriesForUserAgent } from \"./Utils/matchingMediaQueriesForUserAgent\"\n\nimport { RouterConfig } from \"./\"\nimport { queryStringParsing } from \"./Utils/queryStringParsing\"\nimport { RenderError, RenderPending, RenderReady } from \"./Utils/RenderStatus\"\n\ninterface Resolve {\n  bodyHTML?: string\n  redirect?: {\n    url: string\n  }\n  status?: number\n  headTags?: any[]\n  scripts?: string\n  styleTags?: string\n}\n\n// No need to invoke this for each request.\nconst MediaStyle = createMediaStyle()\n\nconst logger = createLogger(\"Artsy/Router/buildServerApp.tsx\")\n\nexport interface ServerRouterConfig extends RouterConfig {\n  userAgent?: string\n}\n\nexport function buildServerApp(config: ServerRouterConfig): Promise<Resolve> {\n  return trace(\n    \"buildServerApp\",\n    new Promise(async (resolve, reject) => {\n      try {\n        const { context = {}, routes = [], url, userAgent } = config\n        const user = getUser(context.user)\n        const relayEnvironment = context.relayEnvironment || createRelaySSREnvironment({ user }) // prettier-ignore\n        const historyMiddlewares = [\n          createQueryMiddleware({\n            parse: queryStringParsing,\n            stringify: qs.stringify,\n          }),\n        ]\n        const resolver = new Resolver(relayEnvironment)\n\n        const Render = createRender({\n          renderPending: RenderPending,\n          renderReady: RenderReady,\n          renderError: RenderError,\n        })\n\n        const { redirect, status, element } = await trace(\n          \"buildServerApp.farceResults\",\n          getFarceResult({\n            url,\n            historyMiddlewares,\n            routeConfig: createRouteConfig(routes),\n            resolver,\n            render: props => <Render {...props} />,\n            matchContext: { user },\n          })\n        )\n\n        if (redirect) {\n          resolve({ redirect })\n          return\n        }\n\n        /**\n         * An array that gets passed to `react-head`'s provider that will collect the header\n         * tags that are rendered by the App. `headTags` is _mutated_ when it's passed to the App. Beware.\n         **/\n        const headTags = [<style type=\"text/css\">{MediaStyle}</style>]\n        const matchingMediaQueries = userAgent && matchingMediaQueriesForUserAgent(userAgent) // prettier-ignore\n\n        const ServerApp = ({ tags = [] }) => {\n          return (\n            <Boot\n              context={context}\n              user={user}\n              headTags={tags}\n              onlyMatchMediaQueries={matchingMediaQueries}\n              relayEnvironment={relayEnvironment}\n              routes={routes}\n            >\n              {element}\n            </Boot>\n          )\n        }\n\n        const { relayData: _relayData, styleTags, bodyHTML } = await trace(\n          \"buildServerApp.fetch\",\n          (async () => {\n            const sheet = new ServerStyleSheet()\n\n            // Render tree again, but this time with Relay data being available.\n            const html = ReactDOMServer.renderToString(\n              sheet.collectStyles(<ServerApp tags={headTags} />)\n            )\n\n            // Get serializable Relay data for rehydration on the client\n            const data = await relayEnvironment.relaySSRMiddleware.getCache()\n\n            // Extract CSS styleTags to inject for SSR pass\n            const tags = sheet.getStyleTags()\n\n            return {\n              relayData: data,\n              styleTags: tags,\n              bodyHTML: html,\n            }\n          })()\n        )\n\n        // Strip response of problematic data structures\n        const relayData = cleanRelayData(_relayData)\n\n        // Build up script tags to inject into head\n        const scripts = []\n        scripts.push(`\n          <script>\n            var __RELAY_BOOTSTRAP__ = ${serializeRelayData(relayData)};\n          </script>\n        `)\n\n        const result = {\n          bodyHTML,\n          status,\n          headTags,\n          styleTags,\n          scripts: scripts.join(\"\\n\"),\n        }\n\n        // Only exporting this for testing purposes, don't go around using this\n        // elsewhere, we’re serious.\n        if (typeof jest !== \"undefined\") {\n          Object.defineProperty(\n            result,\n            __THOU_SHALT_NOT_FAFF_AROUND_WITH_THIS_HERE_OBJECT_WE_ARE_SERIOUS__,\n            { value: ServerApp }\n          )\n        }\n\n        resolve(result)\n      } catch (error) {\n        logger.error(error)\n        reject(error)\n      }\n    })\n  )\n}\n\nexport const __THOU_SHALT_NOT_FAFF_AROUND_WITH_THIS_HERE_OBJECT_WE_ARE_SERIOUS__ =\n  typeof jest !== \"undefined\" ? Symbol() : null\n\n/**\n * FIXME: Relay SSR middleware is passing a _res object across which\n * has circular references, leading to issues *ONLY* on staging / prod\n * which can't be reproduced locally. This strips out _res as a quickfix\n * though this should be PR'd back at relay-modern-network-modern-ssr.\n */\nfunction cleanRelayData(relayData: any) {\n  try {\n    relayData.forEach(item => {\n      item.forEach(i => {\n        delete i._res\n      })\n    })\n  } catch (error) {\n    console.error(\"[Artsy/Router/buildServerApp] Error cleaning data\", error)\n  }\n\n  return relayData\n}\n/**\n * Serialize data for client-side consumption\n */\nfunction serializeRelayData(relayData: any) {\n  let hydrationData\n  try {\n    hydrationData = serialize(relayData, {\n      isJSON: true,\n    })\n  } catch (error) {\n    hydrationData = \"{}\"\n    console.error(\n      \"[Artsy/Router/buildServerApp] Error serializing data:\",\n      error\n    )\n  }\n  return serialize(hydrationData || {}, {\n    isJSON: true,\n  })\n}\n"],"file":"buildServerApp.js"}