{"version":3,"sources":["../../src/Artsy/SystemContext.tsx"],"names":["SystemContext","React","createContext","SystemContextProvider","children","props","user","relayEnvironment","isFetching","setIsFetching","providerValues","SystemContextConsumer","Consumer","withSystemContext","Component","contextValues","useSystemContext","systemContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAqDO,IAAMA,aAAa,GAAGC,eAAMC,aAAN,CAAwC,EAAxC,CAAtB;AAEP;;;;;;;;AAIO,IAAMC,qBAA8C,GAAG,SAAjDA,qBAAiD,OAGxD;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADDC,KACC;;AACJ,MAAMC,IAAI,GAAG,mBAAQD,KAAK,CAACC,IAAd,CAAb;AAEA,MAAMC,gBAAgB,GACpBF,KAAK,CAACE,gBAAN,IAA0B,0DAA0B;AAAED,IAAAA,IAAI,EAAJA;AAAF,GAA1B,CAD5B;;AAHI,kBAMgC,qBAAS,KAAT,CANhC;AAAA;AAAA,MAMGE,UANH;AAAA,MAMeC,aANf;;AAQJ,MAAMC,cAAc,qBACfL,KADe;AAElBG,IAAAA,UAAU,EAAVA,UAFkB;AAGlBC,IAAAA,aAAa,EAAbA,aAHkB;AAIlBF,IAAAA,gBAAgB,EAAhBA,gBAJkB;AAKlBD,IAAAA,IAAI,EAAJA;AALkB,IAApB;;AAQA,SACE,6BAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEI;AAA/B,KACGN,QADH,CADF;AAKD,CAxBM;;;AA0BA,IAAMO,qBAAqB,GAAGX,aAAa,CAACY,QAA5C;AAEP;;;;;;AAGO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,SAAS,EAAI;AAC5C,SAAO,UAAAT,KAAK,EAAI;AACd,WACE,6BAAC,qBAAD,QACG,UAAAU,aAAa,EAAI;AAChB,aAAO,6BAAC,SAAD,eAAeA,aAAf,EAAkCV,KAAlC,EAAP;AACD,KAHH,CADF;AAOD,GARD;AASD,CAVM;AAYP;;;;;;;AAGO,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpC,MAAMC,aAAa,GAAG,uBAAWjB,aAAX,CAAtB;AACA,SAAOiB,aAAP;AACD,CAHM","sourcesContent":["import React, { SFC, useContext, useState } from \"react\"\nimport { Environment } from \"relay-runtime\"\n\nimport { createRelaySSREnvironment } from \"Artsy/Relay/createRelaySSREnvironment\"\nimport { getUser } from \"Utils/user\"\n\nexport interface Mediator {\n  trigger: (action: string, config?: object) => void\n}\n\n/**\n * Globally accessible SystemContext values for use in Artsy apps\n */\nexport interface SystemContextProps {\n  /** Is the user opening a Reaction page from the mobile app */\n  isEigen?: boolean\n\n  /**\n   * Trigger for global fetching indicator\n   */\n  isFetching?: boolean\n\n  /**\n   * A PubSub hub, which should only be used for communicating with Force.\n   */\n  mediator?: Mediator\n\n  /**\n   * FIXME: Ask alloy how to pass one-off props like this in from force\n   */\n  notificationCount?: number\n\n  /**\n   * A configured environment object that can be used for any Relay operations\n   * that need an environment object.\n   *\n   * If none is provided to the `SystemContextProvider` then one is created,\n   * using the `user` if available.\n   */\n  relayEnvironment?: Environment\n\n  searchQuery?: string\n\n  /**\n   * Toggle for setting global fetch state, typically set in the `RenderStatus.tsx`\n   */\n  setIsFetching?: (isFetching: boolean) => void\n\n  /**\n   * The currently signed-in user.\n   *\n   * Unless explicitely set to `null`, this will default to use the `USER_ID`\n   * and `USER_ACCESS_TOKEN` environment variables if available.\n   */\n  user?: User\n}\n\nexport const SystemContext = React.createContext<SystemContextProps>({})\n\n/**\n * Creates a new Context.Provider with a user and Relay environment, or defaults\n * if not passed in as props.\n */\nexport const SystemContextProvider: SFC<SystemContextProps> = ({\n  children,\n  ...props\n}) => {\n  const user = getUser(props.user)\n\n  const relayEnvironment =\n    props.relayEnvironment || createRelaySSREnvironment({ user })\n\n  const [isFetching, setIsFetching] = useState(false)\n\n  const providerValues = {\n    ...props,\n    isFetching,\n    setIsFetching,\n    relayEnvironment,\n    user,\n  }\n\n  return (\n    <SystemContext.Provider value={providerValues}>\n      {children}\n    </SystemContext.Provider>\n  )\n}\n\nexport const SystemContextConsumer = SystemContext.Consumer\n\n/**\n * A HOC utility function for injecting renderProps into a component.\n */\nexport const withSystemContext = Component => {\n  return props => {\n    return (\n      <SystemContextConsumer>\n        {contextValues => {\n          return <Component {...contextValues} {...props} />\n        }}\n      </SystemContextConsumer>\n    )\n  }\n}\n\n/**\n * Custom hook to access SystemContext\n */\nexport const useSystemContext = () => {\n  const systemContext = useContext(SystemContext)\n  return systemContext\n}\n"],"file":"SystemContext.js"}