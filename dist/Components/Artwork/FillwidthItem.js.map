{"version":3,"sources":["../../../src/Components/Artwork/FillwidthItem.tsx"],"names":["logger","IMAGE_QUALITY","ImageLink","styled","a","Placeholder","div","FillwidthItemContainer","imageURL","props","artwork","image","url","aspect_ratio","type","sd","GEMINI_CLOUDFRONT_URL","imageWidth","imageHeight","encodeURIComponent","className","targetHeight","user","mediator","lazyLoad","userSpread","isAdmin","p","href","error","height","onClick","getImageUrl","position","right","bottom","Math","floor","window","devicePixelRatio","React","Component","FillwidthItem","attrs","width","margin"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAMA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAG,qBAAa,mBAAb,CAAf;AAEA,IAAMC,aAAa,GAAG,EAAtB;;AAEA,IAAMC,SAAS,GAAGC,0BAAOC,CAAV;AAAA;AAAA;AAAA,kDAAf;;AAOA,IAAMC,WAAW,GAAGF,0BAAOG,GAAV;AAAA;AAAA;AAAA,qCAAjB;;IAkBaC,sB;;;;;;;;;;;;;kCAiBG;AACZ,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,KAAnB,CAAyBC,GAA1C;;AAEA,UAAI,CAACJ,QAAL,EAAe;AACb,eAAO,IAAP;AACD;;AALW,UASCK,YATD,GAWR,KAAKJ,KAXG,CAQVC,OARU,CASRC,KATQ,CASCE,YATD,EAaZ;;AACA,UAAMC,IAAI,GAAGD,YAAY,GAAG,KAAH,GAAW,MAApC,CAdY,CAgBZ;;AACA,uBAAUE,cAAGC,qBAAb,yBAAiDF,IAAjD,oBACE,KAAKG,UADP,qBAGE,KAAKC,WAHP,sBAIYjB,aAJZ,kBAIiCkB,kBAAkB,CAACX,QAAD,CAJnD;AAKD;;;6BAEQ;AAAA;;AAAA,wBASH,KAAKC,KATF;AAAA,UAELC,OAFK,eAELA,OAFK;AAAA,UAGLU,SAHK,eAGLA,SAHK;AAAA,UAILC,YAJK,eAILA,YAJK;AAAA,UAKLH,WALK,eAKLA,WALK;AAAA,UAMLI,IANK,eAMLA,IANK;AAAA,UAOLC,QAPK,eAOLA,QAPK;AAAA,UAQLC,QARK,eAQLA,QARK;AAWP,UAAIC,UAAU,GAAG,EAAjB;;AACA,UAAIH,IAAJ,EAAU;AACRG,QAAAA,UAAU,GAAG;AAAEH,UAAAA,IAAI,EAAJA;AAAF,SAAb;AACD;;AACD,UAAMI,OAAO,GAAG,uBAAYJ,IAAZ,CAAhB;AAEA,UAAMX,KAAK,GAAG,cAAI,KAAKF,KAAT,EAAgB,UAAAkB,CAAC;AAAA,eAAIA,CAAC,CAACjB,OAAF,CAAUC,KAAd;AAAA,OAAjB,CAAd;;AACA,UAAI,CAACA,KAAL,EAAY;AACV,YAAMiB,IAAI,GAAG,cAAI,KAAKnB,KAAT,EAAgB,UAAAkB,CAAC;AAAA,iBAAIA,CAAC,CAACjB,OAAF,CAAUkB,IAAd;AAAA,SAAjB,EAAqC,gBAArC,CAAb;AACA5B,QAAAA,MAAM,CAAC6B,KAAP,sBAA2BD,IAA3B;AACA,eAAO,IAAP;AACD;;AAED,aACE;AAAK,QAAA,SAAS,EAAER;AAAhB,SACE,6BAAC,WAAD;AAAa,QAAA,KAAK,EAAE;AAAEU,UAAAA,MAAM,EAAET;AAAV;AAApB,SACE,6BAAC,SAAD;AACE,QAAA,IAAI,EAAEX,OAAO,CAACkB,IADhB;AAEE,QAAA,OAAO,EAAE,mBAAM;AACb,cAAI,KAAI,CAACnB,KAAL,CAAWsB,OAAf,EAAwB;AACtB,YAAA,KAAI,CAACtB,KAAL,CAAWsB,OAAX;AACD;AACF;AANH,SAQE,6BAAC,cAAD;AACE,QAAA,GAAG,EAAE,KAAKC,WAAL,EADP;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,MAAM,EAAEd,WAHV;AAIE,QAAA,QAAQ,EAAEM,QAJZ;AAKE,QAAA,iBAAiB,EAAE,CAACE;AALtB,QARF,CADF,EAkBE,6BAAC,cAAD;AAAO,QAAA,OAAO,EAAEhB,OAAhB;AAAyB,QAAA,KAAK,EAAE,KAAKO;AAArC,QAlBF,EAoBE,6BAAC,aAAD,eACMQ,UADN;AAEE,QAAA,QAAQ,EAAEF,QAFZ;AAGE,QAAA,SAAS,EAAC,cAHZ;AAIE,QAAA,OAAO,EAAEb,OAJX;AAKE,QAAA,KAAK,EAAE;AAAEuB,UAAAA,QAAQ,EAAE,UAAZ;AAAwBC,UAAAA,KAAK,EAAE,KAA/B;AAAsCC,UAAAA,MAAM,EAAE;AAA9C;AALT,SApBF,CADF,EA6BE,6BAAC,iBAAD;AAAU,QAAA,OAAO,EAAEzB,OAAnB;AAA4B,QAAA,QAAQ;AAApC,QA7BF,CADF;AAiCD;;;wBA/FgB;AAAA,UAGFG,YAHE,GAKX,KAAKJ,KALM,CAEbC,OAFa,CAGXC,KAHW,CAGFE,YAHE;AAOf,aAAOuB,IAAI,CAACC,KAAL,CAAW,KAAKnB,WAAL,GAAmBL,YAA9B,CAAP;AACD;;;wBAEiB;AAChB,aAAO,KAAKJ,KAAL,CAAWS,WAAX,GAAyBoB,MAAM,CAACC,gBAAvC;AACD;;;;EAfyCC,eAAMC,S;;;AAqG3C,IAAMC,aAAa,GAAG,+BAAOnC,sBAAP,EAA+BoC,KAA/B,CAE3B,EAF2B,CAAH;AAAA;AAAA;AAAA,4IAIf,UAAAlC,KAAK;AAAA,SAAIA,KAAK,CAACmC,KAAV;AAAA,CAJU,EAMR,UAAAnC,KAAK;AAAA,SAAIA,KAAK,CAACoC,MAAV;AAAA,CANG,CAAnB;;;eAiBQ,yCAAwBH,aAAxB,EAAuC;AACpDhC,EAAAA,OAAO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAD6C,CAAvC,C","sourcesContent":["import { Image } from \"@artsy/palette\"\nimport { FillwidthItem_artwork } from \"__generated__/FillwidthItem_artwork.graphql\"\nimport { SystemContextProps } from \"Artsy\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { data as sd } from \"sharify\"\nimport Badge from \"./Badge\"\nimport Metadata from \"./Metadata\"\nimport SaveButton from \"./Save\"\n\n// @ts-ignore\nimport { Mediator } from \"Artsy\"\n\n// @ts-ignore\nimport styled, { StyledComponentClass } from \"styled-components\"\nimport { get } from \"Utils/get\"\nimport createLogger from \"Utils/logger\"\nimport { userIsAdmin } from \"Utils/user\"\n\nconst logger = createLogger(\"FillwidthItem.tsx\")\n\nconst IMAGE_QUALITY = 80\n\nconst ImageLink = styled.a`\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n`\n\nconst Placeholder = styled.div`\n  position: relative;\n  width: 100%;\n`\n\nexport interface FillwidthItemContainerProps\n  extends SystemContextProps,\n    React.HTMLProps<FillwidthItemContainer> {\n  artwork: FillwidthItem_artwork\n  imageHeight?: number\n  margin?: number\n  mediator?: Mediator\n  onClick?: () => void\n  targetHeight?: number\n  width?: number\n  lazyLoad?: boolean\n}\n\nexport class FillwidthItemContainer extends React.Component<\n  FillwidthItemContainerProps\n> {\n  get imageWidth() {\n    const {\n      artwork: {\n        image: { aspect_ratio },\n      },\n    } = this.props\n\n    return Math.floor(this.imageHeight * aspect_ratio)\n  }\n\n  get imageHeight() {\n    return this.props.imageHeight * window.devicePixelRatio\n  }\n\n  getImageUrl() {\n    const imageURL = this.props.artwork.image.url\n\n    if (!imageURL) {\n      return null\n    }\n\n    const {\n      artwork: {\n        image: { aspect_ratio },\n      },\n    } = this.props\n\n    // Either scale or crop, based on if an aspect ratio is available.\n    const type = aspect_ratio ? \"fit\" : \"fill\"\n\n    // tslint:disable-next-line:max-line-length\n    return `${sd.GEMINI_CLOUDFRONT_URL}/?resize_to=${type}&width=${\n      this.imageWidth\n    }&height=${\n      this.imageHeight\n    }&quality=${IMAGE_QUALITY}&src=${encodeURIComponent(imageURL)}`\n  }\n\n  render() {\n    const {\n      artwork,\n      className,\n      targetHeight,\n      imageHeight,\n      user,\n      mediator,\n      lazyLoad,\n    } = this.props\n\n    let userSpread = {}\n    if (user) {\n      userSpread = { user }\n    }\n    const isAdmin = userIsAdmin(user)\n\n    const image = get(this.props, p => p.artwork.image)\n    if (!image) {\n      const href = get(this.props, p => p.artwork.href, \"(unknown href)\")\n      logger.error(`Artwork at ${href} does not have an image!`)\n      return null\n    }\n\n    return (\n      <div className={className}>\n        <Placeholder style={{ height: targetHeight }}>\n          <ImageLink\n            href={artwork.href}\n            onClick={() => {\n              if (this.props.onClick) {\n                this.props.onClick()\n              }\n            }}\n          >\n            <Image\n              src={this.getImageUrl()}\n              width=\"100%\"\n              height={imageHeight}\n              lazyLoad={lazyLoad}\n              preventRightClick={!isAdmin}\n            />\n          </ImageLink>\n\n          <Badge artwork={artwork} width={this.imageWidth} />\n\n          <SaveButton\n            {...userSpread}\n            mediator={mediator}\n            className=\"artwork-save\"\n            artwork={artwork}\n            style={{ position: \"absolute\", right: \"5px\", bottom: \"5px\" }}\n          />\n        </Placeholder>\n        <Metadata artwork={artwork} extended />\n      </div>\n    )\n  }\n}\n\nexport const FillwidthItem = styled(FillwidthItemContainer).attrs<\n  FillwidthItemContainerProps\n>({})`\n  display: inline-block;\n  width: ${props => props.width}px;\n  vertical-align: top;\n  margin-right: ${props => props.margin}px;\n\n  .artwork-save {\n    opacity: 0;\n  }\n\n  &:hover .artwork-save {\n    opacity: 1;\n  }\n`\n\nexport default createFragmentContainer(FillwidthItem, {\n  artwork: graphql`\n    fragment FillwidthItem_artwork on Artwork {\n      image {\n        url(version: \"large\")\n        aspect_ratio\n      }\n      href\n      ...Metadata_artwork\n      ...Save_artwork\n      ...Badge_artwork\n    }\n  `,\n})\n"],"file":"FillwidthItem.js"}