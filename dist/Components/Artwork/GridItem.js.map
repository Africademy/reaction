{"version":3,"sources":["../../../src/Components/Artwork/GridItem.tsx"],"names":["IMAGE_LAZY_LOADING","Placeholder","styled","div","Image","BaseImage","IMAGE_QUALITY","ArtworkGridItemContainer","isMounted","setState","window","matchMedia","canHover","matches","sd","process","env","imageURL","props","artwork","image","url","width","height","Math","floor","aspect_ratio","type","geminiUrl","GEMINI_CLOUDFRONT_URL","encodeURIComponent","style","className","user","lazyLoad","userSpread","isAdmin","trackableClassName","shouldTrackArtworkImpressions","_id","paddingBottom","placeholder","href","onClick","title","image_title","getImageUrl","position","right","bottom","mediator","track","state","location","pathname","includes","React","Component","ArtworkGridItem"],"mappings":"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","sourcesContent":["import { color, Image as BaseImage } from \"@artsy/palette\"\nimport { GridItem_artwork } from \"__generated__/GridItem_artwork.graphql\"\nimport { Mediator } from \"Artsy\"\nimport { withSystemContext } from \"Artsy\"\nimport { isFunction } from \"lodash\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { data as sd } from \"sharify\"\nimport styled from \"styled-components\"\nimport { userIsAdmin } from \"Utils/user\"\nimport Badge from \"./Badge\"\nimport Metadata from \"./Metadata\"\nimport SaveButton from \"./Save\"\n\nlet IMAGE_LAZY_LOADING = true\n\nconst Placeholder = styled.div`\n  background-color: ${color(\"black10\")};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n`\n\nconst Image = styled(BaseImage)`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n`\n\ninterface Props extends React.HTMLProps<ArtworkGridItemContainer> {\n  artwork: GridItem_artwork\n  lazyLoad?: boolean\n  mediator?: Mediator\n  onClick?: () => void\n  style?: any\n  user?: User\n}\n\ninterface State {\n  isMounted: boolean\n}\n\nconst IMAGE_QUALITY = 80\n\nclass ArtworkGridItemContainer extends React.Component<Props, State> {\n  state = {\n    isMounted: false,\n  }\n\n  canHover: boolean\n\n  componentDidMount() {\n    this.setState({\n      isMounted: true,\n    })\n\n    // Satisfy test runner. See https://github.com/artsy/reaction/blob/master/src/setup_jest.ts#L28\n    if (isFunction(window.matchMedia)) {\n      this.canHover = !window.matchMedia(\"(hover: none)\").matches\n    }\n    IMAGE_LAZY_LOADING =\n      sd.IMAGE_LAZY_LOADING || process.env.IMAGE_LAZY_LOADING === \"true\"\n  }\n\n  getImageUrl() {\n    const imageURL = this.props.artwork.image.url\n    if (!imageURL) {\n      return null\n    }\n\n    const width = 400\n    const height = Math.floor(width / this.props.artwork.image.aspect_ratio)\n    const type = this.props.artwork.image.aspect_ratio ? \"fit\" : \"fill\" // Either scale or crop, based on if an aspect ratio is available.\n    const geminiUrl =\n      sd.GEMINI_CLOUDFRONT_URL || process.env.GEMINI_CLOUDFRONT_URL // fallback, useful if we're yarn linking\n\n    const url = `${geminiUrl}/?resize_to=${type}&width=${width}&height=${height}&quality=${IMAGE_QUALITY}&src=${encodeURIComponent(imageURL)}` // prettier-ignore\n    return url\n  }\n\n  get shouldTrackArtworkImpressions() {\n    let track = false\n    if (this.state.isMounted) {\n      track = window.location.pathname.includes(\"/collect\")\n    }\n    return track\n  }\n\n  render() {\n    const { style, className, artwork, user, lazyLoad = true } = this.props\n\n    let userSpread = {}\n    if (user) {\n      userSpread = { user }\n    }\n    const isAdmin = userIsAdmin(user)\n\n    // the 'artwork-item' className and data-id={artwork._id} are required to\n    // track Artwork impressions\n    const trackableClassName = this.shouldTrackArtworkImpressions\n      ? \"artwork-item\"\n      : \"\"\n\n    return (\n      <div\n        className={`${className} ${trackableClassName}`}\n        data-id={artwork._id}\n        style={style}\n      >\n        <Placeholder style={{ paddingBottom: artwork.image.placeholder }}>\n          <a\n            href={artwork.href}\n            onClick={() => {\n              if (this.props.onClick) {\n                this.props.onClick()\n              }\n            }}\n          >\n            <Image\n              title={artwork.title}\n              alt={artwork.image_title}\n              src={this.getImageUrl()}\n              lazyLoad={IMAGE_LAZY_LOADING && lazyLoad}\n              preventRightClick={!isAdmin}\n            />\n          </a>\n\n          <Badge artwork={artwork} />\n\n          {this.canHover && (\n            <SaveButton\n              className=\"artwork-save\"\n              artwork={artwork}\n              style={{\n                position: \"absolute\",\n                right: \"10px\",\n                bottom: \"10px\",\n              }}\n              {...userSpread}\n              mediator={this.props.mediator}\n            />\n          )}\n        </Placeholder>\n\n        <Metadata artwork={artwork} />\n      </div>\n    )\n  }\n}\n\nexport const ArtworkGridItem = styled(ArtworkGridItemContainer)`\n  .artwork-save {\n    opacity: 0;\n  }\n\n  &:hover .artwork-save {\n    opacity: 1;\n  }\n`\n\nexport default createFragmentContainer(withSystemContext(ArtworkGridItem), {\n  artwork: graphql`\n    fragment GridItem_artwork on Artwork {\n      _id\n      title\n      image_title\n      image {\n        placeholder\n        url(version: \"large\")\n        aspect_ratio\n      }\n      href\n      ...Metadata_artwork\n      ...Save_artwork\n      ...Badge_artwork\n    }\n  `,\n})\n"],"file":"GridItem.js"}