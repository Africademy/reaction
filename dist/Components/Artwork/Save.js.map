{"version":3,"sources":["../../../src/Components/Artwork/Save.tsx"],"names":["SIZE","SaveButton","is_saved","isHovered","props","tracking","artwork","id","_id","trackingData","action","entityInfo","entity_slug","entity_id","trackEvent","user","relay","relayEnvironment","environment","mutation","variables","input","artwork_id","remove","isSaved","optimisticResponse","saveArtwork","__id","onError","error","render","setState","console","onCompleted","trackSave","mediator","contextModule","Schema","ContextModule","ArtworkPage","entity","name","title","intent","AuthModalIntent","SaveArtwork","onClick","handleSave","onMouseEnter","onMouseLeave","style","saveStyle","opacity","fullStyle","iconName","state","iconFontSize","className","mixinButtonActions","verticalAlign","renderCustomButton","renderDefaultButton","React","Component","Container","styled","div","colors","gray","purpleRegular","redMedium","Artsy","withSystemContext"],"mappings":"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","sourcesContent":["import { Save_artwork } from \"__generated__/Save_artwork.graphql\"\nimport { SaveArtworkMutation } from \"__generated__/SaveArtworkMutation.graphql\"\nimport * as Artsy from \"Artsy\"\nimport { track } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { extend, isNull } from \"lodash\"\nimport React from \"react\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport { TrackingProp } from \"react-tracking\"\nimport * as RelayRuntimeTypes from \"relay-runtime\"\nimport styled from \"styled-components\"\nimport { AuthModalIntent, openAuthModal } from \"Utils/openAuthModal\"\nimport colors from \"../../Assets/Colors\"\nimport Icon from \"../Icon\"\n\nconst SIZE = 40\n\nexport interface SaveTrackingProps {\n  context_page?: string\n}\n\nexport interface SaveProps\n  extends Artsy.SystemContextProps,\n    React.HTMLProps<React.ComponentType> {\n  artwork: Save_artwork\n  style?: any\n  relay?: RelayProp\n  relayEnvironment?: RelayRuntimeTypes.Environment\n  mediator?: Artsy.Mediator\n  render?: (props, state) => JSX.Element\n  trackingData?: SaveTrackingProps\n  tracking?: TrackingProp\n}\n\n// TODO: This will be refactored out once Artworks / Grids are full Relay in Force\n// and intermediate local state becomes unnecessary\nexport interface SaveState {\n  is_saved: boolean\n  isHovered: boolean\n}\n\n@track()\nexport class SaveButton extends React.Component<SaveProps, SaveState> {\n  state = {\n    is_saved: null,\n    isHovered: false,\n  }\n\n  get isSaved() {\n    const isSaved = isNull(this.state.is_saved)\n      ? this.props.artwork.is_saved\n      : this.state.is_saved\n\n    return isSaved\n  }\n\n  trackSave = () => {\n    const {\n      tracking,\n      artwork: { is_saved, id, _id },\n    } = this.props\n    const trackingData: SaveTrackingProps = this.props.trackingData || {}\n    const action = is_saved ? \"Removed Artwork\" : \"Saved Artwork\"\n    const entityInfo = {\n      entity_slug: id,\n      entity_id: _id,\n    }\n\n    if (tracking) {\n      tracking.trackEvent(extend({ action }, entityInfo, trackingData))\n    }\n  }\n\n  handleSave() {\n    const { user, artwork, relay, relayEnvironment } = this.props\n    const environment = (relay && relay.environment) || relayEnvironment\n\n    if (environment && user && user.id) {\n      commitMutation<SaveArtworkMutation>(environment, {\n        mutation: graphql`\n          mutation SaveArtworkMutation($input: SaveArtworkInput!) {\n            saveArtwork(input: $input) {\n              artwork {\n                __id\n                id\n                is_saved\n              }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            artwork_id: artwork.id,\n            remove: this.isSaved,\n          },\n        },\n        optimisticResponse: {\n          saveArtwork: {\n            artwork: {\n              __id: artwork.__id,\n              id: artwork.id,\n              is_saved: !this.isSaved,\n            },\n          },\n        },\n        onError: error => {\n          // Revert optimistic update\n          if (this.props.render) {\n            this.setState({\n              is_saved: this.isSaved,\n            })\n          }\n\n          console.error(\"Artwork/Save Error saving artwork: \", error)\n        },\n        onCompleted: ({ saveArtwork }) => {\n          if (this.props.render) {\n            this.setState({\n              is_saved: saveArtwork.artwork.is_saved,\n            })\n          }\n        },\n      })\n      this.trackSave()\n    } else {\n      openAuthModal(this.props.mediator, {\n        contextModule: Schema.ContextModule.ArtworkPage,\n        entity: {\n          id: this.props.artwork.id,\n          name: this.props.artwork.title,\n        },\n        intent: AuthModalIntent.SaveArtwork,\n      })\n    }\n  }\n\n  mixinButtonActions() {\n    return {\n      onClick: () => this.handleSave(),\n      onMouseEnter: () => {\n        this.setState({\n          isHovered: true,\n        })\n      },\n      onMouseLeave: () => {\n        this.setState({\n          isHovered: false,\n        })\n      },\n    }\n  }\n\n  renderDefaultButton() {\n    const { style } = this.props\n    const saveStyle = this.isSaved ? { opacity: 1.0 } : {}\n    const fullStyle = { ...style, ...saveStyle }\n    const iconName =\n      this.isSaved && this.state.isHovered ? \"remove-small\" : \"heart\"\n    const iconFontSize = iconName === \"heart\" ? \"24px\" : \"16px\"\n\n    return (\n      <div\n        className={this.props.className}\n        style={fullStyle}\n        {...this.mixinButtonActions()}\n      >\n        <Container data-saved={this.isSaved}>\n          <Icon\n            name={iconName}\n            height={SIZE}\n            color=\"white\"\n            fontSize={iconFontSize}\n            style={{ verticalAlign: \"middle\" }}\n          />\n        </Container>\n      </div>\n    )\n  }\n\n  renderCustomButton() {\n    return (\n      <div {...this.mixinButtonActions()}>\n        {this.props.render(this.props, this.state)}\n      </div>\n    )\n  }\n\n  render() {\n    return this.props.render\n      ? this.renderCustomButton()\n      : this.renderDefaultButton()\n  }\n}\n\nexport const Container = styled.div`\n  display: block;\n  width: ${SIZE}px;\n  height: ${SIZE}px;\n  text-align: center;\n  cursor: pointer;\n  color: white;\n  background-color: ${colors.gray};\n  background-color: rgba(0, 0, 0, 0.4);\n  border-radius: 50%;\n  font-size: 16px;\n  line-height: ${SIZE}px;\n\n  &:hover {\n    background-color: black;\n  }\n\n  &[data-saved=\"true\"] {\n    background-color: ${colors.purpleRegular};\n\n    &:hover {\n      background-color: ${colors.redMedium};\n    }\n  }\n`\n\nexport default createFragmentContainer(Artsy.withSystemContext(SaveButton), {\n  artwork: graphql`\n    fragment Save_artwork on Artwork {\n      __id\n      _id\n      id\n      is_saved\n      title\n    }\n  `,\n})\n"],"file":"Save.js"}