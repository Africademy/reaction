{"version":3,"sources":["../../../src/Components/Artwork/index.tsx"],"names":["Container","styled","div","ImageContainer","css","theme","flexboxgrid","breakpoints","sm","Image","img","Artwork","isSelected","e","props","Overlay","setState","state","onSelect","artwork","showOverlayOnHover","overlayClasses","onSelected","image","url","extended","React","Component","overlay"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,0BAAOC,GAAV;AAAA;AAAA;AAAA,mBAAf;;AAIA,IAAMC,cAAc,GAAGF,0BAAOC,GAAV;AAAA;AAAA;AAAA,8RA2BZE,qBA3BY,gEA4BSC,eAAMC,WAAN,CAAkBC,WAAlB,CAA8BC,EAA9B,GAAmC,CA5B5C,EAApB;;AAqCA,IAAMC,KAAK,GAAGR,0BAAOS,GAAV;AAAA;AAAA;AAAA,mGAAX;;IA2BaC,O;;;;;;;;;;;;;;;;;;4DAOH;AACNC,MAAAA,UAAU,EAAE;AADN,K;;iEAIK,UAAAC,CAAC,EAAI;AAChB,UAAI,CAAC,MAAKC,KAAL,CAAWC,OAAhB,EAAyB;AACvB;AACD;;AAED,YAAKC,QAAL,CAAc;AACZJ,QAAAA,UAAU,EAAE,CAAC,MAAKK,KAAL,CAAWL;AADZ,OAAd;;AAIA,UAAI,MAAKE,KAAL,CAAWI,QAAf,EAAyB;AACvB,cAAKJ,KAAL,CAAWI,QAAX,CAAoB,CAAC,MAAKD,KAAL,CAAWL,UAAhC;AACD;AACF,K;;;;;;;6BAEQ;AAAA,wBAC0C,KAAKE,KAD/C;AAAA,UACCK,OADD,eACCA,OADD;AAAA,UACUJ,OADV,eACUA,OADV;AAAA,UACmBK,kBADnB,eACmBA,kBADnB;AAEP,UAAIC,cAAc,GAAG,mBAArB;AAEAA,MAAAA,cAAc,IAAID,kBAAkB,GAAG,UAAH,GAAgB,EAApD;AACAC,MAAAA,cAAc,IAAI,KAAKJ,KAAL,CAAWL,UAAX,GAAwB,WAAxB,GAAsC,EAAxD;AAEA,aACE,6BAAC,SAAD;AAAW,QAAA,OAAO,EAAE,KAAKU;AAAzB,SACE,6BAAC,cAAD,QACE,6BAAC,KAAD;AAAO,QAAA,GAAG,EAAEH,OAAO,CAACI,KAAR,CAAcC;AAA1B,QADF,EAEE;AAAK,QAAA,SAAS,EAAEH;AAAhB,SACGN,OAAO,IAAI,6BAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWL;AAA9B,QADd,CAFF,CADF,EAOE,6BAAC,iBAAD;AAAU,QAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWW,QAA/B;AAAyC,QAAA,OAAO,EAAEN;AAAlD,QAPF,CADF;AAWD;;;;EA3C0BO,eAAMC,S;;;;gBAAtBhB,O,kBACW;AACpBc,EAAAA,QAAQ,EAAE,IADU;AAEpBG,EAAAA,OAAO,EAAE,IAFW;AAGpBR,EAAAA,kBAAkB,EAAE;AAHA,C;;eA6CT,yCAAwBT,OAAxB,EAAiC;AAC9CQ,EAAAA,OAAO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADuC,CAAjC,C","sourcesContent":["import { Artwork_artwork } from \"__generated__/Artwork_artwork.graphql\"\nimport React from \"react\"\n// @ts-ignore\nimport { ComponentRef, createFragmentContainer, graphql } from \"react-relay\"\nimport styled, { css } from \"styled-components\"\nimport theme from \"../../Assets/Theme\"\nimport Metadata from \"./Metadata\"\n\nconst Container = styled.div`\n  width: 100%;\n`\n\nconst ImageContainer = styled.div`\n  width: 100%;\n  position: relative;\n  cursor: pointer;\n\n  &::before {\n    content: \"\";\n    display: block;\n    padding-bottom: 100%;\n  }\n\n  & .overlay-container {\n    transition: opacity 0.25s;\n\n    &.hovered {\n      opacity: 0;\n      visibility: hidden;\n    }\n\n    &.selected {\n      opacity: 1;\n      visibility: visible;\n    }\n  }\n\n  &:hover {\n    & .overlay-container.hovered {\n      ${css`\n        @media (min-width: ${theme.flexboxgrid.breakpoints.sm + 1}px) {\n          opacity: 1;\n          visibility: visible;\n        }\n      `};\n    }\n  }\n`\n\nconst Image = styled.img`\n  max-width: 100%;\n  max-height: 100%;\n  margin: auto;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n`\n\nexport interface OverlayProps {\n  selected: boolean\n}\n\nexport interface ArtworkProps {\n  extended?: boolean\n  Overlay?: React.SFC<OverlayProps>\n  artwork: Artwork_artwork\n  onSelect?: (selected: boolean) => void\n  showOverlayOnHover?: boolean\n}\n\nexport interface ArtworkState {\n  isSelected: boolean\n}\n\nexport class Artwork extends React.Component<ArtworkProps, ArtworkState> {\n  static defaultProps = {\n    extended: true,\n    overlay: null,\n    showOverlayOnHover: false,\n  }\n\n  state = {\n    isSelected: false,\n  }\n\n  onSelected = e => {\n    if (!this.props.Overlay) {\n      return\n    }\n\n    this.setState({\n      isSelected: !this.state.isSelected,\n    })\n\n    if (this.props.onSelect) {\n      this.props.onSelect(!this.state.isSelected)\n    }\n  }\n\n  render() {\n    const { artwork, Overlay, showOverlayOnHover } = this.props\n    let overlayClasses = \"overlay-container\"\n\n    overlayClasses += showOverlayOnHover ? \" hovered\" : \"\"\n    overlayClasses += this.state.isSelected ? \" selected\" : \"\"\n\n    return (\n      <Container onClick={this.onSelected}>\n        <ImageContainer>\n          <Image src={artwork.image.url} />\n          <div className={overlayClasses}>\n            {Overlay && <Overlay selected={this.state.isSelected} />}\n          </div>\n        </ImageContainer>\n        <Metadata extended={this.props.extended} artwork={artwork} />\n      </Container>\n    )\n  }\n}\n\nexport default createFragmentContainer(Artwork, {\n  artwork: graphql`\n    fragment Artwork_artwork on Artwork {\n      id\n      image {\n        url(version: \"large\")\n        aspect_ratio\n      }\n      ...Metadata_artwork\n    }\n  `,\n})\n"],"file":"index.js"}