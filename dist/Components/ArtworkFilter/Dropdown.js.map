{"version":3,"sources":["../../../src/Components/ArtworkFilter/Dropdown.tsx"],"names":["Dropdown","props","state","isHovered","selected","nextProps","setState","value","slice","onSelected","id","selectedCount","aggregation","counts","count","name","labels","labelMap","toLowerCase","selectedName","getSelectedName","navItems","map","onSelect","format","unshift","plural","buttonColor","buttonTextColor","superLabelColor","navStyle","display","colors","purpleRegular","labelText","label","superLabelText","className","toggleHover","backgroundColor","color","position","right","lineHeight","React","Component","Button","styled","div","grayRegular","Nav","SuperLabel","NavItem","grayBold","NavItemCount","span","graySemibold","StyledDropdown"],"mappings":"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","sourcesContent":["import { Dropdown_aggregation } from \"__generated__/Dropdown_aggregation.graphql\"\nimport { find } from \"lodash\"\nimport numeral from \"numeral\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\nimport colors from \"../../Assets/Colors\"\nimport { avantgarde, garamond } from \"../../Assets/Fonts\"\nimport Icon from \"../Icon\"\nimport { labelMap } from \"./ParamMap\"\n\ninterface DropdownProps extends React.HTMLProps<Dropdown> {\n  aggregation: Dropdown_aggregation\n  onSelected?: (slice: string, value: string) => void\n  selected?: any\n}\n\ninterface DropdownState {\n  isHovered: boolean\n  selected: any\n}\n\nexport class Dropdown extends React.Component<DropdownProps, DropdownState> {\n  constructor(props: DropdownProps) {\n    super(props)\n    this.state = {\n      isHovered: false,\n      selected: props.selected || {},\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({ selected: nextProps.selected })\n  }\n\n  toggleHover(value) {\n    this.setState({\n      isHovered: value,\n    })\n  }\n\n  onSelect(slice: string, value: string) {\n    this.setState({\n      selected: value,\n      isHovered: false,\n    })\n    this.props.onSelected(slice, value)\n  }\n\n  getSelectedName(id) {\n    const selectedCount = find(\n      this.props.aggregation.counts,\n      count => count.id === id\n    )\n    return selectedCount ? selectedCount.name : null\n  }\n\n  render() {\n    const slice = this.props.aggregation.slice\n    const labels = labelMap[this.props.aggregation.slice.toLowerCase()]\n    const selectedName = this.getSelectedName(this.state.selected)\n\n    const navItems = this.props.aggregation.counts.map(count => {\n      return (\n        <NavItem key={count.id} onClick={() => this.onSelect(slice, count.id)}>\n          <span>{count.name}</span>\n          <NavItemCount>\n            &nbsp;(\n            {numeral(count.count).format(\"0,0\")})\n          </NavItemCount>\n        </NavItem>\n      )\n    })\n\n    navItems.unshift(\n      <NavItem key=\"all\" onClick={() => this.onSelect(slice, \"*\")}>\n        <span>All {labels.plural}</span>\n      </NavItem>\n    )\n\n    let buttonColor = \"white\"\n    let buttonTextColor = \"black\"\n    let superLabelColor = \"black\"\n    let navStyle = { display: \"none\" }\n\n    if (selectedName) {\n      buttonTextColor = colors.purpleRegular\n    }\n\n    if (this.state.isHovered) {\n      buttonColor = \"black\"\n      buttonTextColor = \"white\"\n      superLabelColor = \"white\"\n      navStyle = { display: \"block\" }\n    }\n\n    const labelText = selectedName || labels.label\n    const superLabelText = selectedName ? labels.label : null\n\n    return (\n      <div\n        className={this.props.className}\n        onMouseEnter={() => this.toggleHover(true)}\n        onMouseLeave={() => this.toggleHover(false)}\n      >\n        <Button\n          style={{ backgroundColor: buttonColor, color: buttonTextColor }}\n        >\n          {superLabelText && (\n            <SuperLabel style={{ color: superLabelColor }}>\n              {superLabelText}\n            </SuperLabel>\n          )}\n          {labelText}\n          <Icon\n            name=\"arrow-down\"\n            fontSize=\"9px\"\n            color={buttonTextColor}\n            style={{ position: \"absolute\", right: 15, lineHeight: \"inherit\" }}\n          />\n        </Button>\n        <Nav style={navStyle}>{navItems}</Nav>\n      </div>\n    )\n  }\n}\n\nconst Button = styled.div`\n  ${avantgarde(\"s13\")};\n  background: white;\n  color: black;\n  border: 1px solid ${colors.grayRegular};\n  display: inline-block;\n  line-height: 160%;\n  padding: 15px 35px 15px 18px;\n  vertical-align: middle;\n  max-width: 120px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nconst Nav = styled.div`\n  z-index: 2;\n  background: black;\n  position: absolute;\n  top: 45px;\n  left: 1px;\n  width: 300px;\n  border: 1px solid #333;\n`\n\nconst SuperLabel = styled.div`\n  position: absolute;\n  font-size: 9px;\n  margin-top: -15px;\n  color: black;\n`\n\nconst NavItem = styled.div`\n  ${garamond(\"s11\")};\n  text-align: left;\n  color: white;\n  display: block;\n  border-bottom: 1px solid #333;\n  padding: 15px 18px 10px 18px;\n  text-transform: capitalize;\n\n  &:hover {\n    background: ${colors.grayBold};\n  }\n`\nconst NavItemCount = styled.span`\n  color: ${colors.graySemibold};\n`\n\nconst StyledDropdown = styled(Dropdown)`\n  position: relative;\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -1px;\n`\n\nexport default createFragmentContainer(StyledDropdown, {\n  aggregation: graphql`\n    fragment Dropdown_aggregation on ArtworksAggregationResults {\n      slice\n      counts {\n        name\n        id\n        count\n      }\n    }\n  `,\n})\n"],"file":"Dropdown.js"}