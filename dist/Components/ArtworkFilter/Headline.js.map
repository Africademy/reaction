{"version":3,"sources":["../../../src/Components/ArtworkFilter/Headline.tsx"],"names":["Headline","aggregation","id","selectedAggregation","props","aggregations","agg","slice","toUpperCase","selectedCount","counts","count","name","dimension_range","getCountName","medium","facet","price_range","for_sale","headline","size","priceRange","forSale","join","charAt","substr","className","renderHeadline","React","Component","StyledHeadline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAWaA,Q;;;;;;;;;;;;;iCACEC,W,EAAaC,E,EAAI;AAC5B,UAAMC,mBAAmB,GAAG,oBAC1B,KAAKC,KAAL,CAAWC,YADe,EAE1B,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,KAAJ,KAAcN,WAAW,CAACO,WAAZ,EAAlB;AAAA,OAFuB,CAA5B;AAIA,UAAMC,aAAa,GAAG,oBACpBN,mBAAmB,CAACO,MADA,EAEpB,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACT,EAAN,KAAaA,EAAjB;AAAA,OAFe,CAAtB;AAIA,aAAOO,aAAa,GAAGA,aAAa,CAACG,IAAjB,GAAwB,IAA5C;AACD;;;2BAEM;AAAA,UACGC,eADH,GACuB,KAAKT,KAD5B,CACGS,eADH;;AAGL,UAAIA,eAAe,IAAIA,eAAe,KAAK,GAA3C,EAAgD;AAC9C,eAAO,KAAKC,YAAL,CAAkB,iBAAlB,EAAqCD,eAArC,CAAP;AACD;;AACD,aAAO,KAAP;AACD;;;6BAEQ;AAAA,wBACmB,KAAKT,KADxB;AAAA,UACCW,MADD,eACCA,MADD;AAAA,UACSC,KADT,eACSA,KADT;;AAEP,UAAID,MAAM,IAAIA,MAAM,KAAK,GAAzB,EAA8B;AAC5B,eAAO,KAAKD,YAAL,CAAkB,QAAlB,EAA4BC,MAA5B,CAAP;AACD;;AAED,UAAIC,KAAK,IAAIA,KAAK,CAACJ,IAAnB,EAAyB;AACvB,eAAOI,KAAK,CAACJ,IAAb;AACD;;AAED,aAAO,OAAP;AACD;;;iCAEY;AAAA,UACHK,WADG,GACa,KAAKb,KADlB,CACHa,WADG;;AAGX,UAAIA,WAAW,IAAIA,WAAW,KAAK,GAAnC,EAAwC;AACtC,eAAO,KAAKH,YAAL,CAAkB,aAAlB,EAAiCG,WAAjC,CAAP;AACD;;AACD,aAAO,KAAP;AACD;;;8BAES;AACR,UAAI,KAAKb,KAAL,CAAWc,QAAf,EAAyB;AACvB,eAAO,UAAP;AACD;;AACD,aAAO,KAAP;AACD;;;qCAEgB;AACf,UAAMC,QAAQ,GAAG,uBAAQ,CACvB,KAAKC,IAAL,EADuB,EAEvB,KAAKL,MAAL,EAFuB,EAGvB,KAAKM,UAAL,EAHuB,EAIvB,KAAKC,OAAL,EAJuB,CAAR,EAKdC,IALc,CAKT,GALS,CAAjB;;AAMA,UAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACxB,eAAO,UAAP;AACD;;AACD,aAAOA,QAAQ,CAACK,MAAT,CAAgB,CAAhB,EAAmBhB,WAAnB,KAAmCW,QAAQ,CAACM,MAAT,CAAgB,CAAhB,CAA1C;AACD;;;6BAEQ;AACP,aAAO;AAAI,QAAA,SAAS,EAAE,KAAKrB,KAAL,CAAWsB;AAA1B,SAAsC,KAAKC,cAAL,EAAtC,CAAP;AACD;;;;EAlE2BC,eAAMC,S;;;AAqEpC,IAAMC,cAAc,GAAG,+BAAO9B,QAAP,CAAH;AAAA;AAAA;AAAA,wDAChB,qBAAS,KAAT,CADgB,CAApB;;eAOe,yCAAwB8B,cAAxB,EAAwC;AACrDd,EAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADgD,CAAxC,C","sourcesContent":["import { garamond } from \"Assets/Fonts\"\nimport { compact, find } from \"lodash\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\n\ninterface Props extends React.HTMLProps<Headline> {\n  aggregations?: any\n  medium: string\n  price_range: string\n  dimension_range: string\n  for_sale: boolean\n  facet?: any\n}\n\nexport class Headline extends React.Component<Props, null> {\n  getCountName(aggregation, id) {\n    const selectedAggregation = find(\n      this.props.aggregations,\n      agg => agg.slice === aggregation.toUpperCase()\n    )\n    const selectedCount = find(\n      selectedAggregation.counts,\n      count => count.id === id\n    )\n    return selectedCount ? selectedCount.name : null\n  }\n\n  size() {\n    const { dimension_range } = this.props\n\n    if (dimension_range && dimension_range !== \"*\") {\n      return this.getCountName(\"dimension_range\", dimension_range)\n    }\n    return false\n  }\n\n  medium() {\n    const { medium, facet } = this.props\n    if (medium && medium !== \"*\") {\n      return this.getCountName(\"medium\", medium)\n    }\n\n    if (facet && facet.name) {\n      return facet.name\n    }\n\n    return \"Works\"\n  }\n\n  priceRange() {\n    const { price_range } = this.props\n\n    if (price_range && price_range !== \"*\") {\n      return this.getCountName(\"price_range\", price_range)\n    }\n    return false\n  }\n\n  forSale() {\n    if (this.props.for_sale) {\n      return \"For Sale\"\n    }\n    return false\n  }\n\n  renderHeadline() {\n    const headline = compact([\n      this.size(),\n      this.medium(),\n      this.priceRange(),\n      this.forSale(),\n    ]).join(\" \")\n    if (headline === \"works\") {\n      return \"Artworks\"\n    }\n    return headline.charAt(0).toUpperCase() + headline.substr(1)\n  }\n\n  render() {\n    return <h1 className={this.props.className}>{this.renderHeadline()}</h1>\n  }\n}\n\nconst StyledHeadline = styled(Headline)`\n  ${garamond(\"s11\")};\n  font-weight: normal;\n  margin: 0;\n  font-size: 2em;\n`\n\nexport default createFragmentContainer(StyledHeadline, {\n  facet: graphql`\n    fragment Headline_facet on ArtworkFilterFacet {\n      ... on ArtworkFilterTag {\n        name\n      }\n      ... on ArtworkFilterGene {\n        name\n      }\n    }\n  `,\n})\n"],"file":"Headline.js"}