{"version":3,"sources":["../../../src/Components/ArtworkGrid/ArtworkGrid.tsx"],"names":["ArtworkGridContainer","interval","loading","columnCount","artworks","map","n","createSectionedArtworks","areSectionedArtworksEqual","props","onLoadMore","setInterval","maybeLoadMore","setState","state","clearInterval","threshold","window","innerHeight","scrollY","el","ReactDOM","findDOMNode","clientHeight","scrollTop","sectionedArtworks","preloadImageCount","spacerStyle","height","itemMargin","sections","i","artworkComponents","j","artwork","push","__id","mediator","onBrickClick","length","sectionSpecificStyle","flex","minWidth","marginRight","sectionMargin","_columnCount","renderSectionsForSingleBreakpoint","sectionedArtworksForAllBreakpoints","columnBreakpointProps","count","className","renderChildren","onClearFilters","emptyStateComponent","hasArtworks","edges","artworkGrids","renderSectionsForAllBreakpoints","emptyState","React","Component","ArtworkGrid","InnerContainer","Flex","current","previous","Array","isArray","currentEdges","previousEdges","every","e","node","artworksConnection","sectionRatioSums","forEach","artworkEdge","image","lowestRatioSum","Number","MAX_VALUE","sectionIndex","ratioSum","section","aspectRatio","aspect_ratio"],"mappings":"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","sourcesContent":["import { Flex } from \"@artsy/palette\"\nimport { ArtworkGrid_artworks } from \"__generated__/ArtworkGrid_artworks.graphql\"\nimport { Mediator } from \"Artsy\"\nimport { ArtworkGridEmptyState } from \"Components/ArtworkGrid/ArtworkGridEmptyState\"\nimport { isEqual } from \"lodash\"\nimport memoizeOnce from \"memoize-one\"\nimport React, { ReactNode } from \"react\"\nimport ReactDOM from \"react-dom\"\n// @ts-ignore\nimport { ComponentRef, createFragmentContainer, graphql } from \"react-relay\"\n// @ts-ignore\nimport styled, { StyledComponentClass } from \"styled-components\"\nimport { Media, valuesWithBreakpointProps } from \"Utils/Responsive\"\nimport GridItem from \"../Artwork/GridItem\"\n\ntype SectionedArtworks = Array<Array<ArtworkGrid_artworks[\"edges\"][0][\"node\"]>>\n\ntype Artwork = ArtworkGrid_artworks[\"edges\"][0][\"node\"]\n\nexport interface ArtworkGridProps\n  extends React.HTMLProps<ArtworkGridContainer> {\n  artworks: ArtworkGrid_artworks\n  columnCount?: number | number[]\n  preloadImageCount?: number\n  itemMargin?: number\n  mediator?: Mediator\n  onBrickClick?: (artwork?: Artwork) => void\n  onClearFilters?: () => any\n  onLoadMore?: () => any\n  sectionMargin?: number\n  user?: User\n  emptyStateComponent?: ReactNode | boolean\n}\n\nexport interface ArtworkGridContainerState {\n  loading: boolean\n  interval: any\n}\n\nexport class ArtworkGridContainer extends React.Component<\n  ArtworkGridProps,\n  ArtworkGridContainerState\n> {\n  static defaultProps = {\n    columnCount: [3],\n    sectionMargin: 20,\n    itemMargin: 20,\n    preloadImageCount: 6,\n  }\n\n  state = {\n    interval: null,\n    loading: false,\n  }\n\n  private get _columnCount(): number[] {\n    const columnCount = this.props.columnCount\n    return typeof columnCount === \"number\" ? [columnCount] : columnCount\n  }\n\n  componentDidMount() {\n    if (this.props.onLoadMore) {\n      const interval = setInterval(() => {\n        this.maybeLoadMore()\n      }, 150)\n      this.setState({ interval })\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.interval) {\n      clearInterval(this.state.interval)\n    }\n  }\n\n  columnBreakpointProps = memoizeOnce(\n    (columnCount: number[]) => valuesWithBreakpointProps(columnCount),\n    isEqual\n  )\n\n  // TODO: This will still re-calculate column layout from scratch when new\n  //       artworks are added (paginated). Ideally it would just continue\n  //       calculations from where it finished last time.\n  sectionedArtworksForAllBreakpoints: (\n    artworks: ArtworkGrid_artworks,\n    columnCount: number[]\n  ) => SectionedArtworks[] = memoizeOnce(\n    (artworks, columnCount) =>\n      columnCount.map(n => createSectionedArtworks(artworks, n)),\n    areSectionedArtworksEqual\n  )\n\n  maybeLoadMore() {\n    const threshold = window.innerHeight + window.scrollY\n    const el = ReactDOM.findDOMNode(this) as Element\n    if (threshold >= el.clientHeight + el.scrollTop) {\n      this.props.onLoadMore()\n    }\n  }\n\n  renderSectionsForSingleBreakpoint(\n    columnCount: number,\n    sectionedArtworks: SectionedArtworks\n  ) {\n    const { preloadImageCount } = this.props\n    const spacerStyle = {\n      height: this.props.itemMargin,\n    }\n    const sections = []\n\n    for (let i = 0; i < columnCount; i++) {\n      const artworkComponents = []\n      for (let j = 0; j < sectionedArtworks[i].length; j++) {\n        const artwork = sectionedArtworks[i][j]\n        artworkComponents.push(\n          <GridItem\n            artwork={artwork}\n            key={artwork.__id}\n            mediator={this.props.mediator}\n            lazyLoad={i + j >= preloadImageCount}\n            onClick={() => {\n              if (this.props.onBrickClick) {\n                this.props.onBrickClick(artwork)\n              }\n            }}\n          />\n        )\n        // Setting a marginBottom on the artwork component didn’t work, so using a spacer view instead.\n        if (j < sectionedArtworks[i].length - 1) {\n          artworkComponents.push(\n            <div style={spacerStyle} key={\"spacer-\" + j + \"-\" + artwork.__id} />\n          )\n        }\n      }\n\n      const sectionSpecificStyle = {\n        flex: 1,\n        minWidth: 0,\n        marginRight: i === columnCount - 1 ? 0 : this.props.sectionMargin,\n      }\n\n      sections.push(\n        <div style={sectionSpecificStyle} key={i}>\n          {artworkComponents}\n        </div>\n      )\n    }\n    return sections\n  }\n\n  renderSectionsForAllBreakpoints() {\n    const columnCount = this._columnCount\n\n    // Only 1 column ever, so no need to wrap.\n    if (this._columnCount.length === 1) {\n      return this.renderSectionsForSingleBreakpoint(\n        columnCount[0],\n        this.sectionedArtworksForAllBreakpoints(\n          this.props.artworks,\n          columnCount\n        )[0]\n      )\n    }\n\n    const columnBreakpointProps = this.columnBreakpointProps(columnCount)\n    const sectionedArtworksForAllBreakpoints = this.sectionedArtworksForAllBreakpoints(\n      this.props.artworks,\n      columnBreakpointProps.map(([n]) => n)\n    )\n\n    return columnBreakpointProps.map(([count, props], i) => (\n      // We always create all Media instances, so using i as key is fine.\n      <Media {...props} key={i}>\n        {(className, renderChildren) => (\n          <InnerContainer className={className}>\n            {renderChildren &&\n              this.renderSectionsForSingleBreakpoint(\n                count,\n                sectionedArtworksForAllBreakpoints[i]\n              )}\n          </InnerContainer>\n        )}\n      </Media>\n    ))\n  }\n\n  render() {\n    const {\n      artworks,\n      className,\n      onClearFilters,\n      emptyStateComponent,\n    } = this.props\n\n    const hasArtworks = artworks && artworks.edges && artworks.edges.length > 0\n    const artworkGrids = this.renderSectionsForAllBreakpoints()\n    const emptyState = emptyStateComponent || (\n      <ArtworkGridEmptyState onClearFilters={onClearFilters} />\n    )\n\n    return (\n      <div className={className}>{hasArtworks ? artworkGrids : emptyState}</div>\n    )\n  }\n}\n\nexport const ArtworkGrid = styled(ArtworkGridContainer)`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\n\nconst InnerContainer = styled(Flex)`\n  width: 100%;\n`\n\nexport default createFragmentContainer(ArtworkGrid, {\n  artworks: graphql`\n    fragment ArtworkGrid_artworks on ArtworkConnection {\n      edges {\n        node {\n          __id\n          id\n          href\n          image {\n            aspect_ratio\n          }\n          ...GridItem_artwork\n        }\n      }\n    }\n  `,\n})\n\n/**\n * Performs a shallow equal of artworks.\n */\nfunction areSectionedArtworksEqual(current: any, previous: any) {\n  if (Array.isArray(current)) {\n    return isEqual(current, previous)\n  } else {\n    const currentEdges = (current as ArtworkGrid_artworks).edges\n    const previousEdges = (previous as ArtworkGrid_artworks).edges\n    return (\n      currentEdges.length === previousEdges.length &&\n      currentEdges.every((e, i) => e.node.__id === previousEdges[i].node.__id)\n    )\n  }\n}\n\nexport function createSectionedArtworks(\n  artworksConnection: ArtworkGrid_artworks,\n  columnCount: number\n): SectionedArtworks {\n  const sectionedArtworks: SectionedArtworks = []\n  const sectionRatioSums = []\n  const artworks = artworksConnection ? artworksConnection.edges : []\n\n  for (let i = 0; i < columnCount; i++) {\n    sectionedArtworks.push([])\n    sectionRatioSums.push(0)\n  }\n\n  artworks.forEach(artworkEdge => {\n    const artwork = artworkEdge.node\n\n    // There are artworks without images and other ‘issues’. Like Force we’re just going to reject those for now.\n    // See: https://github.com/artsy/eigen/issues/1667\n    if (artwork.image) {\n      // Find section with lowest *inverted* aspect ratio sum, which is the shortest column.\n      let lowestRatioSum = Number.MAX_VALUE\n      let sectionIndex = null\n      for (let j = 0; j < sectionRatioSums.length; j++) {\n        const ratioSum = sectionRatioSums[j]\n        if (ratioSum < lowestRatioSum) {\n          sectionIndex = j\n          lowestRatioSum = ratioSum\n        }\n      }\n\n      if (sectionIndex != null) {\n        const section = sectionedArtworks[sectionIndex]\n        section.push(artwork)\n\n        // Keep track of total section aspect ratio\n        const aspectRatio = artwork.image.aspect_ratio || 1 // Ensure we never divide by null/0\n        // Invert the aspect ratio so that a lower value means a shorter section.\n        sectionRatioSums[sectionIndex] += 1 / aspectRatio\n      }\n    }\n  })\n\n  return sectionedArtworks\n}\n"],"file":"ArtworkGrid.js"}