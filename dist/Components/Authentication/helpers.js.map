{"version":3,"sources":["../../../src/Components/Authentication/helpers.ts"],"names":["handleSubmit","url","csrf","redirectTo","values","formikBag","sendAuthData","_csrf","data","success","document","location","pathname","setStatus","fetch","headers","Accept","method","credentials","body","JSON","stringify","res","json","checkEmail","relayEnvironment","actions","shouldExist","query","email","then","user","userAlreadyExists","setFieldError","setSubmitting"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;;;;;;;;;;;AAEO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAC1BC,GAD0B,EAE1BC,IAF0B,EAG1BC,UAH0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAIvB,iBAAOC,MAAP,EAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEkBC,YAAY,CAACL,GAAD;AAAQM,kBAAAA,KAAK,EAAEL;AAAf,mBAAwBE,MAAxB,EAF9B;;AAAA;AAEKI,gBAAAA,IAFL;;AAGD,oBAAIA,IAAI,CAACC,OAAT,EAAkB;AAChB,sBAAIN,UAAJ,EAAgB;AACdO,oBAAAA,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,GAA6BT,UAA7B;AACD;AACF,iBAJD,MAIO;AACLE,kBAAAA,SAAS,CAACQ,SAAV,CAAoBL,IAApB;AACD;;AATA;AAAA;;AAAA;AAAA;AAAA;AAWDH,gBAAAA,SAAS,CAACQ,SAAV;;AAXC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;;;SAmBeP,Y;;;;;;;0BAAf,kBACLL,GADK,EAELG,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIaU,KAAK,CAACb,GAAD,EAAM;AAC3Bc,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB,kBAFT;AAGP,oCAAoB;AAHb,eADkB;AAM3BC,cAAAA,MAAM,EAAE,MANmB;AAO3BC,cAAAA,WAAW,EAAE,aAPc;AAQ3BC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,MAAf;AARqB,aAAN,CAJlB;;AAAA;AAICkB,YAAAA,GAJD;AAAA;AAAA,mBAccA,GAAG,CAACC,IAAJ,EAdd;;AAAA;AAcCf,YAAAA,IAdD;AAAA,8CAeEA,IAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,IAAMgB,UAAU,GAAG,SAAbA,UAAa,QAKpB;AAAA,MAJJC,gBAII,SAJJA,gBAII;AAAA,MAHJrB,MAGI,SAHJA,MAGI;AAAA,MAFJsB,OAEI,SAFJA,OAEI;AAAA,MADJC,WACI,SADJA,WACI;;AACJ,MAAMC,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,IAAX;;AAOA,SAAO,8BAAsCH,gBAAtC,EAAwDG,KAAxD,EAA+D;AACpEC,IAAAA,KAAK,EAAEzB,MAAM,CAACyB;AADsD,GAA/D,EAEJC,IAFI,CAEC,UAACtB,IAAD,EAAe;AACrB,QAAIA,IAAI,CAACuB,IAAL,IAAavB,IAAI,CAACuB,IAAL,CAAUC,iBAA3B,EAA8C;AAC5C,UAAIL,WAAJ,EAAiB;AACf,eAAO,IAAP;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACO,aAAR,CAAsB,OAAtB,EAA+B,uBAA/B;AACAP,QAAAA,OAAO,CAACQ,aAAR,CAAsB,KAAtB;AACA,eAAO,KAAP;AACD;AACF,KARD,MAQO;AACL,UAAIP,WAAJ,EAAiB;AACfD,QAAAA,OAAO,CAACO,aAAR,CAAsB,OAAtB,EAA+B,uBAA/B;AACAP,QAAAA,OAAO,CAACQ,aAAR,CAAsB,KAAtB;AACA,eAAO,KAAP;AACD,OAJD,MAIO;AACL,eAAO,IAAP;AACD;AACF;AACF,GApBM,CAAP;AAqBD,CAlCM","sourcesContent":["import { helpersEmailQueryResponse } from \"__generated__/helpersEmailQuery.graphql\"\nimport { graphql } from \"react-relay\"\nimport { fetchQuery } from \"relay-runtime\"\n\nexport const handleSubmit = (\n  url: string,\n  csrf: string,\n  redirectTo?: string\n) => async (values, formikBag) => {\n  try {\n    const data = await sendAuthData(url, { _csrf: csrf, ...values })\n    if (data.success) {\n      if (redirectTo) {\n        document.location.pathname = redirectTo\n      }\n    } else {\n      formikBag.setStatus(data)\n    }\n  } catch (err) {\n    formikBag.setStatus(err)\n  }\n}\n\nexport async function sendAuthData(\n  url: string,\n  values: { [key: string]: any; _csrf: string }\n) {\n  const res = await fetch(url, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n    },\n    method: \"POST\",\n    credentials: \"same-origin\",\n    body: JSON.stringify(values),\n  })\n  const data = await res.json()\n  return data\n}\n\nexport const checkEmail = ({\n  relayEnvironment,\n  values,\n  actions,\n  shouldExist,\n}) => {\n  const query = graphql`\n    query helpersEmailQuery($email: String!) {\n      user(email: $email) {\n        userAlreadyExists\n      }\n    }\n  `\n  return fetchQuery<helpersEmailQueryResponse>(relayEnvironment, query, {\n    email: values.email,\n  }).then((data: any) => {\n    if (data.user && data.user.userAlreadyExists) {\n      if (shouldExist) {\n        return true\n      } else {\n        actions.setFieldError(\"email\", \"Email already exists.\")\n        actions.setSubmitting(false)\n        return false\n      }\n    } else {\n      if (shouldExist) {\n        actions.setFieldError(\"email\", \"Email does not exist.\")\n        actions.setSubmitting(false)\n        return false\n      } else {\n        return true\n      }\n    }\n  })\n}\n"],"file":"helpers.js"}