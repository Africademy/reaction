{"version":3,"sources":["../../src/Components/BorderedPulldown.tsx"],"names":["BorderedPulldown","selected","isHovered","value","setState","option","props","onChange","options","defaultValue","selectedName","optionEls","map","val","name","displayValue","state","pulldownStyles","display","className","toggleHover","colors","grayMedium","React","Component","StyledBorderedPulldown","grayBold","Toggle","styled","div","CaretHolder","PulldownOptions","gray"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAGA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAeaA,gB;;;;;;;;;;;;;;;;;;4DAIH;AACNC,MAAAA,QAAQ,EAAE,IADJ;AAENC,MAAAA,SAAS,EAAE;AAFL,K;;;;;;;gCAKIC,K,EAAO;AACjB,WAAKC,QAAL,CAAc;AACZF,QAAAA,SAAS,EAAEC;AADC,OAAd;AAGD;;;6BAEQE,M,EAAQ;AACf,WAAKD,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAEI,MADE;AAEZH,QAAAA,SAAS,EAAE;AAFC,OAAd;AAIA,WAAKI,KAAL,CAAWC,QAAX,CAAoBF,MAApB;AACD;;;6BAEQ;AAAA;;AAAA,wBACyC,KAAKC,KAD9C;AAAA,UACCE,OADD,eACCA,OADD;AAAA,UACUC,YADV,eACUA,YADV;AAAA,UACwBC,YADxB,eACwBA,YADxB;AAGP,UAAMC,SAAS,GAAGH,OAAO,CAACI,GAAR,CAAY,UAAAP,MAAM,EAAI;AACtC,eACE;AAAG,UAAA,GAAG,EAAEA,MAAM,CAACQ,GAAf;AAAoB,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACN,QAAL,CAAcF,MAAd,CAAN;AAAA;AAA7B,WACGA,MAAM,CAACS,IADV,CADF;AAKD,OANiB,CAAlB;AAQA,UAAMC,YAAY,GACf,KAAKC,KAAL,CAAWf,QAAX,IAAuB,KAAKe,KAAL,CAAWf,QAAX,CAAoBa,IAA5C,IACAJ,YADA,IAEAD,YAHF;AAIA,UAAIQ,cAAc,GAAG,EAArB;;AAEA,UAAI,KAAKD,KAAL,CAAWd,SAAf,EAA0B;AACxBe,QAAAA,cAAc,GAAG;AACfC,UAAAA,OAAO,EAAE;AADM,SAAjB;AAGD;;AAED,aACE;AACE,QAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWa,SADxB;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAM,MAAI,CAACC,WAAL,CAAiB,IAAjB,CAAN;AAAA,SAFhB;AAGE,QAAA,YAAY,EAAE;AAAA,iBAAM,MAAI,CAACA,WAAL,CAAiB,KAAjB,CAAN;AAAA;AAHhB,SAKE,6BAAC,MAAD,QACE,2CAAOL,YAAP,CADF,EAEE,6BAAC,WAAD,QACE,6BAAC,aAAD;AAAM,QAAA,IAAI,EAAC,YAAX;AAAwB,QAAA,QAAQ,EAAC,KAAjC;AAAuC,QAAA,KAAK,EAAEM,gBAAOC;AAArD,QADF,CAFF,CALF,EAWE,6BAAC,eAAD;AAAiB,QAAA,KAAK,EAAEL;AAAxB,SAAyCN,SAAzC,CAXF,CADF;AAeD;;;;EA7DmCY,eAAMC,S;;;AAgE5C,IAAMC,sBAAsB,GAAG,+BAAOzB,gBAAP,CAAH;AAAA;AAAA;AAAA,2KACxB,qBAAS,KAAT,CADwB,EAKNqB,gBAAOC,UALD,EAWbD,gBAAOK,QAXM,CAA5B;;AAgBA,IAAMC,MAAM,GAAGC,0BAAOC,GAAV;AAAA;AAAA;AAAA,gEAAZ;;AAMA,IAAMC,WAAW,GAAGF,0BAAOC,GAAV;AAAA;AAAA;AAAA,iEAGUR,gBAAOC,UAHjB,CAAjB;;AAMA,IAAMS,eAAe,GAAGH,0BAAOC,GAAV;AAAA;AAAA;AAAA,oPAICR,gBAAOC,UAJR,EAkBKD,gBAAOW,IAlBZ,CAArB;;eAuBeP,sB","sourcesContent":["import React from \"react\"\n\nimport Icon from \"./Icon\"\n\n// @ts-ignore\nimport styled, { StyledComponentClass } from \"styled-components\"\nimport colors from \"../Assets/Colors\"\nimport { garamond } from \"../Assets/Fonts\"\n\nexport interface BorderedPullDownProps\n  extends React.HTMLProps<BorderedPulldown> {\n  options: any\n  defaultValue: string\n  onChange?: any\n  selectedName?: string\n}\n\nexport interface BorderedPulldownState {\n  selected: any\n  isHovered: boolean\n}\n\nexport class BorderedPulldown extends React.Component<\n  BorderedPullDownProps,\n  BorderedPulldownState\n> {\n  state = {\n    selected: null,\n    isHovered: false,\n  }\n\n  toggleHover(value) {\n    this.setState({\n      isHovered: value,\n    })\n  }\n\n  onChange(option) {\n    this.setState({\n      selected: option,\n      isHovered: false,\n    })\n    this.props.onChange(option)\n  }\n\n  render() {\n    const { options, defaultValue, selectedName } = this.props\n\n    const optionEls = options.map(option => {\n      return (\n        <a key={option.val} onClick={() => this.onChange(option)}>\n          {option.name}\n        </a>\n      )\n    })\n\n    const displayValue =\n      (this.state.selected && this.state.selected.name) ||\n      selectedName ||\n      defaultValue\n    let pulldownStyles = {}\n\n    if (this.state.isHovered) {\n      pulldownStyles = {\n        display: \"block\",\n      }\n    }\n\n    return (\n      <div\n        className={this.props.className}\n        onMouseEnter={() => this.toggleHover(true)}\n        onMouseLeave={() => this.toggleHover(false)}\n      >\n        <Toggle>\n          <span>{displayValue}</span>\n          <CaretHolder>\n            <Icon name=\"arrow-down\" fontSize=\"9px\" color={colors.grayMedium} />\n          </CaretHolder>\n        </Toggle>\n        <PulldownOptions style={pulldownStyles}>{optionEls}</PulldownOptions>\n      </div>\n    )\n  }\n}\n\nconst StyledBorderedPulldown = styled(BorderedPulldown)`\n  ${garamond(\"s17\")};\n  display: inline-block;\n  width: 200px;\n  position: relative;\n  border: 2px solid ${colors.grayMedium};\n  text-align: left;\n\n  &.is-disabled {\n    .bordered-pulldown-toggle {\n      cursor: default;\n      color: ${colors.grayBold};\n    }\n  }\n`\n\nconst Toggle = styled.div`\n  display: block;\n  padding: 8px 10px 6px;\n  text-decoration: none;\n`\n\nconst CaretHolder = styled.div`\n  float: right;\n  padding-left: 5px;\n  border-left: 1px solid ${colors.grayMedium};\n`\n\nconst PulldownOptions = styled.div`\n  display: none;\n  position: absolute;\n  background: white;\n  border: 2px solid ${colors.grayMedium};\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  z-index: 2;\n\n  > a {\n    text-decoration: none;\n    overflow: ellipsis;\n    display: block;\n    padding: 8px 10px 6px;\n    cursor: pointer;\n\n    &:hover {\n      background-color: ${colors.gray};\n    }\n  }\n`\n\nexport default StyledBorderedPulldown\n"],"file":"BorderedPulldown.js"}