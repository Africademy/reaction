{"version":3,"sources":["../../../src/Components/Buttons/Default.tsx"],"names":["ButtonState","Button","newProps","props","state","block","icon","href","className","children","React","Component","StyledButton","Success","colors","greenRegular","Failure","redRegular","grayRegular","disabled","Default","greenBold","redBold","grayMedium","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUYA,W;;;WAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,2BAAAA,W;;IAOCC,M;;;;;;;;;;;;;6BAGW;AACpB;AACA,UAAMC,QAAa,qBAAQ,KAAKC,KAAb,CAAnB;;AACA,aAAOD,QAAQ,CAACE,KAAhB;AACA,aAAOF,QAAQ,CAACG,KAAhB;AACA,aAAOH,QAAQ,CAACI,IAAhB;AAEA,aAAO,KAAKH,KAAL,CAAWI,IAAX,GACL;AAAG,QAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWK;AAAzB,SAAwCN,QAAxC,GACG,KAAKC,KAAL,CAAWG,IADd,EAEE,2CAAO,KAAKH,KAAL,CAAWM,QAAlB,CAFF,CADK,GAML;AAAQ,QAAA,SAAS,EAAE,KAAKN,KAAL,CAAWK;AAA9B,SAA6CN,QAA7C,GACG,KAAKC,KAAL,CAAWG,IADd,EAEE,2CAAO,KAAKH,KAAL,CAAWM,QAAlB,CAFF,CANF;AAWD;;;;EArByBC,eAAMC,S;;;;gBAArBV,M;;AAwBN,IAAMW,YAAY,GAAG,+BAAOX,MAAP,CAAH;AAAA;AAAA;AAAA,sWACrB,uBAAW,KAAX,CADqB,EAET,UAAAE,KAAK,EAAI;AACrB,MAAIA,KAAK,CAACC,KAAN,KAAgBJ,WAAW,CAACa,OAAhC,EAAyC,OAAOC,gBAAOC,YAAd;AACzC,MAAIZ,KAAK,CAACC,KAAN,KAAgBJ,WAAW,CAACgB,OAAhC,EAAyC,OAAOF,gBAAOG,UAAd;AAEzC,SAAOH,gBAAOI,WAAd;AACD,CAPsB,EAQd,UAAAf,KAAK,EAAI;AAChB,MAAIA,KAAK,CAACgB,QAAV,EAAoB,OAAO,iBAAP;AACpB,MAAIhB,KAAK,CAACC,KAAN,KAAgBJ,WAAW,CAACoB,OAAhC,EAAyC,OAAO,OAAP;AACzC,SAAO,OAAP;AACD,CAZsB,EA6BP,UAAAjB,KAAK,EAAI;AACrB,MAAIA,KAAK,CAACC,KAAN,KAAgBJ,WAAW,CAACa,OAAhC,EAAyC,OAAOC,gBAAOO,SAAd;AACzC,MAAIlB,KAAK,CAACC,KAAN,KAAgBJ,WAAW,CAACgB,OAAhC,EAAyC,OAAOF,gBAAOQ,OAAd;AAEzC,SAAOR,gBAAOS,UAAd;AACD,CAlCoB,EAqCrB,qBArCqB,CAAlB;;AAwCPX,YAAY,CAACY,YAAb,GAA4B;AAC1BpB,EAAAA,KAAK,EAAEJ,WAAW,CAACoB,OADO;AAE1Bf,EAAAA,KAAK,EAAE;AAFmB,CAA5B;eAKeO,Y","sourcesContent":["import colors from \"Assets/Colors\"\nimport { avantgarde } from \"Assets/Fonts\"\nimport React from \"react\"\n// @ts-ignore\nimport styled, { StyledComponentClass } from \"styled-components\"\nimport { block } from \"../Helpers\"\nimport { IconProps } from \"../Icon\"\n\nexport interface ButtonProps extends React.HTMLProps<Button> {\n  state?: ButtonState\n  block?: boolean\n  icon?: React.ReactElement<IconProps>\n  color?: string\n}\n\nexport enum ButtonState {\n  Default,\n  Loading,\n  Success,\n  Failure,\n}\n\nexport class Button extends React.Component<ButtonProps, any> {\n  public static defaultProps: ButtonProps\n\n  render(): JSX.Element {\n    // TODO Do we really need to pass an opaque object along or do we know which props should be passed along?\n    const newProps: any = { ...this.props }\n    delete newProps.state\n    delete newProps.block\n    delete newProps.icon\n\n    return this.props.href ? (\n      <a className={this.props.className} {...newProps}>\n        {this.props.icon}\n        <span>{this.props.children}</span>\n      </a>\n    ) : (\n      <button className={this.props.className} {...newProps}>\n        {this.props.icon}\n        <span>{this.props.children}</span>\n      </button>\n    )\n  }\n}\n\nexport const StyledButton = styled(Button)`\n  ${avantgarde(\"s13\")};\n  background: ${props => {\n    if (props.state === ButtonState.Success) return colors.greenRegular\n    if (props.state === ButtonState.Failure) return colors.redRegular\n\n    return colors.grayRegular\n  }};\n  color: ${props => {\n    if (props.disabled) return \"rgba(0,0,0,0.5)\"\n    if (props.state !== ButtonState.Default) return \"white\"\n    return \"black\"\n  }};\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 15px 30px;\n  line-height: 1;\n  outline: 0;\n  transition: background-color 0.25s, color 0.25s;\n  margin: 10px;\n  border: none;\n  box-sizing: border-box;\n  text-decoration: none;\n  border-radius: 2px;\n\n  &:hover:not(:disabled) {\n    cursor: pointer;\n    background: ${props => {\n      if (props.state === ButtonState.Success) return colors.greenBold\n      if (props.state === ButtonState.Failure) return colors.redBold\n\n      return colors.grayMedium\n    }};\n  }\n\n  ${block()};\n`\n\nStyledButton.defaultProps = {\n  state: ButtonState.Default,\n  block: false,\n}\n\nexport default StyledButton\n"],"file":"Default.js"}