{"version":3,"sources":["../../../src/Components/Buttons/MultiStateButton.tsx"],"names":["MultiButtonState","Button","newProps","props","state","block","icon","href","className","children","React","Component","StyledButton","Highlighted","disabled","Default","colors","grayRegular","purpleRegular","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASYA,gB;;;WAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,gCAAAA,gB;;IAKNC,M;;;;;;;;;;;;;6BAGkB;AACpB;AACA,UAAMC,QAAa,qBAAQ,KAAKC,KAAb,CAAnB;;AACA,aAAOD,QAAQ,CAACE,KAAhB;AACA,aAAOF,QAAQ,CAACG,KAAhB;AACA,aAAOH,QAAQ,CAACI,IAAhB;AAEA,aAAO,KAAKH,KAAL,CAAWI,IAAX,GACL;AAAG,QAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWK;AAAzB,SAAwCN,QAAxC,GACG,KAAKC,KAAL,CAAWG,IADd,EAEE,2CAAO,KAAKH,KAAL,CAAWM,QAAlB,CAFF,CADK,GAML;AAAQ,QAAA,SAAS,EAAE,KAAKN,KAAL,CAAWK;AAA9B,SAA6CN,QAA7C,GACG,KAAKC,KAAL,CAAWG,IADd,EAEE,2CAAO,KAAKH,KAAL,CAAWM,QAAlB,CAFF,CANF;AAWD;;;;EArBkBC,eAAMC,S;;gBAArBV,M;;AAwBC,IAAMW,YAAY,GAAG,+BAAOX,MAAP,CAAH;AAAA;AAAA;AAAA,+WACrB,uBAAW,KAAX,CADqB,EAET,UAAAE,KAAK,EAAI;AACrB,MAAIA,KAAK,CAACC,KAAN,KAAgBJ,gBAAgB,CAACa,WAArC,EAAkD,OAAO,OAAP;AAClD,SAAO,OAAP;AACD,CALsB,EAMd,UAAAV,KAAK,EAAI;AAChB,MAAIA,KAAK,CAACW,QAAV,EAAoB,OAAO,iBAAP;AACpB,MAAIX,KAAK,CAACC,KAAN,KAAgBJ,gBAAgB,CAACa,WAArC,EAAkD,OAAO,OAAP;AAClD,SAAO,OAAP;AACD,CAVsB,EAWb,UAAAV,KAAK,EAAI;AACjB,MAAIA,KAAK,CAACC,KAAN,KAAgBJ,gBAAgB,CAACe,OAArC,EAA8C,OAAO,MAAP;AAC9C,6BAAoBC,gBAAOC,WAA3B;AACD,CAdsB,EA+BPD,gBAAOE,aA/BA,EAkCrB,qBAlCqB,CAAlB;;AAqCPN,YAAY,CAACO,YAAb,GAA4B;AAC1Bf,EAAAA,KAAK,EAAEJ,gBAAgB,CAACe,OADE;AAE1BV,EAAAA,KAAK,EAAE;AAFmB,CAA5B;eAKeO,Y","sourcesContent":["import colors from \"Assets/Colors\"\nimport { avantgarde } from \"Assets/Fonts\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { block } from \"../Helpers\"\nimport { IconProps } from \"../Icon\"\n\nexport interface ButtonProps extends React.HTMLProps<Button> {\n  state?: MultiButtonState\n  block?: boolean\n  icon?: React.ReactElement<IconProps>\n}\n\nexport enum MultiButtonState {\n  Default = \"Default\",\n  Highlighted = \"Highlighted\",\n}\n\nclass Button extends React.Component<ButtonProps, any> {\n  public static defaultProps: ButtonProps\n\n  render(): JSX.Element {\n    // TODO Do we really need to pass an opaque object along or do we know which props should be passed along?\n    const newProps: any = { ...this.props }\n    delete newProps.state\n    delete newProps.block\n    delete newProps.icon\n\n    return this.props.href ? (\n      <a className={this.props.className} {...newProps}>\n        {this.props.icon}\n        <span>{this.props.children}</span>\n      </a>\n    ) : (\n      <button className={this.props.className} {...newProps}>\n        {this.props.icon}\n        <span>{this.props.children}</span>\n      </button>\n    )\n  }\n}\n\nexport const StyledButton = styled(Button)`\n  ${avantgarde(\"s13\")};\n  background: ${props => {\n    if (props.state === MultiButtonState.Highlighted) return \"black\"\n    return \"white\"\n  }};\n  color: ${props => {\n    if (props.disabled) return \"rgba(0,0,0,0.5)\"\n    if (props.state === MultiButtonState.Highlighted) return \"white\"\n    return \"black\"\n  }};\n  border: ${props => {\n    if (props.state !== MultiButtonState.Default) return \"none\"\n    return `solid 1px ${colors.grayRegular}`\n  }};\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 15px 30px;\n  font-size: 13px;\n  line-height: 1;\n  outline: 0;\n  transition: background-color 0.25s, color 0.25s;\n  margin: 10px;\n  box-sizing: border-box;\n  text-decoration: none;\n\n  &:hover:not(:disabled) {\n    color: white;\n    cursor: pointer;\n    background: ${colors.purpleRegular};\n  }\n\n  ${block()};\n`\n\nStyledButton.defaultProps = {\n  state: MultiButtonState.Default,\n  block: false,\n}\n\nexport default StyledButton\n"],"file":"MultiStateButton.js"}