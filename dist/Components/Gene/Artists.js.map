{"version":3,"sources":["../../../src/Components/Gene/Artists.tsx"],"names":["PageSize","ArtistRowsContainer","styled","div","LoadMoreContainer","LoadMoreButton","a","SpinnerContainer","ArtistFilterButtons","FilterBar","Artists","loading","hasMore","props","gene","artists","pageInfo","hasNextPage","state","setState","relay","loadMore","error","onForSaleToggleSelected","ButtonState","Success","filter_aggregations","aggregations","map","aggregation","slice","toLowerCase","onDropdownSelected","artistRows","edges","edge","node","__id","loadMoreButton","loadMoreArtists","renderArtistFilter","renderForSaleToggle","renderArtistDropdown","React","Component","direction","getConnectionFromProps","getFragmentVariables","prevVars","totalCount","count","getVariables","fragmentVariables","cursor","geneNodeID","query"],"mappings":"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","sourcesContent":["import { Artists_gene } from \"__generated__/Artists_gene.graphql\"\nimport { avantgarde } from \"Assets/Fonts\"\nimport * as React from \"react\"\nimport {\n  createPaginationContainer,\n  graphql,\n  RelayPaginationProp,\n} from \"react-relay\"\nimport styled from \"styled-components\"\nimport Dropdown from \"../ArtworkFilter/Dropdown\"\nimport ForSaleCheckbox from \"../ArtworkFilter/ForSaleCheckbox\"\nimport { ButtonState } from \"../Buttons/Default\"\nimport Button from \"../Buttons/Ghost\"\nimport Spinner from \"../Spinner\"\nimport ArtistRow from \"./ArtistRow\"\n\nconst PageSize = 10\n\ninterface Props {\n  relay: RelayPaginationProp\n  gene: Artists_gene\n  onDropdownSelected: (slice: string, value: string) => void\n  onForSaleToggleSelected: () => void\n}\n\ninterface State {\n  loading: boolean\n}\n\nconst ArtistRowsContainer = styled.div`\n  margin: 40px 0 20px;\n`\n\nconst LoadMoreContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst LoadMoreButton = styled.a`\n  font-family: ${avantgarde(\"s13\")};\n  cursor: pointer;\n  text-transform: uppercase;\n  border-bottom: 2px solid transparent;\n\n  &:hover {\n    border-bottom: 2px solid black;\n  }\n`\n\nconst SpinnerContainer = styled.div`\n  width: 100%;\n  height: 100px;\n  position: relative;\n`\n\nconst ArtistFilterButtons = styled.div`\n  margin-right: 10px;\n\n  button {\n    height: 52px;\n    padding: 16px;\n  }\n`\n\nconst FilterBar = styled.div`\n  vertical-align: middle;\n  text-align: center;\n\n  > div {\n    display: inline-block;\n  }\n`\n\nexport class Artists extends React.Component<Props, State> {\n  state = {\n    loading: false,\n  }\n\n  loadMoreArtists() {\n    const hasMore = this.props.gene.artists.pageInfo.hasNextPage\n    if (!this.state.loading && hasMore) {\n      this.setState({ loading: true }, () => {\n        this.props.relay.loadMore(PageSize, error => {\n          this.setState({ loading: false })\n        })\n      })\n    }\n  }\n\n  renderForSaleToggle() {\n    return (\n      <ForSaleCheckbox\n        checked={false}\n        onChange={this.props.onForSaleToggleSelected}\n      />\n    )\n  }\n\n  renderArtistFilter() {\n    return (\n      <ArtistFilterButtons>\n        <span>By Artists:</span>\n        <Button\n          onClick={() => {\n            return null\n          }}\n          state={ButtonState.Success}\n        >\n          All Artists\n        </Button>\n        <span>By Work:</span>\n      </ArtistFilterButtons>\n    )\n  }\n\n  renderArtistDropdown() {\n    return this.props.gene.filter_aggregations.aggregations.map(aggregation => {\n      return (\n        <Dropdown\n          aggregation={aggregation}\n          key={aggregation.slice}\n          selected={\n            aggregation.slice && this.state[aggregation.slice.toLowerCase()]\n          }\n          onSelected={this.props.onDropdownSelected}\n        />\n      )\n    })\n  }\n\n  render() {\n    const artists = this.props.gene.artists\n\n    const artistRows = artists.edges.map(edge => {\n      return <ArtistRow artist={edge.node} key={edge.node.__id} />\n    })\n\n    const loadMoreButton = (\n      <LoadMoreContainer>\n        <LoadMoreButton onClick={() => this.loadMoreArtists()}>\n          Load More\n        </LoadMoreButton>\n      </LoadMoreContainer>\n    )\n\n    return (\n      <div>\n        <FilterBar>\n          {this.renderArtistFilter()}\n          {this.renderForSaleToggle()}\n          {this.renderArtistDropdown()}\n        </FilterBar>\n        <ArtistRowsContainer>\n          {artistRows}\n          <SpinnerContainer>\n            {this.state.loading ? <Spinner /> : \"\"}\n          </SpinnerContainer>\n          {artists &&\n            artists.pageInfo.hasNextPage &&\n            !this.state.loading &&\n            loadMoreButton}\n        </ArtistRowsContainer>\n      </div>\n    )\n  }\n}\n\nexport default createPaginationContainer(\n  Artists,\n  {\n    gene: graphql`\n      fragment Artists_gene on Gene\n        @argumentDefinitions(\n          aggregations: {\n            type: \"[ArtworkAggregation]\"\n            defaultValue: [MEDIUM, TOTAL, PRICE_RANGE, DIMENSION_RANGE]\n          }\n          count: { type: \"Int\", defaultValue: 10 }\n          cursor: { type: \"String\", defaultValue: \"\" }\n        ) {\n        __id\n        artists: artists_connection(first: $count, after: $cursor)\n          @connection(key: \"Artists_artists\") {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            node {\n              __id\n              ...ArtistRow_artist\n            }\n          }\n        }\n        filter_aggregations: filtered_artworks(\n          aggregations: $aggregations\n          size: 0\n          include_medium_filter_in_aggregation: true\n        ) {\n          ...TotalCount_filter_artworks\n          aggregations {\n            slice\n            ...Dropdown_aggregation\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: \"forward\",\n    getConnectionFromProps(props) {\n      return props.gene.artists\n    },\n    getFragmentVariables(prevVars, totalCount) {\n      return {\n        ...prevVars,\n        count: totalCount,\n      }\n    },\n    getVariables(props, { count, cursor }, fragmentVariables) {\n      return {\n        // in most cases, for variables other than connection filters like\n        // `first`, `after`, etc. you may want to use the previous values.\n        ...fragmentVariables,\n        count,\n        cursor,\n        geneNodeID: props.gene.__id,\n      }\n    },\n    query: graphql`\n      query ArtistsQuery(\n        $geneNodeID: ID!\n        $count: Int!\n        $cursor: String\n        $aggregations: [ArtworkAggregation]\n      ) {\n        node(__id: $geneNodeID) {\n          ...Artists_gene\n            @arguments(\n              count: $count\n              cursor: $cursor\n              aggregations: $aggregations\n            )\n        }\n      }\n    `,\n  }\n)\n"],"file":"Artists.js"}