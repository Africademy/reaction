{"version":3,"sources":["../../../src/Components/Gene/GeneArtworks.tsx"],"names":["FilterBar","styled","div","SubFilterBar","ArtistFilterButtons","GeneArtworks","props","gene","filtered_artworks","aggregations","map","aggregation","slice","toLowerCase","onDropdownSelected","onArtistModeToggleSelected","ButtonState","Default","for_sale","onForSaleToggleSelected","pulldownOptions","val","name","selectedSort","find","sort","medium","price_range","dimension_range","facet","onSortSelected","id","renderArtistsModeToggle","renderForSaleToggle","renderDropdown","renderArtworks","React","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport {\n  createFragmentContainer,\n  graphql,\n  RelayPaginationProp,\n} from \"react-relay\"\nimport styled from \"styled-components\"\n\nimport { ButtonState } from \"../Buttons/Default\"\nimport Button from \"../Buttons/Ghost\"\n\nimport Dropdown from \"../ArtworkFilter/Dropdown\"\nimport ForSaleCheckbox from \"../ArtworkFilter/ForSaleCheckbox\"\n\nimport Headline from \"../ArtworkFilter/Headline\"\nimport TotalCount from \"../ArtworkFilter/TotalCount\"\n\nimport BorderedPulldown from \"../BorderedPulldown\"\n\nimport { GeneArtworks_gene } from \"__generated__/GeneArtworks_gene.graphql\"\nimport GeneArtworksContent from \"./GeneArtworksContent\"\n\ninterface Filters {\n  for_sale?: boolean\n  dimension_range?: string\n  price_range?: string\n  medium?: string\n}\n\ninterface Props extends Filters {\n  relay: RelayPaginationProp\n  gene: GeneArtworks_gene\n  onDropdownSelected: (slice: string, value: string) => void\n  onSortSelected: (sort: string) => void\n  onForSaleToggleSelected: () => void\n  onArtistModeToggleSelected: () => void\n  sort?: string\n}\n\nconst FilterBar = styled.div`\n  vertical-align: middle;\n  text-align: center;\n\n  > div {\n    display: inline-block;\n  }\n`\n\nconst SubFilterBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 40px 0 20px;\n  align-items: center;\n`\n\nconst ArtistFilterButtons = styled.div`\n  margin-right: 10px;\n\n  button {\n    height: 52px;\n    padding: 16px;\n  }\n`\n\nexport class GeneArtworks extends React.Component<Props, null> {\n  renderDropdown() {\n    return this.props.gene.filtered_artworks.aggregations.map(aggregation => {\n      return (\n        <Dropdown\n          aggregation={aggregation}\n          key={aggregation.slice}\n          selected={\n            aggregation.slice && this.props[aggregation.slice.toLowerCase()]\n          }\n          onSelected={this.props.onDropdownSelected}\n        />\n      )\n    })\n  }\n\n  renderArtistsModeToggle() {\n    return (\n      <ArtistFilterButtons>\n        <span>By Artists:</span>\n        <Button\n          onClick={this.props.onArtistModeToggleSelected}\n          state={ButtonState.Default}\n        >\n          All Artists\n        </Button>\n        <span>By Work:</span>\n      </ArtistFilterButtons>\n    )\n  }\n\n  renderForSaleToggle() {\n    return (\n      <ForSaleCheckbox\n        checked={this.props.for_sale}\n        onChange={this.props.onForSaleToggleSelected}\n      />\n    )\n  }\n\n  renderArtworks() {\n    const pulldownOptions = [\n      { val: \"-partner_updated_at\", name: \"Recently Updated\" },\n      { val: \"-year\", name: \"Artwork Year (desc.)\" },\n      { val: \"year\", name: \"Artwork Year (asc.)\" },\n    ]\n    const selectedSort = pulldownOptions.find(\n      sort => sort.val === this.props.sort\n    )\n    return (\n      <div>\n        <SubFilterBar>\n          <div>\n            <Headline\n              medium={this.props.medium}\n              price_range={this.props.price_range}\n              dimension_range={this.props.dimension_range}\n              for_sale={this.props.for_sale}\n              facet={this.props.gene.filtered_artworks.facet}\n              aggregations={this.props.gene.filtered_artworks.aggregations}\n            />\n            <TotalCount filter_artworks={this.props.gene.filtered_artworks} />\n          </div>\n          <BorderedPulldown\n            defaultValue=\"Recently Updated\"\n            selectedName={selectedSort && selectedSort.name}\n            options={pulldownOptions}\n            onChange={this.props.onSortSelected}\n          />\n        </SubFilterBar>\n        <GeneArtworksContent\n          geneID={this.props.gene.id}\n          filtered_artworks={this.props.gene.filtered_artworks}\n        />\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <FilterBar>\n          {this.renderArtistsModeToggle()}\n          {this.renderForSaleToggle()}\n          {this.renderDropdown()}\n        </FilterBar>\n        {this.renderArtworks()}\n      </div>\n    )\n  }\n}\n\nexport default createFragmentContainer(GeneArtworks, {\n  gene: graphql`\n    fragment GeneArtworks_gene on Gene\n      @argumentDefinitions(\n        for_sale: { type: \"Boolean\" }\n        medium: { type: \"String\", defaultValue: \"*\" }\n        aggregations: {\n          type: \"[ArtworkAggregation]\"\n          defaultValue: [MEDIUM, TOTAL, PRICE_RANGE, DIMENSION_RANGE]\n        }\n        price_range: { type: \"String\", defaultValue: \"*\" }\n        dimension_range: { type: \"String\", defaultValue: \"*\" }\n      ) {\n      id\n      filtered_artworks(\n        aggregations: $aggregations\n        for_sale: $for_sale\n        medium: $medium\n        price_range: $price_range\n        dimension_range: $dimension_range\n        size: 0\n        include_medium_filter_in_aggregation: true\n      ) {\n        ...TotalCount_filter_artworks\n        ...GeneArtworksContent_filtered_artworks\n        aggregations {\n          slice\n          counts {\n            name\n            id\n          }\n          ...Dropdown_aggregation\n        }\n        facet {\n          ...Headline_facet\n        }\n      }\n    }\n  `,\n})\n"],"file":"GeneArtworks.js"}