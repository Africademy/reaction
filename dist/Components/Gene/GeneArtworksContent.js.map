{"version":3,"sources":["../../../src/Components/Gene/GeneArtworksContent.tsx"],"names":["SpinnerContainer","styled","div","PageSize","GeneArtworksContent","loading","page","hasMore","props","filtered_artworks","artworks","pageInfo","hasNextPage","origLength","edges","length","state","finishedPaginatingWithError","setState","relay","loadMore","error","console","geneID","newLength","newHasMore","loadMoreArtworks","React","Component","direction","getConnectionFromProps","getFragmentVariables","prevVars","totalCount","count","getVariables","fragmentVariables","cursor","filteredArtworksNodeID","__id","query"],"mappings":"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","sourcesContent":["import { GeneArtworksContent_filtered_artworks } from \"__generated__/GeneArtworksContent_filtered_artworks.graphql\"\nimport ArtworkGrid from \"Components/ArtworkGrid\"\nimport * as React from \"react\"\nimport {\n  createPaginationContainer,\n  graphql,\n  RelayPaginationProp,\n} from \"react-relay\"\nimport styled from \"styled-components\"\nimport Spinner from \"../Spinner\"\n\ninterface Props {\n  relay: RelayPaginationProp\n  filtered_artworks: GeneArtworksContent_filtered_artworks\n  geneID: string\n}\n\ninterface State {\n  loading: boolean\n  page: number\n}\n\nconst SpinnerContainer = styled.div`\n  width: 100%;\n  height: 100px;\n  position: relative;\n`\n\nconst PageSize = 10\n\nexport class GeneArtworksContent extends React.Component<Props, State> {\n  private finishedPaginatingWithError = false\n\n  state = {\n    loading: false,\n    page: 1,\n  }\n\n  loadMoreArtworks() {\n    const hasMore = this.props.filtered_artworks.artworks.pageInfo.hasNextPage\n    const origLength = this.props.filtered_artworks.artworks.edges.length\n    if (hasMore && !this.state.loading && !this.finishedPaginatingWithError) {\n      this.setState({ loading: true }, () => {\n        this.props.relay.loadMore(PageSize, error => {\n          if (error) {\n            console.error(error)\n          }\n\n          // Check to see if we're at the max allowable page.\n          const { page } = this.state\n          if (page > 100) {\n            console.error(`Finished paging: ${this.props.geneID}`)\n            this.finishedPaginatingWithError = true\n          }\n\n          // Check to see if no new edges were received.\n          const newLength = this.props.filtered_artworks.artworks.edges.length\n          const newHasMore = this.props.filtered_artworks.artworks.pageInfo\n            .hasNextPage\n          if (newLength - origLength === 0 && newHasMore) {\n            console.error(\n              `No more records returned for gene: ${this.props.geneID}`\n            )\n            this.finishedPaginatingWithError = true\n          }\n\n          this.setState({ loading: false, page: page + 1 })\n        })\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <ArtworkGrid\n          artworks={this.props.filtered_artworks.artworks}\n          columnCount={4}\n          itemMargin={40}\n          onLoadMore={() => this.loadMoreArtworks()}\n        />\n        <SpinnerContainer>\n          {this.state.loading ? <Spinner /> : \"\"}\n        </SpinnerContainer>\n      </div>\n    )\n  }\n}\n\nexport default createPaginationContainer(\n  GeneArtworksContent,\n  {\n    filtered_artworks: graphql`\n      fragment GeneArtworksContent_filtered_artworks on FilterArtworks\n        @argumentDefinitions(\n          count: { type: \"Int\", defaultValue: 10 }\n          cursor: { type: \"String\", defaultValue: \"\" }\n        ) {\n        __id\n        artworks: artworks_connection(\n          first: $count\n          after: $cursor\n          sort: $sort\n        ) @connection(key: \"GeneArtworksContent_filtered_artworks\") {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          ...ArtworkGrid_artworks\n          edges {\n            node {\n              __id\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: \"forward\",\n    getConnectionFromProps(props) {\n      return props.filtered_artworks.artworks\n    },\n    getFragmentVariables(prevVars, totalCount) {\n      return {\n        ...prevVars,\n        count: totalCount,\n      }\n    },\n    getVariables(props, { count, cursor }, fragmentVariables) {\n      return {\n        // in most cases, for variables other than connection filters like\n        // `first`, `after`, etc. you may want to use the previous values.\n        ...fragmentVariables,\n        count,\n        cursor,\n        filteredArtworksNodeID: props.filtered_artworks.__id,\n      }\n    },\n    query: graphql`\n      query GeneArtworksContentQuery(\n        $filteredArtworksNodeID: ID!\n        $count: Int!\n        $cursor: String\n        $sort: String\n      ) {\n        node(__id: $filteredArtworksNodeID) {\n          ...GeneArtworksContent_filtered_artworks\n            @arguments(count: $count, cursor: $cursor)\n        }\n      }\n    `,\n  }\n)\n"],"file":"GeneArtworksContent.js"}