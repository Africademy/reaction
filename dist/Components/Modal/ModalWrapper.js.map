{"version":3,"sources":["../../../src/Components/Modal/ModalWrapper.tsx"],"names":["ModalWidth","GlobalStyle","createGlobalStyle","KEYBOARD_EVENT","ModalWrapper","isAnimating","props","show","isShown","blurContainers","blurContainerSelector","Array","from","document","querySelectorAll","onClose","removeBlurToContainers","state","container","classList","add","remove","event","key","close","nextProps","setState","updateBodyScrollBlock","updateEscapeKeyListener","body","style","overflowY","addEventListener","handleEscapeKey","removeEventListener","children","width","fullscreenResponsiveModal","image","viewportWidth","addBlurToContainers","enter","exit","React","Component","Wrapper","styled","div","attrs","slideUp","keyframes","ModalOverlay","ModalContainer","Wide","Medium","Normal","media","sm","ModalInner"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGYA,U;;;WAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,0BAAAA,U;;AAuBZ,IAAMC,WAAW,OAAGC,mCAAH,oBAAjB;AAMA,IAAMC,cAAc,GAAG,OAAvB;;IAEaC,Y;;;;;;;;;;;;;;;;;;4DASH;AACNC,MAAAA,WAAW,EAAE,MAAKC,KAAL,CAAWC,IAAX,IAAmB,KAD1B;AAENC,MAAAA,OAAO,EAAE,MAAKF,KAAL,CAAWC,IAAX,IAAmB,KAFtB;AAGNE,MAAAA,cAAc,EAAE,MAAKH,KAAL,CAAWI,qBAAX,GACZC,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACC,gBAAT,CAA0B,MAAKR,KAAL,CAAWI,qBAArC,CAAX,CADY,GAEZ;AALE,K;;4DA+BA,YAAM;AACZ,YAAKJ,KAAL,CAAWS,OAAX;;AACA,YAAKC,sBAAL;AACD,K;;0EAEqB,YAAM;AAAA;AAAA;AAAA;;AAAA;AAC1B,6BAAwB,MAAKC,KAAL,CAAWR,cAAnC,8HAAmD;AAAA,cAAxCS,SAAwC;AACjDA,UAAAA,SAAS,CAACC,SAAV,CAAoBC,GAApB,CAAwB,SAAxB;AACD;AAHyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI3B,K;;6EAEwB,YAAM;AAAA;AAAA;AAAA;;AAAA;AAC7B,8BAAwB,MAAKH,KAAL,CAAWR,cAAnC,mIAAmD;AAAA,cAAxCS,SAAwC;AACjDA,UAAAA,SAAS,CAACC,SAAV,CAAoBE,MAApB,CAA2B,SAA3B;AACD;AAH4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI9B,K;;sEAUiB,UAAAC,KAAK,EAAI;AACzB,UAAIA,KAAK,IAAIA,KAAK,CAACC,GAAN,KAAc,QAA3B,EAAqC;AACnC,cAAKC,KAAL;AACD;AACF,K;;;;;;;qDApDgCC,S,EAAW;AAC1C,UAAI,KAAKnB,KAAL,CAAWC,IAAX,KAAoBkB,SAAS,CAAClB,IAAlC,EAAwC;AACtC,aAAKmB,QAAL,CAAc;AACZrB,UAAAA,WAAW,EAAE,IADD;AAEZG,UAAAA,OAAO,EAAEiB,SAAS,CAAClB;AAFP,SAAd;AAID;AACF;;;wCAEmB;AAClB,WAAKoB,qBAAL;AACA,WAAKC,uBAAL;AACD;;;yCAEoB;AACnB,WAAKD,qBAAL;AACA,WAAKC,uBAAL;AACD;;;2CAEsB;AACrB,WAAKZ,sBAAL;AACD;;;4CAmBuB;AACtB,UAAI,KAAKV,KAAL,CAAWC,IAAf,EAAqB;AACnBM,QAAAA,QAAQ,CAACgB,IAAT,CAAcC,KAAd,CAAoBC,SAApB,GAAgC,QAAhC;AACD,OAFD,MAEO;AACLlB,QAAAA,QAAQ,CAACgB,IAAT,CAAcC,KAAd,CAAoBC,SAApB,GAAgC,SAAhC;AACD;AACF;;;8CAQyB;AACxB,UAAI,KAAKzB,KAAL,CAAWC,IAAf,EAAqB;AACnBM,QAAAA,QAAQ,CAACmB,gBAAT,CAA0B7B,cAA1B,EAA0C,KAAK8B,eAA/C,EAAgE,IAAhE;AACD,OAFD,MAEO;AACLpB,QAAAA,QAAQ,CAACqB,mBAAT,CAA6B/B,cAA7B,EAA6C,KAAK8B,eAAlD,EAAmE,IAAnE;AACD;AACF;;;6BAEqB;AAAA;;AAAA,wBAC0C,KAAK3B,KAD/C;AAAA,UACZ6B,QADY,eACZA,QADY;AAAA,UACFC,KADE,eACFA,KADE;AAAA,UACKC,yBADL,eACKA,yBADL;AAAA,UACgCC,KADhC,eACgCA,KADhC;AAAA,wBAEa,KAAKrB,KAFlB;AAAA,UAEZT,OAFY,eAEZA,OAFY;AAAA,UAEHH,WAFG,eAEHA,WAFG;;AAAA,kCAGa,sCAHb;AAAA,UAGLkC,aAHK,yBAGZH,KAHY;;AAKpB,UAAI5B,OAAJ,EAAa;AACX,aAAKgC,mBAAL;AACD,OAFD,MAEO;AACL,aAAKxB,sBAAL;AACD;;AAED,aACE,6BAAC,cAAD,QACE,6BAAC,OAAD;AAAS,QAAA,OAAO,EAAER,OAAO,IAAIH;AAA7B,SACE,6BAAC,WAAD;AAAa,QAAA,yBAAyB;AAAtC,QADF,EAEGG,OAAO,IAAI,6BAAC,YAAD;AAAc,QAAA,OAAO,EAAE,KAAKgB;AAA5B,QAFd,EAGE,6BAAC,uBAAD;AACE,QAAA,EAAE,EAAEhB,OADN;AAEE,QAAA,YAAY,MAFd;AAGE,QAAA,QAAQ,EAAE,oBAAM;AACd,UAAA,MAAI,CAACkB,QAAL,CAAc;AAAErB,YAAAA,WAAW,EAAE;AAAf,WAAd;AACD,SALH;AAME,QAAA,aAAa,MANf;AAOE,QAAA,OAAO,EAAE;AAAEoC,UAAAA,KAAK,EAAE,EAAT;AAAaC,UAAAA,IAAI,EAAE;AAAnB;AAPX,SASE,6BAAC,cAAD;AACE,QAAA,yBAAyB,EAAEL,yBAD7B;AAEE,QAAA,KAAK,EAAED,KAFT;AAGE,QAAA,KAAK,EAAEE,KAHT;AAIE,QAAA,aAAa,EAAEC;AAJjB,SAME,6BAAC,UAAD;AAAY,QAAA,yBAAyB,EAAEF;AAAvC,SACGF,QADH,CANF,CATF,CAHF,CADF,CADF;AA4BD;;;;EAtH+BQ,eAAMC,S;;;;gBAA3BxC,Y,kBAIW;AACpBG,EAAAA,IAAI,EAAE,KADc;AAEpBG,EAAAA,qBAAqB,EAAE;AAFH,C;;AAqHxB,IAAMmC,OAAO,GAAGC,0BAAOC,GAAP,CAAWC,KAAX,CAAwC,EAAxC,CAAH;AAAA;AAAA;AAAA,cACT,UAAA1C,KAAK;AAAA,SACLA,KAAK,CAACE,OAAN,6GADK;AAAA,CADI,CAAb;;AAaA,IAAMyC,OAAO,OAAGC,2BAAH,oGAAb;;AAaO,IAAMC,YAAY,GAAGL,0BAAOC,GAAV;AAAA;AAAA;AAAA,sFAAlB;;;;AASA,IAAMK,cAAc,GAAGN,0BAAOC,GAAP,CAAWC,KAAX,CAK3B,EAL2B,CAAH;AAAA;AAAA;AAAA,gNAWhB,UAAA1C,KAAK,EAAI;AAChB,MAAIA,KAAK,CAACgC,KAAV,EAAiB;AACf,WAAOhC,KAAK,CAACiC,aAAN,GAAsB,GAAtB,GAA4BvC,UAAU,CAACqD,IAAvC,GAA8CrD,UAAU,CAACsD,MAAhE;AACD,GAFD,MAEO;AACL,WAAOhD,KAAK,CAAC8B,KAAN,GAAc9B,KAAK,CAAC8B,KAApB,GAA4BpC,UAAU,CAACuD,MAA9C;AACD;AACF,CAjBwB,EAqBZN,OArBY,EAuBvB,UAAA3C,KAAK;AAAA,SACLA,KAAK,CAAC+B,yBAAN,GACImB,eAAMC,EADV,uBAKID,eAAMC,EALV,oBADK;AAAA,CAvBkB,CAApB;;;;AAmCP,IAAMC,UAAU,GAAGZ,0BAAOC,GAAP,CAAWC,KAAX,CAEhB,EAFgB,CAAH;AAAA;AAAA;AAAA,4DAKZ,UAAA1C,KAAK;AAAA,SACLA,KAAK,CAAC+B,yBAAN,IACAmB,eAAMC,EADN,oBADK;AAAA,CALO,CAAhB;;eAaerD,Y","sourcesContent":["import { Theme } from \"@artsy/palette\"\nimport React from \"react\"\nimport styled, { createGlobalStyle, keyframes } from \"styled-components\"\nimport { getViewportDimensions } from \"Utils/viewport\"\nimport FadeTransition from \"../Animation/FadeTransition\"\nimport { media } from \"../Helpers\"\nimport { CtaProps } from \"./ModalCta\"\n\nexport enum ModalWidth {\n  Narrow = \"280px\",\n  Normal = \"440px\",\n  Medium = \"780px\",\n  Wide = \"900px\",\n}\n\nexport interface ModalWrapperProps extends React.HTMLProps<ModalWrapper> {\n  blurContainerSelector?: string\n  cta?: CtaProps\n  onClose?: () => void\n  width?: ModalWidth\n  fullscreenResponsiveModal?: boolean\n  image?: string\n  show?: boolean\n}\n\nexport interface ModalWrapperState {\n  isAnimating: boolean\n  isShown: boolean\n  blurContainers: Element[]\n}\n\nconst GlobalStyle = createGlobalStyle<{ suppressMultiMountWarning: boolean }>`\n  .blurred {\n    filter: blur(50px);\n  }\n`\n\nconst KEYBOARD_EVENT = \"keyup\"\n\nexport class ModalWrapper extends React.Component<\n  ModalWrapperProps,\n  ModalWrapperState\n> {\n  static defaultProps = {\n    show: false,\n    blurContainerSelector: \"\",\n  }\n\n  state = {\n    isAnimating: this.props.show || false,\n    isShown: this.props.show || false,\n    blurContainers: this.props.blurContainerSelector\n      ? Array.from(document.querySelectorAll(this.props.blurContainerSelector))\n      : [],\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.show !== nextProps.show) {\n      this.setState({\n        isAnimating: true,\n        isShown: nextProps.show,\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.updateBodyScrollBlock()\n    this.updateEscapeKeyListener()\n  }\n\n  componentDidUpdate() {\n    this.updateBodyScrollBlock()\n    this.updateEscapeKeyListener()\n  }\n\n  componentWillUnmount() {\n    this.removeBlurToContainers()\n  }\n\n  close = () => {\n    this.props.onClose()\n    this.removeBlurToContainers()\n  }\n\n  addBlurToContainers = () => {\n    for (const container of this.state.blurContainers) {\n      container.classList.add(\"blurred\")\n    }\n  }\n\n  removeBlurToContainers = () => {\n    for (const container of this.state.blurContainers) {\n      container.classList.remove(\"blurred\")\n    }\n  }\n\n  updateBodyScrollBlock() {\n    if (this.props.show) {\n      document.body.style.overflowY = \"hidden\"\n    } else {\n      document.body.style.overflowY = \"visible\"\n    }\n  }\n\n  handleEscapeKey = event => {\n    if (event && event.key === \"Escape\") {\n      this.close()\n    }\n  }\n\n  updateEscapeKeyListener() {\n    if (this.props.show) {\n      document.addEventListener(KEYBOARD_EVENT, this.handleEscapeKey, true)\n    } else {\n      document.removeEventListener(KEYBOARD_EVENT, this.handleEscapeKey, true)\n    }\n  }\n\n  render(): JSX.Element {\n    const { children, width, fullscreenResponsiveModal, image } = this.props\n    const { isShown, isAnimating } = this.state\n    const { width: viewportWidth } = getViewportDimensions()\n\n    if (isShown) {\n      this.addBlurToContainers()\n    } else {\n      this.removeBlurToContainers()\n    }\n\n    return (\n      <Theme>\n        <Wrapper isShown={isShown || isAnimating}>\n          <GlobalStyle suppressMultiMountWarning />\n          {isShown && <ModalOverlay onClick={this.close} />}\n          <FadeTransition\n            in={isShown}\n            mountOnEnter\n            onExited={() => {\n              this.setState({ isAnimating: false })\n            }}\n            unmountOnExit\n            timeout={{ enter: 10, exit: 200 }}\n          >\n            <ModalContainer\n              fullscreenResponsiveModal={fullscreenResponsiveModal}\n              width={width}\n              image={image}\n              viewportWidth={viewportWidth}\n            >\n              <ModalInner fullscreenResponsiveModal={fullscreenResponsiveModal}>\n                {children}\n              </ModalInner>\n            </ModalContainer>\n          </FadeTransition>\n        </Wrapper>\n      </Theme>\n    )\n  }\n}\n\nconst Wrapper = styled.div.attrs<{ isShown?: boolean }>({})`\n  ${props =>\n    props.isShown &&\n    `\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 9999\n  `};\n`\n\nconst slideUp = keyframes`\n  from {\n    transform: translate(-50%, -40%);\n    opacity: 0;\n    /* stylelint-disable-next-line */\n  },\n\n  to {\n    transform: translate(-50%, -50%);\n    opacity: 1;\n  }\n`\n\nexport const ModalOverlay = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.6);\n`\n\nexport const ModalContainer = styled.div.attrs<{\n  width?: ModalWidth\n  fullscreenResponsiveModal?: boolean\n  image?: string\n  viewportWidth?: number\n}>({})`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: #fff;\n  width: ${props => {\n    if (props.image) {\n      return props.viewportWidth > 900 ? ModalWidth.Wide : ModalWidth.Medium\n    } else {\n      return props.width ? props.width : ModalWidth.Normal\n    }\n  }};\n  height: min-content;\n  border-radius: 5px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);\n  animation: ${slideUp} 250ms linear;\n\n  ${props =>\n    props.fullscreenResponsiveModal\n      ? media.sm`\n          width: 100%;\n          border-radius: 0;\n        `\n      : media.sm`\n          width: calc(100vw - 20px);\n          border-radius: 2px;\n        `};\n`\n\nconst ModalInner = styled.div.attrs<{\n  fullscreenResponsiveModal?: boolean\n}>({})`\n  max-height: calc(100vh - 80px);\n  overflow-y: auto;\n  ${props =>\n    props.fullscreenResponsiveModal &&\n    media.sm`\n      max-height: 100vh;\n      height: 100vh\n    `};\n`\n\nexport default ModalWrapper\n"],"file":"ModalWrapper.js"}