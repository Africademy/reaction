{"version":3,"sources":["../../../../src/Components/NavBar/Menus/NotificationsMenu.tsx"],"names":["NotificationMenuItems","props","notifications","p","me","followsAndSaves","edges","map","index","node","artists","href","image","summary","resized","url","objectFit","length","NotificationsMenu","size","NotificationsQueryRenderer","render","SystemContext","relayEnvironment"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\"\nimport { graphql } from \"react-relay\"\n\nimport { SystemContext } from \"Artsy\"\nimport { get } from \"Utils/get\"\n\nimport {\n  LoadProgressRenderer,\n  renderWithLoadProgress,\n} from \"Artsy/Relay/renderWithLoadProgress\"\n\nimport {\n  NotificationsMenuQuery,\n  NotificationsMenuQueryResponse,\n} from \"__generated__/NotificationsMenuQuery.graphql\"\n\nimport {\n  Box,\n  Flex,\n  Image,\n  Link,\n  Menu,\n  MenuItem,\n  Sans,\n  Separator,\n  Serif,\n} from \"@artsy/palette\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\n\nexport const NotificationMenuItems: React.FC<\n  NotificationsMenuQueryResponse\n> = props => {\n  const notifications = get(\n    props,\n    p => {\n      return p.me.followsAndSaves.notifications.edges\n    },\n    []\n  )\n\n  return (\n    <>\n      {notifications.map(({ node }, index) => {\n        const { artists, href, image, summary } = node\n        return (\n          <MenuItem href={href} key={index}>\n            <Flex alignItems=\"center\">\n              <Box width={40} height={40} bg=\"black5\" mr={1}>\n                <Image\n                  src={image.resized.url}\n                  width={40}\n                  height={40}\n                  style={{\n                    objectFit: \"cover\",\n                  }}\n                />\n              </Box>\n              <Box>\n                <Sans size=\"2\">{summary}</Sans>\n                <Sans size=\"2\" weight=\"medium\">\n                  {artists}\n                </Sans>\n              </Box>\n            </Flex>\n          </MenuItem>\n        )\n      })}\n\n      <Flex py={1} flexDirection=\"column\" alignItems=\"center\">\n        <>\n          {notifications.length === 0 && (\n            <Flex width=\"100%\" flexDirection=\"column\">\n              <Box pt={1} pb={3} width=\"100%\" textAlign=\"center\">\n                <Serif size=\"3\">No new works</Serif>\n              </Box>\n            </Flex>\n          )}\n\n          <Box width=\"100%\" px={2}>\n            <Separator />\n          </Box>\n\n          <Box pt={2}>\n            <Sans size=\"2\">\n              <Link href=\"/works-for-you\">View all</Link>\n            </Sans>\n          </Box>\n        </>\n      </Flex>\n    </>\n  )\n}\n\n/**\n * The <Menu /> component renders a QueryRenderer inside of it, which fetches\n * individual MenuItems for display. During fetch there is a loading spinner.\n */\nexport const NotificationsMenu: React.FC = () => {\n  return (\n    <Menu title=\"Activity\">\n      <NotificationsQueryRenderer\n        render={renderWithLoadProgress(\n          NotificationMenuItems,\n          {},\n          {},\n          { size: \"small\" }\n        )}\n      />\n    </Menu>\n  )\n}\n\n/**\n * This QueryRenderer is also shared with NotificationBadge. Once the request\n * is performed the data is cached at the network layer so menu data appears\n * immediately and doesn't require a second request.\n */\nexport const NotificationsQueryRenderer: React.FC<{\n  render: LoadProgressRenderer<any>\n}> = ({ render }) => {\n  const { relayEnvironment } = useContext(SystemContext)\n\n  return (\n    <QueryRenderer<NotificationsMenuQuery>\n      environment={relayEnvironment}\n      query={graphql`\n        query NotificationsMenuQuery {\n          me {\n            followsAndSaves {\n              notifications: bundledArtworksByArtist(\n                sort: PUBLISHED_AT_DESC\n                first: 10\n              ) @connection(key: \"WorksForYou_notifications\") {\n                edges {\n                  node {\n                    href\n                    summary\n                    artists\n                    published_at(format: \"MMM DD\")\n                    image {\n                      resized(height: 40, width: 40) {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      variables={{}}\n      render={render}\n    />\n  )\n}\n"],"file":"NotificationsMenu.js"}