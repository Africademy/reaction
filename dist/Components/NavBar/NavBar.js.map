{"version":3,"sources":["../../../src/Components/NavBar/NavBar.tsx"],"names":["NavBar","flow","AnalyticsSchema","Flow","Header","context_module","ContextModule","dispatch","data","Events","postEvent","_props","trackEvent","SystemContext","mediator","user","showMobileMenu","toggleMobileNav","xs","sm","isMobile","isLoggedIn","Boolean","getNotificationCount","cookie","get","display","NotificationsMenu","NotificationsBadge","action_type","ActionType","Click","subject","Subject","NotificationBell","new_notification_count","destination_path","hover","Hover","UserMenu","Login","authentication","login","Signup","signup","showMenu","SmallScreenMenuSandwichIcon","NavBarHeight","NavSection","children","props","NavBarContainer","Flex","MobileNavDivider","Box","MobileNavCover","styled","div"],"mappings":"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","sourcesContent":["import cookie from \"cookies-js\"\nimport React, { useContext, useEffect, useState } from \"react\"\nimport styled from \"styled-components\"\n\nimport {\n  ArtsyMarkIcon,\n  BellIcon,\n  Box,\n  Button,\n  color,\n  Flex,\n  Link,\n  SoloIcon,\n  space,\n  Spacer,\n} from \"@artsy/palette\"\n\nimport { SystemContext } from \"Artsy/SystemContext\"\nimport { SearchBarQueryRenderer as SearchBar } from \"Components/Search/SearchBar\"\n\nimport {\n  MobileNavMenu,\n  MobileToggleIcon,\n  MoreNavMenu,\n  NotificationsMenu,\n  UserMenu,\n} from \"./Menus\"\n\nimport { NavItem } from \"./NavItem\"\nimport { NotificationsBadge } from \"./NotificationsBadge\"\nimport * as authentication from \"./Utils/authentication\"\n\nimport { AnalyticsSchema } from \"Artsy\"\nimport { track, useTracking } from \"Artsy/Analytics\"\nimport Events from \"Utils/Events\"\nimport { useMedia } from \"Utils/Hooks/useMedia\"\n\nexport const NavBar: React.FC = track(\n  {\n    flow: AnalyticsSchema.Flow.Header,\n    context_module: AnalyticsSchema.ContextModule.Header,\n  },\n  {\n    dispatch: data => Events.postEvent(data),\n  }\n)(_props => {\n  const { trackEvent } = useTracking()\n  const { mediator, user } = useContext(SystemContext)\n  const [showMobileMenu, toggleMobileNav] = useState(false)\n  const { xs, sm } = useMedia()\n  const isMobile = xs || sm\n  const isLoggedIn = Boolean(user)\n  const getNotificationCount = () => cookie.get(\"notification-count\") || 0\n\n  // Close mobile menu if dragging window from small size to desktop\n  useEffect(() => {\n    if (!isMobile) {\n      toggleMobileNav(false)\n    }\n  }, [isMobile])\n\n  return (\n    <>\n      <NavBarContainer px={1}>\n        <NavSection>\n          <Link href=\"/\" style={{ display: \"flex\" }}>\n            <ArtsyMarkIcon height={40} width={40} />\n          </Link>\n        </NavSection>\n\n        <Spacer mr={1} />\n\n        <NavSection width=\"100%\">\n          <Box width=\"100%\">\n            <SearchBar />\n          </Box>\n        </NavSection>\n\n        <Spacer mr={3} />\n\n        {/*\n          Desktop. Collapses into mobile at `sm` breakpoint.\n        */}\n        <NavSection display={[\"none\", \"none\", \"flex\"]}>\n          <NavSection>\n            <NavItem href=\"/collect\">Artworks</NavItem>\n            <NavItem href=\"/auctions\">Auctions</NavItem>\n            <NavItem href=\"/galleries\">Galleries</NavItem>\n\n            {/**\n              Only show Fairs at `xlg`\n            */}\n            <NavItem\n              href=\"/art-fairs\"\n              display={[\"none\", \"none\", \"none\", \"none\", \"block\"]}\n            >\n              Fairs\n            </NavItem>\n            <NavItem href=\"/articles\">Editorial</NavItem>\n            <NavItem\n              Menu={() => {\n                return (\n                  <Box mr={-150}>\n                    <MoreNavMenu width={160} />\n                  </Box>\n                )\n              }}\n            >\n              More\n            </NavItem>\n          </NavSection>\n\n          <Spacer mr={2} />\n\n          <NavSection>\n            {isLoggedIn && (\n              <>\n                <NavItem\n                  href=\"/works-for-you\"\n                  Menu={NotificationsMenu}\n                  Overlay={NotificationsBadge}\n                  onClick={() => {\n                    trackEvent({\n                      action_type: AnalyticsSchema.ActionType.Click,\n                      subject: AnalyticsSchema.Subject.NotificationBell,\n                      new_notification_count: getNotificationCount(),\n                      destination_path: \"/works-for-you\",\n                    })\n                  }}\n                >\n                  {({ hover }) => {\n                    if (hover) {\n                      trackEvent({\n                        action_type: AnalyticsSchema.ActionType.Hover,\n                        subject: AnalyticsSchema.Subject.NotificationBell,\n                        new_notification_count: getNotificationCount(),\n                      })\n                    }\n                    return (\n                      <BellIcon\n                        top={3}\n                        fill={hover ? \"purple100\" : \"black80\"}\n                      />\n                    )\n                  }}\n                </NavItem>\n                <NavItem Menu={UserMenu}>\n                  {({ hover }) => {\n                    if (hover) {\n                      trackEvent({\n                        action_type: AnalyticsSchema.ActionType.Hover,\n                        subject: \"User\",\n                      })\n                    }\n                    return (\n                      <SoloIcon\n                        top={3}\n                        fill={hover ? \"purple100\" : \"black80\"}\n                      />\n                    )\n                  }}\n                </NavItem>\n              </>\n            )}\n          </NavSection>\n\n          {!isLoggedIn && (\n            <NavSection>\n              <Button\n                variant=\"secondaryOutline\"\n                onClick={() => {\n                  trackEvent({\n                    action_type: AnalyticsSchema.ActionType.Click,\n                    subject: AnalyticsSchema.Subject.Login,\n                  })\n\n                  authentication.login(mediator)\n                }}\n              >\n                Log in\n              </Button>\n              <Spacer mr={1} />\n              <Button\n                onClick={() => {\n                  trackEvent({\n                    action_type: AnalyticsSchema.ActionType.Click,\n                    subject: AnalyticsSchema.Subject.Signup,\n                  })\n\n                  authentication.signup(mediator)\n                }}\n              >\n                Sign up\n              </Button>\n            </NavSection>\n          )}\n        </NavSection>\n\n        {/*\n          Mobile. Triggers at the `sm` breakpoint.\n        */}\n        <NavSection display={[\"flex\", \"flex\", \"none\"]}>\n          <NavItem\n            className=\"mobileHamburgerButton\"\n            onClick={() => {\n              const showMenu = !showMobileMenu\n              if (showMenu) {\n                trackEvent({\n                  action_type: AnalyticsSchema.ActionType.Click,\n                  subject: AnalyticsSchema.Subject.SmallScreenMenuSandwichIcon,\n                })\n              }\n\n              toggleMobileNav(showMenu)\n            }}\n          >\n            <Flex\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              width={22}\n              height={22}\n            >\n              <MobileNavDivider />\n              <MobileToggleIcon open={showMobileMenu} />\n            </Flex>\n          </NavItem>\n        </NavSection>\n      </NavBarContainer>\n\n      {showMobileMenu && (\n        <>\n          <MobileNavCover onClick={() => toggleMobileNav(false)} />\n          <MobileNavMenu />\n        </>\n      )}\n    </>\n  )\n})\n\nexport const NavBarHeight = space(6) - 1 // border offset\n\nconst NavSection = ({ children, ...props }) => (\n  <Flex alignItems=\"center\" {...props}>\n    {children}\n  </Flex>\n)\n\nconst NavBarContainer = styled(Flex)`\n  background-color: ${color(\"white100\")};\n  border-bottom: 1px solid ${color(\"black10\")};\n  position: relative;\n  z-index: 3;\n  height: ${NavBarHeight}px;\n`\n\n// FIXME: This needs to be cleaned up once we get proper icons\nconst MobileNavDivider = styled(Box)`\n  border-left: 1px solid ${color(\"black10\")};\n  height: 63px;\n  position: absolute;\n  left: -12px;\n`\n\nconst MobileNavCover = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  background: rgba(194, 194, 194, 0.3);\n  z-index: 0;\n`\n"],"file":"NavBar.js"}