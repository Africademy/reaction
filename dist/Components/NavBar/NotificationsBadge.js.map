{"version":3,"sources":["../../../src/Components/NavBar/NotificationsBadge.tsx"],"names":["logger","NotificationsBadge","hover","isClient","window","error","props","totalUnread","p","me","followsAndSaves","notifications","edges","length","count","cookie","expire","cachedNotificationCount","Number","get","set","CircularCount","rawCount","SystemContext","notificationCount","notificationsLabel","trackEvent","action_type","AnalyticsSchema","ActionType","Hover","subject","Subject","NotificationBell","new_notification_count","Container","Flex"],"mappings":"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","sourcesContent":["import { Box, color, Flex, Sans } from \"@artsy/palette\"\nimport { AnalyticsSchema, SystemContext } from \"Artsy\"\nimport { useTracking } from \"Artsy/Analytics/useTracking\"\nimport cookie from \"cookies-js\"\nimport React, { useContext, useEffect } from \"react\"\nimport { ReadyState } from \"react-relay\"\nimport styled from \"styled-components\"\nimport { get } from \"Utils/get\"\nimport createLogger from \"Utils/logger\"\nimport { NotificationsQueryRenderer } from \"./Menus\"\n\nconst logger = createLogger(\"Components/NavBar\")\n\nexport const NotificationsBadge: React.FC<{\n  /**\n   * If hovering over the nav item, `hover` is passed into the badge (Overlay)\n   */\n  hover?: boolean\n}> = ({ hover }) => {\n  const isClient = typeof window !== \"undefined\"\n  return isClient ? (\n    <NotificationsQueryRenderer\n      render={({ error, props }: ReadyState) => {\n        // If there's an error hide the badge\n        if (error) {\n          logger.error(error)\n          return null\n        }\n\n        // Fetching. If there's a notification count stored in a cookie, display it\n        if (!props) {\n          return <CircularCount />\n        }\n\n        // Get the unread notification count from the server\n        const totalUnread = get(\n          props,\n          p => {\n            return p.me.followsAndSaves.notifications.edges.length\n          },\n          0\n        )\n\n        let count = totalUnread\n\n        // User has no notifications; clear the cookie\n        if (count === 0) {\n          cookie.expire(\"notification-count\")\n          return null\n        }\n\n        // Update the notification bad with the count, and store it in a cookie\n        // so that subsequent page views don't need a fetch in order to render\n        // the badge.\n        if (count > 0) {\n          const cachedNotificationCount = Number(\n            cookie.get(\"notification-count\")\n          )\n          if (count !== cachedNotificationCount) {\n            if (count >= 100) {\n              count = \"99+\"\n            }\n\n            // In force, when a request is made to `/notifications` endpoint,\n            // sd.NOTIFICATIONS_COUNT is populated by this cookie.\n            cookie.set(\"notification-count\", count)\n          }\n        }\n\n        return (\n          <Box>\n            <CircularCount count={count} rawCount={totalUnread} hover={hover} />\n          </Box>\n        )\n      }}\n    />\n  ) : (\n    <CircularCount />\n  )\n}\n\nconst CircularCount: React.FC<{\n  /**\n   * Formatted count for display\n   */\n  count?: string\n  /**\n   * Raw unread count, used for analytics.\n   */\n  rawCount?: number\n  /**\n   * True if hovering over the badge\n   */\n  hover?: boolean\n}> = ({ count, rawCount, hover }) => {\n  // Check to see if we've got a value from sharify, populated by a cookie on\n  // the server.\n  const { notificationCount } = useContext(SystemContext)\n  const notificationsLabel = count || notificationCount\n  const { trackEvent } = useTracking()\n\n  if (!notificationsLabel) {\n    return null\n  }\n\n  useEffect(() => {\n    if (hover) {\n      trackEvent({\n        action_type: AnalyticsSchema.ActionType.Hover,\n        subject: AnalyticsSchema.Subject.NotificationBell,\n        new_notification_count: rawCount,\n      })\n    }\n  }, [hover])\n\n  return (\n    <Container>\n      <Sans size=\"1\" weight=\"medium\" color=\"white100\">\n        {notificationsLabel}\n      </Sans>\n    </Container>\n  )\n}\n\nconst Container = styled(Flex)`\n  background-color: ${color(\"purple100\")};\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 12px;\n  right: 0;\n`\n"],"file":"NotificationsBadge.js"}