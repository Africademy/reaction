{"version":3,"sources":["../../../../../src/Components/Onboarding/Steps/Artists/ArtistSearchResults.tsx"],"names":["ArtistSearchResultsContent","dispatch","data","Events","postEvent","props","context","excludedArtistIds","Set","viewer","match_artist","map","item","_id","artist","store","suggestedArtistEdge","followArtist","related","suggested","edges","popularArtist","popular_artists","artists","artistToSuggest","get","node","__id","add","getValue","popularArtistsRootField","popularArtists","getLinkedRecords","term","updatedPopularArtists","artistItem","getDataID","setLinkedRecords","followCount","updateFollowCount","tracking","trackEvent","action","entity_id","entity_slug","id","context_module","relay","environment","mutation","variables","input","artist_id","unfollow","Array","from","updater","onArtistFollowed","artistItems","index","imageUrl","a","image","cropped","url","name","onFollowedArtist","React","Component","ArtistSearchResultsContentContainer","ArtistSearchResultsComponent","relayEnvironment","error","ArtistSearchResults"],"mappings":"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","sourcesContent":["import { ArtistSearchResults_viewer } from \"__generated__/ArtistSearchResults_viewer.graphql\"\nimport {\n  ArtistSearchResultsArtistMutation,\n  ArtistSearchResultsArtistMutationResponse,\n} from \"__generated__/ArtistSearchResultsArtistMutation.graphql\"\nimport { ArtistSearchResultsQuery } from \"__generated__/ArtistSearchResultsQuery.graphql\"\nimport { SystemContextProps, withSystemContext } from \"Artsy\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport * as React from \"react\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport track, { TrackingProp } from \"react-tracking\"\nimport { RecordSourceSelectorProxy } from \"relay-runtime\"\nimport { get } from \"Utils/get\"\nimport Events from \"../../../../Utils/Events\"\nimport ReplaceTransition from \"../../../Animation/ReplaceTransition\"\nimport ItemLink, { LinkContainer } from \"../../ItemLink\"\nimport { FollowProps } from \"../../Types\"\n\ntype Artist = ArtistSearchResults_viewer[\"match_artist\"][0]\n\nexport interface ContainerProps extends FollowProps {\n  term: string\n  tracking?: TrackingProp\n}\n\ninterface Props extends React.HTMLProps<HTMLAnchorElement>, ContainerProps {\n  relay?: RelayProp\n  viewer: ArtistSearchResults_viewer\n}\n\n@track({}, { dispatch: data => Events.postEvent(data) })\nclass ArtistSearchResultsContent extends React.Component<Props, null> {\n  private excludedArtistIds: Set<string>\n  followCount: number = 0\n\n  constructor(props: Props, context: any) {\n    super(props, context)\n    this.excludedArtistIds = new Set(\n      this.props.viewer.match_artist.map(item => item._id)\n    )\n  }\n\n  onArtistFollowed(\n    artist: Artist,\n    store: RecordSourceSelectorProxy,\n    data: ArtistSearchResultsArtistMutationResponse\n  ): void {\n    const suggestedArtistEdge =\n      data.followArtist.artist.related.suggested.edges[0]\n    const popularArtist = data.followArtist.popular_artists.artists[0]\n    const artistToSuggest = store.get(\n      ((suggestedArtistEdge && suggestedArtistEdge.node) || popularArtist).__id\n    )\n    this.excludedArtistIds.add(artistToSuggest.getValue(\"_id\"))\n\n    const popularArtistsRootField = store.get(\"client:root:viewer\")\n    const popularArtists = popularArtistsRootField.getLinkedRecords(\n      \"match_artist\",\n      { term: this.props.term }\n    )\n    const updatedPopularArtists = popularArtists.map(artistItem =>\n      artistItem.getDataID() === artist.__id ? artistToSuggest : artistItem\n    )\n\n    popularArtistsRootField.setLinkedRecords(\n      updatedPopularArtists,\n      \"match_artist\",\n      { term: this.props.term }\n    )\n\n    this.followCount += 1\n\n    this.props.updateFollowCount(this.followCount)\n\n    this.props.tracking.trackEvent({\n      action: \"Followed Artist\",\n      entity_id: artist._id,\n      entity_slug: artist.id,\n      context_module: \"onboarding search\",\n    })\n  }\n\n  onFollowedArtist(artist: Artist) {\n    commitMutation<ArtistSearchResultsArtistMutation>(\n      this.props.relay.environment,\n      {\n        mutation: graphql`\n          mutation ArtistSearchResultsArtistMutation(\n            $input: FollowArtistInput!\n            $excludedArtistIds: [String]!\n          ) {\n            followArtist(input: $input) {\n              popular_artists(\n                size: 1\n                exclude_followed_artists: true\n                exclude_artist_ids: $excludedArtistIds\n              ) {\n                artists {\n                  id\n                  _id\n                  __id\n                  name\n                  image {\n                    cropped(width: 100, height: 100) {\n                      url\n                    }\n                  }\n                }\n              }\n              artist {\n                __id\n                related {\n                  suggested(\n                    first: 1\n                    exclude_followed_artists: true\n                    exclude_artist_ids: $excludedArtistIds\n                  ) {\n                    edges {\n                      node {\n                        id\n                        _id\n                        __id\n                        name\n                        image {\n                          cropped(width: 100, height: 100) {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            artist_id: artist.id,\n            unfollow: false,\n          },\n          excludedArtistIds: Array.from(this.excludedArtistIds),\n        },\n        updater: (store, data) => this.onArtistFollowed(artist, store, data),\n      }\n    )\n  }\n\n  render() {\n    const artistItems = this.props.viewer.match_artist.map((artist, index) => {\n      const imageUrl = get(artist, a => a.image.cropped.url)\n\n      return (\n        <LinkContainer key={`artist-search-results-${index}`}>\n          <ReplaceTransition\n            transitionEnterTimeout={1000}\n            transitionLeaveTimeout={400}\n          >\n            <ItemLink\n              href=\"#\"\n              item={artist}\n              key={artist.id}\n              id={artist.id}\n              name={artist.name}\n              image_url={imageUrl}\n              onClick={() => this.onFollowedArtist(artist)}\n            />\n          </ReplaceTransition>\n        </LinkContainer>\n      )\n    })\n\n    return <div>{artistItems}</div>\n  }\n}\n\nconst ArtistSearchResultsContentContainer = createFragmentContainer(\n  ArtistSearchResultsContent,\n  {\n    viewer: graphql`\n      fragment ArtistSearchResults_viewer on Viewer {\n        match_artist(term: $term) {\n          id\n          _id\n          __id\n          name\n          image {\n            cropped(width: 100, height: 100) {\n              url\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n\nconst ArtistSearchResultsComponent: React.SFC<\n  ContainerProps & SystemContextProps\n> = ({ term, relayEnvironment, updateFollowCount }) => {\n  return (\n    <QueryRenderer<ArtistSearchResultsQuery>\n      environment={relayEnvironment}\n      query={graphql`\n        query ArtistSearchResultsQuery($term: String!) {\n          viewer {\n            ...ArtistSearchResults_viewer\n          }\n        }\n      `}\n      variables={{ term }}\n      render={({ error, props }) => {\n        if (props) {\n          return (\n            <ArtistSearchResultsContentContainer\n              viewer={props.viewer}\n              term={term}\n              updateFollowCount={updateFollowCount}\n            />\n          )\n        } else {\n          return null\n        }\n      }}\n    />\n  )\n}\n\nexport const ArtistSearchResults = withSystemContext(\n  ArtistSearchResultsComponent\n)\n"],"file":"ArtistSearchResults.js"}