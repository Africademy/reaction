{"version":3,"sources":["../../../../../src/Components/Onboarding/Steps/Artists/PopularArtists.tsx"],"names":["PopularArtistsContent","dispatch","data","Events","postEvent","props","context","excludedArtistIds","Set","popular_artists","artists","filter","Boolean","map","item","_id","artist","store","suggestedArtistEdge","followArtist","related","suggested","edges","popularArtist","artistToSuggest","get","node","__id","add","getValue","popularArtistsRootField","getLinkedRecord","exclude_followed_artists","updatedPopularArtists","getLinkedRecords","artistItem","getDataID","setLinkedRecords","followCount","updateFollowCount","tracking","trackEvent","action","entity_id","entity_slug","id","context_module","relay","environment","mutation","variables","input","artist_id","unfollow","Array","from","updater","onArtistFollowed","artistItems","index","imageUrl","a","image","cropped","url","name","onFollowedArtist","React","Component","PopularArtistContentContainer","PopularArtistsComponent","relayEnvironment","error","PopularArtists"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;AACA;;AACA;;AACA;;AAMA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BMA,qB,WADL,4BAAM,EAAN,EAAU;AAAEC,EAAAA,QAAQ,EAAE,kBAAAC,IAAI;AAAA,WAAIC,gBAAOC,SAAP,CAAiBF,IAAjB,CAAJ;AAAA;AAAhB,CAAV,C;;;;;AAKC,iCAAYG,KAAZ,EAA0BC,OAA1B,EAAwC;AAAA;;AAAA;;AACtC,+FAAMD,KAAN,EAAaC,OAAb;;AADsC;;AAAA,kEAFlB,CAEkB;;AAEtC,UAAKC,iBAAL,GAAyB,IAAIC,GAAJ,CACvB,MAAKH,KAAL,CAAWI,eAAX,CAA2BC,OAA3B,CAAmCC,MAAnC,CAA0CC,OAA1C,EAAmDC,GAAnD,CAAuD,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,GAAT;AAAA,KAA3D,CADuB,CAAzB;AAFsC;AAKvC;;;;qCAGCC,M,EACAC,K,EACAf,I,EACM;AACN,UAAMgB,mBAAmB,GACvBhB,IAAI,CAACiB,YAAL,CAAkBH,MAAlB,CAAyBI,OAAzB,CAAiCC,SAAjC,CAA2CC,KAA3C,CAAiD,CAAjD,CADF;AAEA,UAAMC,aAAa,GAAGrB,IAAI,CAACiB,YAAL,CAAkBV,eAAlB,CAAkCC,OAAlC,CAA0C,CAA1C,CAAtB;AACA,UAAMc,eAAe,GAAGP,KAAK,CAACQ,GAAN,CACtB,CAAEP,mBAAmB,IAAIA,mBAAmB,CAACQ,IAA5C,IAAqDH,aAAtD,EAAqEI,IAD/C,CAAxB;AAGA,WAAKpB,iBAAL,CAAuBqB,GAAvB,CAA2BJ,eAAe,CAACK,QAAhB,CAAyB,KAAzB,CAA3B;AAEA,UAAMC,uBAAuB,GAAGb,KAAK,CAClCQ,GAD6B,CACzB,aADyB,EAE7BM,eAF6B,CAEb,iBAFa,EAEM;AAAEC,QAAAA,wBAAwB,EAAE;AAA5B,OAFN,CAAhC;AAIA,UAAMC,qBAAqB,GAAGH,uBAAuB,CAClDI,gBAD2B,CACV,SADU,EAE3BvB,MAF2B,CAEpBC,OAFoB,EAG3BC,GAH2B,CAGvB,UAAAsB,UAAU;AAAA,eACbA,UAAU,CAACC,SAAX,OAA2BpB,MAAM,CAACW,IAAlC,GAAyCH,eAAzC,GAA2DW,UAD9C;AAAA,OAHa,CAA9B;AAOAL,MAAAA,uBAAuB,CAACO,gBAAxB,CAAyCJ,qBAAzC,EAAgE,SAAhE;AAEA,WAAKK,WAAL,IAAoB,CAApB;AAEA,WAAKjC,KAAL,CAAWkC,iBAAX,CAA6B,KAAKD,WAAlC;AAEA,WAAKjC,KAAL,CAAWmC,QAAX,CAAoBC,UAApB,CAA+B;AAC7BC,QAAAA,MAAM,EAAE,iBADqB;AAE7BC,QAAAA,SAAS,EAAE3B,MAAM,CAACD,GAFW;AAG7B6B,QAAAA,WAAW,EAAE5B,MAAM,CAAC6B,EAHS;AAI7BC,QAAAA,cAAc,EAAE;AAJa,OAA/B;AAMD;;;qCAEgB9B,M,EAAgB;AAAA;;AAC/B,sCACE,KAAKX,KAAL,CAAW0C,KAAX,CAAiBC,WADnB,EAEE;AACEC,QAAAA,QAAQ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UADV;AAmDEC,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE;AACLC,YAAAA,SAAS,EAAEpC,MAAM,CAAC6B,EADb;AAELQ,YAAAA,QAAQ,EAAE;AAFL,WADE;AAKT9C,UAAAA,iBAAiB,EAAE+C,KAAK,CAACC,IAAN,CAAW,KAAKhD,iBAAhB;AALV,SAnDb;AA0DEiD,QAAAA,OAAO,EAAE,iBAACvC,KAAD,EAAQf,IAAR;AAAA,iBAAiB,MAAI,CAACuD,gBAAL,CAAsBzC,MAAtB,EAA8BC,KAA9B,EAAqCf,IAArC,CAAjB;AAAA;AA1DX,OAFF;AA+DD;;;6BAEQ;AAAA;;AACP,UAAMwD,WAAW,GAAG,KAAKrD,KAAL,CAAWI,eAAX,CAA2BC,OAA3B,CACjBC,MADiB,CACVC,OADU,EAEjBC,GAFiB,CAEb,UAACG,MAAD,EAAS2C,KAAT,EAAmB;AACtB,YAAMC,QAAQ,GAAG,cAAI5C,MAAJ,EAAY,UAAA6C,CAAC;AAAA,iBAAIA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,GAApB;AAAA,SAAb,CAAjB;AACA,eACE,oBAAC,uBAAD;AAAe,UAAA,GAAG,4BAAqBL,KAArB;AAAlB,WACE,oBAAC,0BAAD;AACE,UAAA,sBAAsB,EAAE,IAD1B;AAEE,UAAA,sBAAsB,EAAE;AAF1B,WAIE,oBAAC,iBAAD;AACE,UAAA,IAAI,EAAC,GADP;AAEE,UAAA,IAAI,EAAE3C,MAFR;AAGE,UAAA,GAAG,EAAEA,MAAM,CAAC6B,EAHd;AAIE,UAAA,EAAE,EAAE7B,MAAM,CAAC6B,EAJb;AAKE,UAAA,IAAI,EAAE7B,MAAM,CAACiD,IALf;AAME,UAAA,SAAS,EAAEL,QANb;AAOE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACM,gBAAL,CAAsBlD,MAAtB,CAAN;AAAA;AAPX,UAJF,CADF,CADF;AAkBD,OAtBiB,CAApB;AAwBA,aAAO,iCAAM0C,WAAN,CAAP;AACD;;;;EA7IiCS,KAAK,CAACC,S;AAgJ1C,IAAMC,6BAA6B,GAAG,yCACpCrE,qBADoC,EAEpC;AACES,EAAAA,eAAe;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADjB,CAFoC,CAAtC;;AAqBA,IAAM6D,uBAAoE,GAAG,SAAvEA,uBAAuE,OAGvE;AAAA,MAFJC,gBAEI,QAFJA,gBAEI;AAAA,MADJhC,iBACI,QADJA,iBACI;AACJ,SACE,oBAAC,wCAAD;AACE,IAAA,WAAW,EAAEgC,gBADf;AAEE,IAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAFP;AASE,IAAA,SAAS,EAAE,EATb;AAUE,IAAA,MAAM,EAAE,uBAAsB;AAAA,UAAnBC,KAAmB,SAAnBA,KAAmB;AAAA,UAAZnE,KAAY,SAAZA,KAAY;;AAC5B,UAAIA,KAAJ,EAAW;AACT,eACE,oBAAC,6BAAD;AACE,UAAA,eAAe,EAAEA,KAAK,CAACI,eADzB;AAEE,UAAA,iBAAiB,EAAE8B;AAFrB,UADF;AAMD,OAPD,MAOO;AACL,eAAO,IAAP;AACD;AACF;AArBH,IADF;AAyBD,CA7BD;;AA+BO,IAAMkC,cAAc,GAAG,8BAAkBH,uBAAlB,CAAvB","sourcesContent":["import { PopularArtists_popular_artists } from \"__generated__/PopularArtists_popular_artists.graphql\"\nimport {\n  PopularArtistsFollowArtistMutation,\n  PopularArtistsFollowArtistMutationResponse,\n} from \"__generated__/PopularArtistsFollowArtistMutation.graphql\"\nimport { PopularArtistsQuery } from \"__generated__/PopularArtistsQuery.graphql\"\nimport { SystemContextProps, withSystemContext } from \"Artsy\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport * as React from \"react\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport track, { TrackingProp } from \"react-tracking\"\nimport { RecordSourceSelectorProxy } from \"relay-runtime\"\nimport { get } from \"Utils/get\"\nimport Events from \"../../../../Utils/Events\"\nimport ReplaceTransition from \"../../../Animation/ReplaceTransition\"\nimport ItemLink, { LinkContainer } from \"../../ItemLink\"\nimport { FollowProps } from \"../../Types\"\n\ninterface Artist {\n  id: string | null\n  _id: string | null\n  __id: string | null\n  name: string | null\n  image: {\n    cropped: {\n      url: string | null\n    }\n  } | null\n}\n\nexport interface RelayProps {\n  tracking?: TrackingProp\n  relay?: RelayProp\n  popular_artists: PopularArtists_popular_artists\n}\n\ninterface Props\n  extends React.HTMLProps<HTMLAnchorElement>,\n    RelayProps,\n    FollowProps {}\n\n@track({}, { dispatch: data => Events.postEvent(data) })\nclass PopularArtistsContent extends React.Component<Props, null> {\n  private excludedArtistIds: Set<string>\n  followCount: number = 0\n\n  constructor(props: Props, context: any) {\n    super(props, context)\n    this.excludedArtistIds = new Set(\n      this.props.popular_artists.artists.filter(Boolean).map(item => item._id)\n    )\n  }\n\n  onArtistFollowed(\n    artist: Artist,\n    store: RecordSourceSelectorProxy,\n    data: PopularArtistsFollowArtistMutationResponse\n  ): void {\n    const suggestedArtistEdge =\n      data.followArtist.artist.related.suggested.edges[0]\n    const popularArtist = data.followArtist.popular_artists.artists[0]\n    const artistToSuggest = store.get(\n      ((suggestedArtistEdge && suggestedArtistEdge.node) || popularArtist).__id\n    )\n    this.excludedArtistIds.add(artistToSuggest.getValue(\"_id\"))\n\n    const popularArtistsRootField = store\n      .get(\"client:root\")\n      .getLinkedRecord(\"popular_artists\", { exclude_followed_artists: true })\n\n    const updatedPopularArtists = popularArtistsRootField\n      .getLinkedRecords(\"artists\")\n      .filter(Boolean)\n      .map(artistItem =>\n        artistItem.getDataID() === artist.__id ? artistToSuggest : artistItem\n      )\n\n    popularArtistsRootField.setLinkedRecords(updatedPopularArtists, \"artists\")\n\n    this.followCount += 1\n\n    this.props.updateFollowCount(this.followCount)\n\n    this.props.tracking.trackEvent({\n      action: \"Followed Artist\",\n      entity_id: artist._id,\n      entity_slug: artist.id,\n      context_module: \"onboarding recommended\",\n    })\n  }\n\n  onFollowedArtist(artist: Artist) {\n    commitMutation<PopularArtistsFollowArtistMutation>(\n      this.props.relay.environment,\n      {\n        mutation: graphql`\n          mutation PopularArtistsFollowArtistMutation(\n            $input: FollowArtistInput!\n            $excludedArtistIds: [String]!\n          ) {\n            followArtist(input: $input) {\n              popular_artists(\n                size: 1\n                exclude_followed_artists: true\n                exclude_artist_ids: $excludedArtistIds\n              ) {\n                artists {\n                  id\n                  _id\n                  __id\n                  name\n                  image {\n                    cropped(width: 100, height: 100) {\n                      url\n                    }\n                  }\n                }\n              }\n              artist {\n                __id\n                related {\n                  suggested(\n                    first: 1\n                    exclude_followed_artists: true\n                    exclude_artist_ids: $excludedArtistIds\n                  ) {\n                    edges {\n                      node {\n                        id\n                        _id\n                        __id\n                        name\n                        image {\n                          cropped(width: 100, height: 100) {\n                            url\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            artist_id: artist.id,\n            unfollow: false,\n          },\n          excludedArtistIds: Array.from(this.excludedArtistIds),\n        },\n        updater: (store, data) => this.onArtistFollowed(artist, store, data),\n      }\n    )\n  }\n\n  render() {\n    const artistItems = this.props.popular_artists.artists\n      .filter(Boolean)\n      .map((artist, index) => {\n        const imageUrl = get(artist, a => a.image.cropped.url)\n        return (\n          <LinkContainer key={`popular-artists-${index}`}>\n            <ReplaceTransition\n              transitionEnterTimeout={1000}\n              transitionLeaveTimeout={400}\n            >\n              <ItemLink\n                href=\"#\"\n                item={artist}\n                key={artist.id}\n                id={artist.id}\n                name={artist.name}\n                image_url={imageUrl}\n                onClick={() => this.onFollowedArtist(artist)}\n              />\n            </ReplaceTransition>\n          </LinkContainer>\n        )\n      })\n\n    return <div>{artistItems}</div>\n  }\n}\n\nconst PopularArtistContentContainer = createFragmentContainer(\n  PopularArtistsContent,\n  {\n    popular_artists: graphql`\n      fragment PopularArtists_popular_artists on PopularArtists {\n        artists {\n          id\n          _id\n          __id\n          name\n          image {\n            cropped(width: 100, height: 100) {\n              url\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n\nconst PopularArtistsComponent: React.SFC<SystemContextProps & FollowProps> = ({\n  relayEnvironment,\n  updateFollowCount,\n}) => {\n  return (\n    <QueryRenderer<PopularArtistsQuery>\n      environment={relayEnvironment}\n      query={graphql`\n        query PopularArtistsQuery {\n          popular_artists(exclude_followed_artists: true) {\n            ...PopularArtists_popular_artists\n          }\n        }\n      `}\n      variables={{}}\n      render={({ error, props }) => {\n        if (props) {\n          return (\n            <PopularArtistContentContainer\n              popular_artists={props.popular_artists}\n              updateFollowCount={updateFollowCount}\n            />\n          )\n        } else {\n          return null\n        }\n      }}\n    />\n  )\n}\n\nexport const PopularArtists = withSystemContext(PopularArtistsComponent)\n"],"file":"PopularArtists.js"}