{"version":3,"sources":["../../../../../src/Components/Onboarding/Steps/Genes/GeneSearchResults.tsx"],"names":["NoResultsContainer","styled","div","GeneSearchResultsContent","dispatch","data","Events","postEvent","props","context","excludedGeneIds","Set","viewer","match_gene","map","item","_id","gene","store","suggestedGene","get","followGene","similar","edges","node","__id","add","getValue","suggestedGenesRootField","suggestedGenes","getLinkedRecords","term","updatedSuggestedGenes","geneItem","id","setLinkedRecords","followCount","updateFollowCount","tracking","trackEvent","action","entity_id","entity_slug","context_module","relay","environment","mutation","variables","input","gene_id","Array","from","updater","onGeneFollowed","items","index","imageUrl","i","image","cropped","url","name","followedGene","length","React","Component","GeneSearchResultsContentContainer","GeneSearchResultsComponent","relayEnvironment","error","GeneSearchResults"],"mappings":"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","sourcesContent":["import { GeneSearchResults_viewer } from \"__generated__/GeneSearchResults_viewer.graphql\"\nimport {\n  GeneSearchResultsFollowGeneMutation,\n  GeneSearchResultsFollowGeneMutationResponse,\n} from \"__generated__/GeneSearchResultsFollowGeneMutation.graphql\"\nimport { GeneSearchResultsQuery } from \"__generated__/GeneSearchResultsQuery.graphql\"\nimport { SystemContextProps, withSystemContext } from \"Artsy\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport { garamond } from \"Assets/Fonts\"\nimport * as React from \"react\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport track, { TrackingProp } from \"react-tracking\"\nimport { RecordSourceSelectorProxy } from \"relay-runtime\"\nimport styled from \"styled-components\"\nimport { get } from \"Utils/get\"\nimport Events from \"../../../../Utils/Events\"\nimport ReplaceTransition from \"../../../Animation/ReplaceTransition\"\nimport ItemLink, { LinkContainer } from \"../../ItemLink\"\nimport { FollowProps } from \"../../Types\"\n\ntype Gene = GeneSearchResults_viewer[\"match_gene\"][0]\n\ninterface ContainerProps extends FollowProps {\n  term: string\n}\n\ninterface Props extends React.HTMLProps<HTMLAnchorElement>, ContainerProps {\n  tracking?: TrackingProp\n  relay?: RelayProp\n  viewer: GeneSearchResults_viewer\n}\n\nconst NoResultsContainer = styled.div`\n  ${garamond(\"s17\")};\n  text-align: center;\n  font-style: italic;\n  border-bottom: none;\n  font-weight: lighter;\n`\n\n@track({}, { dispatch: data => Events.postEvent(data) })\nclass GeneSearchResultsContent extends React.Component<Props, null> {\n  private excludedGeneIds: Set<string>\n  followCount: number = 0\n\n  constructor(props: Props, context: any) {\n    super(props, context)\n    this.excludedGeneIds = new Set(\n      this.props.viewer.match_gene.map(item => item._id)\n    )\n  }\n\n  onGeneFollowed(\n    gene: Gene,\n    store: RecordSourceSelectorProxy,\n    data: GeneSearchResultsFollowGeneMutationResponse\n  ): void {\n    const suggestedGene = store.get(\n      data.followGene.gene.similar.edges[0].node.__id\n    )\n    this.excludedGeneIds.add(suggestedGene.getValue(\"_id\"))\n\n    const suggestedGenesRootField = store.get(\"client:root:viewer\")\n    const suggestedGenes = suggestedGenesRootField.getLinkedRecords(\n      \"match_gene\",\n      { term: this.props.term }\n    )\n    const updatedSuggestedGenes = suggestedGenes.map(geneItem =>\n      geneItem.getValue(\"id\") === gene.id ? suggestedGene : geneItem\n    )\n\n    suggestedGenesRootField.setLinkedRecords(\n      updatedSuggestedGenes,\n      \"match_gene\",\n      { term: this.props.term }\n    )\n\n    this.followCount += 1\n\n    this.props.updateFollowCount(this.followCount)\n\n    this.props.tracking.trackEvent({\n      action: \"Followed Gene\",\n      entity_id: gene._id,\n      entity_slug: gene.id,\n      context_module: \"onboarding search\",\n    })\n  }\n\n  followedGene(gene: Gene) {\n    this.excludedGeneIds.add(gene._id)\n\n    commitMutation<GeneSearchResultsFollowGeneMutation>(\n      this.props.relay.environment,\n      {\n        mutation: graphql`\n          mutation GeneSearchResultsFollowGeneMutation(\n            $input: FollowGeneInput!\n            $excludedGeneIds: [String]!\n          ) {\n            followGene(input: $input) {\n              gene {\n                similar(first: 1, exclude_gene_ids: $excludedGeneIds) {\n                  edges {\n                    node {\n                      id\n                      _id\n                      __id\n                      name\n                      image {\n                        cropped(width: 100, height: 100) {\n                          url\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            gene_id: gene.id,\n          },\n          excludedGeneIds: Array.from(this.excludedGeneIds),\n        },\n        updater: (store, data) => this.onGeneFollowed(gene, store, data),\n      }\n    )\n  }\n\n  render() {\n    const items = this.props.viewer.match_gene.map((item, index) => {\n      const imageUrl = get(item, i => i.image.cropped.url)\n      return (\n        <LinkContainer key={`gene-search-results-${index}`}>\n          <ReplaceTransition\n            transitionEnterTimeout={1000}\n            transitionLeaveTimeout={400}\n          >\n            <ItemLink\n              href=\"#\"\n              item={item}\n              key={item.id}\n              id={item.id}\n              name={item.name}\n              image_url={imageUrl}\n              onClick={() => this.followedGene(item)}\n            />\n          </ReplaceTransition>\n        </LinkContainer>\n      )\n    })\n\n    if (items.length < 1) {\n      return <NoResultsContainer>No Results Found</NoResultsContainer>\n    }\n\n    return <div>{items}</div>\n  }\n}\n\nconst GeneSearchResultsContentContainer = createFragmentContainer(\n  GeneSearchResultsContent,\n  {\n    viewer: graphql`\n      fragment GeneSearchResults_viewer on Viewer {\n        match_gene(term: $term) {\n          name\n          id\n          _id\n          image {\n            cropped(width: 100, height: 100) {\n              url\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n\nconst GeneSearchResultsComponent: React.SFC<\n  ContainerProps & SystemContextProps\n> = ({ term, relayEnvironment, updateFollowCount }) => {\n  return (\n    <QueryRenderer<GeneSearchResultsQuery>\n      environment={relayEnvironment}\n      query={graphql`\n        query GeneSearchResultsQuery($term: String!) {\n          viewer {\n            ...GeneSearchResults_viewer\n          }\n        }\n      `}\n      variables={{ term }}\n      render={({ error, props }) => {\n        if (props) {\n          return (\n            <GeneSearchResultsContentContainer\n              viewer={props.viewer}\n              term={term}\n              updateFollowCount={updateFollowCount}\n            />\n          )\n        } else {\n          return null\n        }\n      }}\n    />\n  )\n}\n\nexport const GeneSearchResults = withSystemContext(GeneSearchResultsComponent)\n"],"file":"GeneSearchResults.js"}