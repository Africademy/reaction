{"version":3,"sources":["../../../../../src/Components/Onboarding/Steps/Genes/SuggestedGenes.tsx"],"names":["SuggestedGenesContent","dispatch","data","Events","postEvent","props","context","excludedGeneIds","Set","suggested_genes","map","item","_id","gene","store","suggestedGene","get","followGene","similar","edges","node","__id","add","getValue","suggestedGenesRootField","suggestedGenes","getLinkedRecords","updatedSuggestedGenes","geneItem","id","setLinkedRecords","followCount","updateFollowCount","tracking","trackEvent","action","entity_id","entity_slug","context_module","relay","environment","mutation","variables","input","gene_id","Array","from","updater","onGeneFollowed","items","index","imageUrl","i","image","cropped","url","name","followedGene","React","Component","SuggestedGenesContainer","SuggestedGenesComponent","relayEnvironment","error","SuggestedGenes"],"mappings":"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","sourcesContent":["import { SuggestedGenes_suggested_genes } from \"__generated__/SuggestedGenes_suggested_genes.graphql\"\nimport {\n  SuggestedGenesFollowGeneMutation,\n  SuggestedGenesFollowGeneMutationResponse,\n} from \"__generated__/SuggestedGenesFollowGeneMutation.graphql\"\nimport { SuggestedGenesQuery } from \"__generated__/SuggestedGenesQuery.graphql\"\nimport { SystemContextProps, withSystemContext } from \"Artsy\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport * as React from \"react\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\nimport track, { TrackingProp } from \"react-tracking\"\nimport { RecordSourceSelectorProxy } from \"relay-runtime\"\nimport { get } from \"Utils/get\"\nimport Events from \"../../../../Utils/Events\"\nimport ReplaceTransition from \"../../../Animation/ReplaceTransition\"\nimport ItemLink, { LinkContainer } from \"../../ItemLink\"\nimport { FollowProps } from \"../../Types\"\n\ntype Gene = SuggestedGenes_suggested_genes[0]\n\ninterface Props extends React.HTMLProps<HTMLAnchorElement>, FollowProps {\n  relay?: RelayProp\n  suggested_genes: SuggestedGenes_suggested_genes\n  tracking?: TrackingProp\n}\n\n@track({}, { dispatch: data => Events.postEvent(data) })\nclass SuggestedGenesContent extends React.Component<Props> {\n  private excludedGeneIds: Set<string>\n  followCount: number = 0\n\n  constructor(props: Props, context: any) {\n    super(props, context)\n    this.excludedGeneIds = new Set(\n      this.props.suggested_genes.map(item => item._id)\n    )\n  }\n\n  onGeneFollowed(\n    gene: Gene,\n    store: RecordSourceSelectorProxy,\n    data: SuggestedGenesFollowGeneMutationResponse\n  ): void {\n    const suggestedGene = store.get(\n      data.followGene.gene.similar.edges[0].node.__id\n    )\n    this.excludedGeneIds.add(suggestedGene.getValue(\"_id\"))\n\n    const suggestedGenesRootField = store.get(\"client:root\")\n    const suggestedGenes = suggestedGenesRootField.getLinkedRecords(\n      \"suggested_genes\"\n    )\n    const updatedSuggestedGenes = suggestedGenes.map(geneItem =>\n      geneItem.getValue(\"id\") === gene.id ? suggestedGene : geneItem\n    )\n\n    suggestedGenesRootField.setLinkedRecords(\n      updatedSuggestedGenes,\n      \"suggested_genes\"\n    )\n\n    this.followCount += 1\n\n    this.props.updateFollowCount(this.followCount)\n\n    this.props.tracking.trackEvent({\n      action: \"Followed Gene\",\n      entity_id: gene._id,\n      entity_slug: gene.id,\n      context_module: \"onboarding recommended\",\n    })\n  }\n\n  followedGene(gene: Gene) {\n    this.excludedGeneIds.add(gene._id)\n\n    commitMutation<SuggestedGenesFollowGeneMutation>(\n      this.props.relay.environment,\n      {\n        mutation: graphql`\n          mutation SuggestedGenesFollowGeneMutation(\n            $input: FollowGeneInput!\n            $excludedGeneIds: [String]!\n          ) {\n            followGene(input: $input) {\n              gene {\n                similar(first: 1, exclude_gene_ids: $excludedGeneIds) {\n                  edges {\n                    node {\n                      id\n                      _id\n                      __id\n                      name\n                      image {\n                        cropped(width: 100, height: 100) {\n                          url\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            gene_id: gene.id,\n          },\n          excludedGeneIds: Array.from(this.excludedGeneIds),\n        },\n        updater: (store, data) => this.onGeneFollowed(gene, store, data),\n      }\n    )\n  }\n\n  render() {\n    const items = this.props.suggested_genes.map((item, index) => {\n      const imageUrl = get(item, i => i.image.cropped.url)\n      return (\n        <LinkContainer key={`suggested-genes-${index}`}>\n          <ReplaceTransition\n            transitionEnterTimeout={1000}\n            transitionLeaveTimeout={400}\n          >\n            <ItemLink\n              href=\"#\"\n              item={item}\n              key={item.id}\n              id={item.id}\n              _id={item._id}\n              name={item.name}\n              image_url={imageUrl}\n              onClick={() => this.followedGene(item)}\n            />\n          </ReplaceTransition>\n        </LinkContainer>\n      )\n    })\n\n    return <div>{items}</div>\n  }\n}\n\nconst SuggestedGenesContainer = createFragmentContainer(SuggestedGenesContent, {\n  suggested_genes: graphql`\n    fragment SuggestedGenes_suggested_genes on Gene @relay(plural: true) {\n      id\n      _id\n      name\n      image {\n        cropped(width: 100, height: 100) {\n          url\n        }\n      }\n    }\n  `,\n})\n\nconst SuggestedGenesComponent: React.SFC<SystemContextProps & FollowProps> = ({\n  relayEnvironment,\n  updateFollowCount,\n}) => {\n  return (\n    <QueryRenderer<SuggestedGenesQuery>\n      environment={relayEnvironment}\n      query={graphql`\n        query SuggestedGenesQuery {\n          suggested_genes {\n            ...SuggestedGenes_suggested_genes\n          }\n        }\n      `}\n      variables={{}}\n      render={({ error, props }) => {\n        if (props) {\n          return (\n            <SuggestedGenesContainer\n              suggested_genes={props.suggested_genes}\n              updateFollowCount={updateFollowCount}\n            />\n          )\n        } else {\n          return null\n        }\n      }}\n    />\n  )\n}\n\nexport const SuggestedGenes = withSystemContext(SuggestedGenesComponent)\n"],"file":"SuggestedGenes.js"}