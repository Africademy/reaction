{"version":3,"sources":["../../../src/Components/Payment/PaymentForm.tsx"],"names":["logger","PaymentForm","address","emptyAddress","country","hideBillingAddress","error","isCommittingMutation","isErrorModalOpen","errorModalMessage","addressErrors","addressTouched","billingAddress","getSelectedBillingAddress","me","props","setState","state","errors","hasErrors","touchedAddress","stripe","createToken","then","token","createCreditCard","id","xs","response","el","cardElement","onSubmit","onCloseModal","name","addressLine1","addressLine2","city","region","postalCode","address_line1","address_line2","address_city","address_state","address_zip","address_country","store","data","creditCardOrError","creditCardEdge","meStore","get","__id","connection","ConnectionHandler","getConnection","mutationPayload","getRootField","creditCardOrErrorEdge","getLinkedRecord","insertEdgeAfter","relay","environment","onCompleted","cardInputElement","clear","window","scrollTo","forEach","onMutationError","bind","mutationError","ErrorWithMetadata","message","detail","onError","mutation","variables","input","updater","onCreditCardAdded","phoneNumber","Component"],"mappings":"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","sourcesContent":["import { Box, Button, Flex, Join, Serif, Spacer } from \"@artsy/palette\"\nimport { PaymentFormCreateCreditCardMutation } from \"__generated__/PaymentFormCreateCreditCardMutation.graphql\"\nimport { UserSettingsPayments_me } from \"__generated__/UserSettingsPayments_me.graphql\"\nimport {\n  Address,\n  AddressErrors,\n  AddressForm,\n  AddressTouched,\n  emptyAddress,\n} from \"Apps/Order/Components/AddressForm\"\nimport { CreditCardInput } from \"Apps/Order/Components/CreditCardInput\"\nimport { validateAddress } from \"Apps/Order/Utils/formValidators\"\nimport { ErrorModal } from \"Components/Modal/ErrorModal\"\nimport React, { Component } from \"react\"\nimport { commitMutation, graphql, RelayProp } from \"react-relay\"\nimport { injectStripe, ReactStripeElements } from \"react-stripe-elements\"\nimport { ConnectionHandler } from \"relay-runtime\"\nimport { ErrorWithMetadata } from \"Utils/errors\"\nimport createLogger from \"Utils/logger\"\nimport { Responsive } from \"Utils/Responsive\"\n\nexport interface PaymentFormProps\n  extends ReactStripeElements.InjectedStripeProps {\n  relay?: RelayProp\n  me: UserSettingsPayments_me\n}\n\ninterface PaymentFormState {\n  address: Address\n  hideBillingAddress: boolean\n  error: stripe.Error\n  isCommittingMutation: boolean\n  isErrorModalOpen: boolean\n  errorModalMessage: string\n  addressErrors: AddressErrors\n  addressTouched: AddressTouched\n}\n\nconst logger = createLogger(\"Components/Payment/PaymentForm.tsx\")\n\nclass PaymentForm extends Component<PaymentFormProps, PaymentFormState> {\n  private cardElement\n\n  state = {\n    address: { ...emptyAddress, country: \"US\" },\n    hideBillingAddress: true,\n    error: null,\n    isCommittingMutation: false,\n    isErrorModalOpen: false,\n    errorModalMessage: null,\n    addressErrors: {},\n    addressTouched: {},\n  }\n\n  get touchedAddress() {\n    return {\n      name: true,\n      country: true,\n      postalCode: true,\n      addressLine1: true,\n      addressLine2: true,\n      city: true,\n      region: true,\n      phoneNumber: true,\n    }\n  }\n\n  onSubmit = () => {\n    const billingAddress = this.getSelectedBillingAddress()\n    const { me } = this.props\n    this.setState({ isCommittingMutation: true }, () => {\n      const { errors, hasErrors } = validateAddress(this.state.address)\n      if (hasErrors) {\n        this.setState({\n          isCommittingMutation: false,\n          addressErrors: errors,\n          addressTouched: this.touchedAddress,\n        })\n        return\n      }\n\n      this.props.stripe.createToken(billingAddress).then(({ error, token }) => {\n        if (error) {\n          this.setState({\n            error,\n            isCommittingMutation: false,\n          })\n        } else {\n          this.createCreditCard({ token: token.id, me })\n        }\n      })\n    })\n  }\n\n  render() {\n    const { error, isCommittingMutation } = this.state\n\n    return (\n      <>\n        <Responsive>\n          {({ xs }) => {\n            return (\n              <Flex flexDirection={xs ? \"column\" : \"row\"}>\n                <Box width=\"100%\" maxWidth={542}>\n                  <Join separator={<Spacer mb={3} />}>\n                    <Flex flexDirection=\"column\">\n                      <Serif\n                        mb={1}\n                        size=\"3t\"\n                        color=\"black100\"\n                        lineHeight=\"1.1em\"\n                      >\n                        Credit Card\n                      </Serif>\n                      <CreditCardInput\n                        error={error}\n                        onChange={response =>\n                          this.setState({ error: response.error })\n                        }\n                        ref={el => (this.cardElement = el)}\n                      />\n                    </Flex>\n\n                    <AddressForm\n                      value={this.state.address}\n                      onChange={address => this.setState({ address })}\n                      errors={this.state.addressErrors}\n                      touched={this.state.addressTouched}\n                      billing\n                    />\n                    <Button\n                      size=\"large\"\n                      width=\"100%\"\n                      onClick={this.onSubmit}\n                      loading={isCommittingMutation}\n                    >\n                      Submit\n                    </Button>\n                  </Join>\n                  <Spacer mb={3} />\n                </Box>\n              </Flex>\n            )\n          }}\n        </Responsive>\n        <ErrorModal\n          onClose={this.onCloseModal}\n          show={this.state.isErrorModalOpen}\n          contactEmail=\"support@artsy.net\"\n          detailText={this.state.errorModalMessage}\n        />\n      </>\n    )\n  }\n\n  onCloseModal = () => {\n    this.setState({ isErrorModalOpen: false })\n  }\n\n  private getSelectedBillingAddress(): stripe.TokenOptions {\n    const {\n      name,\n      addressLine1,\n      addressLine2,\n      city,\n      region,\n      postalCode,\n      country,\n    } = this.state.address\n\n    return {\n      name,\n      address_line1: addressLine1,\n      address_line2: addressLine2,\n      address_city: city,\n      address_state: region,\n      address_zip: postalCode,\n      address_country: country,\n    }\n  }\n\n  onCreditCardAdded(me, store, data): void {\n    const {\n      createCreditCard: { creditCardOrError },\n    } = data\n\n    // Explicitly update the relay store to be aware of the new credit card\n    if (creditCardOrError.creditCardEdge) {\n      const meStore = store.get(me.__id)\n      const connection = ConnectionHandler.getConnection(\n        meStore,\n        \"UserSettingsPayments_creditCards\"\n      )\n      const mutationPayload = store.getRootField(\"createCreditCard\")\n      const creditCardOrErrorEdge = mutationPayload.getLinkedRecord(\n        \"creditCardOrError\"\n      )\n      const creditCardEdge = creditCardOrErrorEdge.getLinkedRecord(\n        \"creditCardEdge\"\n      )\n      ConnectionHandler.insertEdgeAfter(connection, creditCardEdge)\n    }\n  }\n\n  private createCreditCard({ token, me }) {\n    commitMutation<PaymentFormCreateCreditCardMutation>(\n      this.props.relay.environment,\n      {\n        onCompleted: (data, errors) => {\n          const {\n            createCreditCard: { creditCardOrError },\n          } = data\n\n          if (creditCardOrError.creditCardEdge) {\n            this.setState({\n              isCommittingMutation: false,\n              address: { ...emptyAddress, country: \"US\" },\n              addressErrors: {},\n              addressTouched: {},\n            })\n            this.cardElement && this.cardElement.cardInputElement.clear()\n            window.scrollTo(0, 0)\n          } else {\n            if (errors) {\n              errors.forEach(this.onMutationError.bind(this))\n            } else {\n              const mutationError = creditCardOrError.mutationError\n              this.onMutationError(\n                new ErrorWithMetadata(mutationError.message, mutationError),\n                mutationError.detail\n              )\n            }\n          }\n        },\n        onError: this.onMutationError.bind(this),\n        mutation: graphql`\n          mutation PaymentFormCreateCreditCardMutation(\n            $input: CreditCardInput!\n          ) {\n            createCreditCard(input: $input) {\n              creditCardOrError {\n                ... on CreditCardMutationSuccess {\n                  creditCardEdge {\n                    node {\n                      ...UserSettingsPaymentsCreditCard @relay(mask: false)\n                    }\n                  }\n                }\n                ... on CreditCardMutationFailure {\n                  mutationError {\n                    type\n                    message\n                    detail\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          input: { token },\n        },\n        updater: (store, data) => this.onCreditCardAdded(me, store, data),\n      }\n    )\n  }\n\n  private onMutationError(error, errorModalMessage?) {\n    logger.error(error)\n    this.setState({\n      isCommittingMutation: false,\n      isErrorModalOpen: true,\n      errorModalMessage,\n    })\n  }\n}\n\nexport default injectStripe(PaymentForm)\n"],"file":"PaymentForm.js"}