{"version":3,"sources":["../../../src/Components/Payment/SavedCreditCards.tsx"],"names":["CreditCard","isErrorModalOpen","isCommittingMutation","setState","props","creditCard","state","deleteCreditCard","me","id","onCloseModal","relay","environment","onCompleted","data","errors","creditCardOrError","onMutationError","onError","bind","mutation","variables","input","updater","store","onCreditCardDeleted","mutationPayload","getRootField","creditCardOrErrorEdge","getLinkedRecord","creditCardEdge","creditCardId","getValue","meStore","get","__id","connection","ConnectionHandler","getConnection","deleteNode","console","error","React","Component","RemoveLink","styled","div","SpinnerContainer","SavedCreditCards","creditCards","map","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAoBaA,U;;;;;;;;;;;;;;;;;;4DAIH;AAAEC,MAAAA,gBAAgB,EAAE,KAApB;AAA2BC,MAAAA,oBAAoB,EAAE;AAAjD,K;;mEAqCO,YAAM;AACnB,YAAKC,QAAL,CAAc;AAAEF,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACD,K;;;;;;;6BArCQ;AAAA;;AACP,aACE,4DACE,6BAAC,kBAAD;AAAW,QAAA,aAAa,EAAC,QAAzB;AAAkC,QAAA,CAAC,EAAE,CAArC;AAAwC,QAAA,EAAE,EAAE;AAA5C,SACE,6BAAC,aAAD;AAAM,QAAA,cAAc,EAAC,eAArB;AAAqC,QAAA,UAAU,EAAC;AAAhD,SACE,6BAAC,oCAAD,EAAuB,KAAKG,KAAL,CAAWC,UAAlC,CADF,EAEE,6BAAC,aAAD;AAAM,QAAA,IAAI,EAAC,GAAX;AAAe,QAAA,KAAK,EAAC;AAArB,SACG,KAAKC,KAAL,CAAWJ,oBAAX,GACC,6BAAC,gBAAD,QACE,6BAAC,gBAAD,OADF,CADD,GAKC,6BAAC,UAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBACP,MAAI,CAACK,gBAAL,CACE,MAAI,CAACH,KAAL,CAAWI,EADb,EAEE,MAAI,CAACJ,KAAL,CAAWC,UAAX,CAAsBI,EAFxB,CADO;AAAA;AADX,kBANJ,CAFF,CADF,CADF,EAwBE,6BAAC,sBAAD;AACE,QAAA,OAAO,EAAE,KAAKC,YADhB;AAEE,QAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWL,gBAFnB;AAGE,QAAA,YAAY,EAAC;AAHf,QAxBF,CADF;AAgCD;;;qCAMwBO,E,EAAIC,E,EAAI;AAAA;;AAC/B,WAAKN,QAAL,CAAc;AAAED,QAAAA,oBAAoB,EAAE;AAAxB,OAAd,EAA8C,YAAM;AAClD,wCACE,MAAI,CAACE,KAAL,CAAWO,KAAX,CAAiBC,WADnB,EAEE;AACEC,UAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,MAAP,EAAkB;AAAA,gBAEPC,iBAFO,GAGzBF,IAHyB,CAE3BP,gBAF2B,CAEPS,iBAFO;;AAK7B,gBAAIA,iBAAiB,CAACX,UAAtB,EAAkC;AAChC,cAAA,MAAI,CAACF,QAAL,CAAc;AAAED,gBAAAA,oBAAoB,EAAE;AAAxB,eAAd;AACD,aAFD,MAEO;AACL,cAAA,MAAI,CAACe,eAAL,CAAqBF,MAArB;AACD;AACF,WAXH;AAYEG,UAAAA,OAAO,EAAE,MAAI,CAACD,eAAL,CAAqBE,IAArB,CAA0B,MAA1B,CAZX;AAaEC,UAAAA,QAAQ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YAbV;AAoCEC,UAAAA,SAAS,EAAE;AACTC,YAAAA,KAAK,EAAE;AAAEb,cAAAA,EAAE,EAAFA;AAAF;AADE,WApCb;AAuCEc,UAAAA,OAAO,EAAE,iBAACC,KAAD,EAAQV,IAAR;AAAA,mBAAiB,MAAI,CAACW,mBAAL,CAAyBD,KAAzB,EAAgChB,EAAhC,EAAoCM,IAApC,CAAjB;AAAA;AAvCX,SAFF;AA4CD,OA7CD;AA8CD;;;wCAE2BU,K,EAAOhB,E,EAAIM,I,EAAM;AAAA,UAErBE,iBAFqB,GAGvCF,IAHuC,CAEzCP,gBAFyC,CAErBS,iBAFqB,EAK3C;;AACA,UAAIA,iBAAiB,CAACX,UAAtB,EAAkC;AAChC,YAAMqB,eAAe,GAAGF,KAAK,CAACG,YAAN,CAAmB,kBAAnB,CAAxB;AACA,YAAMC,qBAAqB,GAAGF,eAAe,CAACG,eAAhB,CAC5B,mBAD4B,CAA9B;AAGA,YAAMC,cAAc,GAAGF,qBAAqB,CAACC,eAAtB,CAAsC,YAAtC,CAAvB;AACA,YAAME,YAAY,GAAGD,cAAc,CAACE,QAAf,CAAwB,MAAxB,CAArB;AACA,YAAMC,OAAO,GAAGT,KAAK,CAACU,GAAN,CAAU1B,EAAE,CAAC2B,IAAb,CAAhB;;AACA,YAAMC,UAAU,GAAGC,gCAAkBC,aAAlB,CACjBL,OADiB,EAEjB,kCAFiB,CAAnB;;AAIAI,wCAAkBE,UAAlB,CAA6BH,UAA7B,EAAyCL,YAAzC;AACD;AACF;;;oCAEuBhB,M,EAAQ;AAC9ByB,MAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsC1B,MAAtC;AACA,WAAKZ,QAAL,CAAc;AAAEF,QAAAA,gBAAgB,EAAE,IAApB;AAA0BC,QAAAA,oBAAoB,EAAE;AAAhD,OAAd;AACD;;;;EAvH6BwC,eAAMC,S;;;;AA0H/B,IAAMC,UAAU,GAAGC,0BAAOC,GAAV;AAAA;AAAA;AAAA,iDAAhB;;;;AAOP,IAAMC,gBAAgB,GAAGF,0BAAOC,GAAV;AAAA;AAAA;AAAA,6CAAtB;;AAKO,IAAME,gBAA4C,GAAG,SAA/CA,gBAA+C,CAAA5C,KAAK,EAAI;AACnE,SACE,4DACGA,KAAK,CAAC6C,WAAN,CAAkBC,GAAlB,CAAsB,UAAC7C,UAAD,EAAa8C,CAAb;AAAA,WACrB,6BAAC,UAAD;AACE,MAAA,UAAU,EAAE9C,UADd;AAEE,MAAA,GAAG,EAAE8C,CAFP;AAGE,MAAA,KAAK,EAAE/C,KAAK,CAACO,KAHf;AAIE,MAAA,EAAE,EAAEP,KAAK,CAACI;AAJZ,MADqB;AAAA,GAAtB,CADH,CADF;AAYD,CAbM","sourcesContent":["import { BorderBox, Flex, Sans, Spinner } from \"@artsy/palette\"\nimport { SavedCreditCardsDeleteCreditCardMutation } from \"__generated__/SavedCreditCardsDeleteCreditCardMutation.graphql\"\nimport { UserSettingsPayments_me } from \"__generated__/UserSettingsPayments_me.graphql\"\nimport { CreditCardDetails } from \"Apps/Order/Components/CreditCardDetails\"\nimport { ErrorModal } from \"Components/Modal/ErrorModal\"\nimport React, { SFC } from \"react\"\nimport { commitMutation, graphql, RelayProp } from \"react-relay\"\nimport { ConnectionHandler } from \"relay-runtime\"\nimport styled from \"styled-components\"\nimport { CreditCardType } from \"./UserSettingsPayments\"\n\ninterface SavedCreditCardsProps {\n  creditCards: [CreditCardType]\n  me: UserSettingsPayments_me\n  relay?: RelayProp\n}\n\ninterface CreditCardsState {\n  isErrorModalOpen: boolean\n  isCommittingMutation: boolean\n}\n\ninterface CreditCardProps {\n  creditCard?: CreditCardType\n  me: UserSettingsPayments_me\n  relay?: RelayProp\n}\n\nexport class CreditCard extends React.Component<\n  CreditCardProps,\n  CreditCardsState\n> {\n  state = { isErrorModalOpen: false, isCommittingMutation: false }\n\n  render() {\n    return (\n      <>\n        <BorderBox flexDirection=\"column\" p={2} mb={2}>\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <CreditCardDetails {...this.props.creditCard} />\n            <Sans size=\"2\" color=\"purple100\">\n              {this.state.isCommittingMutation ? (\n                <SpinnerContainer>\n                  <Spinner />\n                </SpinnerContainer>\n              ) : (\n                <RemoveLink\n                  onClick={() =>\n                    this.deleteCreditCard(\n                      this.props.me,\n                      this.props.creditCard.id\n                    )\n                  }\n                >\n                  Remove\n                </RemoveLink>\n              )}\n            </Sans>\n          </Flex>\n        </BorderBox>\n        <ErrorModal\n          onClose={this.onCloseModal}\n          show={this.state.isErrorModalOpen}\n          contactEmail=\"support@artsy.net\"\n        />\n      </>\n    )\n  }\n\n  onCloseModal = () => {\n    this.setState({ isErrorModalOpen: false })\n  }\n\n  private deleteCreditCard(me, id) {\n    this.setState({ isCommittingMutation: true }, () => {\n      commitMutation<SavedCreditCardsDeleteCreditCardMutation>(\n        this.props.relay.environment,\n        {\n          onCompleted: (data, errors) => {\n            const {\n              deleteCreditCard: { creditCardOrError },\n            } = data\n\n            if (creditCardOrError.creditCard) {\n              this.setState({ isCommittingMutation: false })\n            } else {\n              this.onMutationError(errors)\n            }\n          },\n          onError: this.onMutationError.bind(this),\n          mutation: graphql`\n            mutation SavedCreditCardsDeleteCreditCardMutation(\n              $input: DeleteCreditCardInput!\n            ) {\n              deleteCreditCard(input: $input) {\n                creditCardOrError {\n                  ... on CreditCardMutationSuccess {\n                    creditCard {\n                      id\n                      __id\n                    }\n                  }\n                  ... on CreditCardMutationFailure {\n                    mutationError {\n                      type\n                      message\n                      detail\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            input: { id },\n          },\n          updater: (store, data) => this.onCreditCardDeleted(store, me, data),\n        }\n      )\n    })\n  }\n\n  private onCreditCardDeleted(store, me, data) {\n    const {\n      deleteCreditCard: { creditCardOrError },\n    } = data\n\n    // Explicitly update relay store so the UI updates immediately\n    if (creditCardOrError.creditCard) {\n      const mutationPayload = store.getRootField(\"deleteCreditCard\")\n      const creditCardOrErrorEdge = mutationPayload.getLinkedRecord(\n        \"creditCardOrError\"\n      )\n      const creditCardEdge = creditCardOrErrorEdge.getLinkedRecord(\"creditCard\")\n      const creditCardId = creditCardEdge.getValue(\"__id\")\n      const meStore = store.get(me.__id)\n      const connection = ConnectionHandler.getConnection(\n        meStore,\n        \"UserSettingsPayments_creditCards\"\n      )\n      ConnectionHandler.deleteNode(connection, creditCardId)\n    }\n  }\n\n  private onMutationError(errors) {\n    console.error(\"SavedCreditCards.tsx\", errors)\n    this.setState({ isErrorModalOpen: true, isCommittingMutation: false })\n  }\n}\n\nexport const RemoveLink = styled.div`\n  text-align: right;\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nconst SpinnerContainer = styled.div`\n  padding-right: 30px;\n  position: relative;\n`\n\nexport const SavedCreditCards: SFC<SavedCreditCardsProps> = props => {\n  return (\n    <>\n      {props.creditCards.map((creditCard, i) => (\n        <CreditCard\n          creditCard={creditCard}\n          key={i}\n          relay={props.relay}\n          me={props.me}\n        />\n      ))}\n    </>\n  )\n}\n"],"file":"SavedCreditCards.js"}