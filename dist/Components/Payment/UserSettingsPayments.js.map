{"version":3,"sources":["../../../src/Components/Payment/UserSettingsPayments.tsx"],"names":["UserSettingsPayments","creditCardEdges","props","me","creditCards","edges","map","creditCard","node","length","relay","React","Component","UserSettingsPaymentsFragmentContainer","UserSettingsPaymentsQueryRenderer","SystemContext","user","relayEnvironment"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAOaA,oB;;;;;;;;;;;;;6BAGF;AACP,UAAMC,eAAe,GAAG,cAAI,KAAKC,KAAT,EAAgB,UAAAA,KAAK;AAAA,eAAIA,KAAK,CAACC,EAAN,CAASC,WAAT,CAAqBC,KAAzB;AAAA,OAArB,CAAxB;AACA,UAAMD,WAAW,GAAGH,eAAe,CAACK,GAAhB,CAAoB,gBAA0B;AAAA,YAAjBC,UAAiB,QAAvBC,IAAuB;AAChE,eAAOD,UAAP;AACD,OAFmB,CAApB;AAIA,aACE,6BAAC,cAAD,QACE,4DACGH,WAAW,IAAIA,WAAW,CAACK,MAA3B,GACC,6BAAC,YAAD;AAAK,QAAA,QAAQ,EAAE;AAAf,SACE,6BAAC,kCAAD;AACE,QAAA,WAAW,EAAEL,WADf;AAEE,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWQ,KAFpB;AAGE,QAAA,EAAE,EAAE,KAAKR,KAAL,CAAWC;AAHjB,QADF,EAME,6BAAC,cAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,EAAE,EAAE,CAApB;AAAuB,QAAA,EAAE,EAAE;AAA3B,wBANF,CADD,GAWG,IAZN,EAaE,6BAAC,sCAAD;AAAoB,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWQ,KAAtC;AAA6C,QAAA,EAAE,EAAE,KAAKR,KAAL,CAAWC;AAA5D,QAbF,CADF,CADF;AAmBD;;;;EA5BuCQ,eAAMC,S;;;AAyChD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYO,IAAMC,qCAAqC,GAAG,yCACnDb,oBADmD,EAEnD;AACEG,EAAAA,EAAE;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADJ,CAFmD,CAA9C;;;AAoBA,IAAMW,iCAAiC,GAAG,SAApCA,iCAAoC,GAAM;AAAA,oBAClB,uBAAWC,oBAAX,CADkB;AAAA,MAC7CC,IAD6C,eAC7CA,IAD6C;AAAA,MACvCC,gBADuC,eACvCA,gBADuC;;AAErD,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,SACE,6BAAC,wCAAD;AACE,IAAA,WAAW,EAAEC,gBADf;AAEE,IAAA,SAAS,EAAE,EAFb;AAGE,IAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAHP;AAUE,IAAA,MAAM,EAAE,oDACNJ,qCADM;AAVV,IADF;AAgBD,CAtBM","sourcesContent":["import { Box, Serif, Theme } from \"@artsy/palette\"\nimport { UserSettingsPayments_me } from \"__generated__/UserSettingsPayments_me.graphql\"\nimport { UserSettingsPaymentsQuery } from \"__generated__/UserSettingsPaymentsQuery.graphql\"\nimport { SystemContext, SystemContextProps } from \"Artsy\"\nimport { get } from \"Utils/get\"\n\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport React, { useContext } from \"react\"\nimport { createFragmentContainer, graphql, RelayProp } from \"react-relay\"\nimport { PaymentFormWrapper } from \"./PaymentFormWrapper\"\nimport { SavedCreditCards } from \"./SavedCreditCards\"\n\ninterface UserSettingsPaymentsProps extends SystemContextProps {\n  relay?: RelayProp\n  me: UserSettingsPayments_me\n}\n\nexport class UserSettingsPayments extends React.Component<\n  UserSettingsPaymentsProps\n> {\n  render() {\n    const creditCardEdges = get(this.props, props => props.me.creditCards.edges)\n    const creditCards = creditCardEdges.map(({ node: creditCard }) => {\n      return creditCard\n    })\n\n    return (\n      <Theme>\n        <>\n          {creditCards && creditCards.length ? (\n            <Box maxWidth={542}>\n              <SavedCreditCards\n                creditCards={creditCards as any}\n                relay={this.props.relay}\n                me={this.props.me}\n              />\n              <Serif size=\"6\" pb={3} pt={2}>\n                Add new card\n              </Serif>\n            </Box>\n          ) : null}\n          <PaymentFormWrapper relay={this.props.relay} me={this.props.me} />\n        </>\n      </Theme>\n    )\n  }\n}\n\nexport interface CreditCardType {\n  __id: string\n  id: string\n  brand: string\n  last_digits: string\n  expiration_month: number\n  expiration_year: number\n  __typename: string\n}\n\ngraphql`\n  fragment UserSettingsPaymentsCreditCard on CreditCard {\n    __id\n    id\n    brand\n    last_digits\n    expiration_year\n    expiration_month\n    __typename\n  }\n`\n\nexport const UserSettingsPaymentsFragmentContainer = createFragmentContainer(\n  UserSettingsPayments,\n  {\n    me: graphql`\n      fragment UserSettingsPayments_me on Me {\n        __id\n        id\n        creditCards(first: 100)\n          @connection(key: \"UserSettingsPayments_creditCards\", filters: []) {\n          edges {\n            node {\n              ...UserSettingsPaymentsCreditCard @relay(mask: false)\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n\nexport const UserSettingsPaymentsQueryRenderer = () => {\n  const { user, relayEnvironment } = useContext(SystemContext)\n  if (!user) {\n    return null\n  }\n\n  return (\n    <QueryRenderer<UserSettingsPaymentsQuery>\n      environment={relayEnvironment}\n      variables={{}}\n      query={graphql`\n        query UserSettingsPaymentsQuery {\n          me {\n            ...UserSettingsPayments_me\n          }\n        }\n      `}\n      render={renderWithLoadProgress(\n        UserSettingsPaymentsFragmentContainer as any\n      )}\n    />\n  )\n}\n"],"file":"UserSettingsPayments.js"}