{"version":3,"sources":["../../../../src/Components/Publishing/Display/DisplayAd.tsx"],"names":["GPT","syncCorrelator","DisplayAd","props","adDimension","adUnit","targetingData","otherProps","split","map","a","parseInt","width","height","isAdEmpty","setAdEmpty","isMobileLeaderboardAd","ad","event","isEmpty","DisplayAdContainer","Flex","p","isStandard","isSeries"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAsBAA,gBAAIC,cAAJ,CAAmB,IAAnB;;AAEO,IAAMC,SAA8B,GAAG,SAAjCA,SAAiC,CAAAC,KAAK,EAAI;AAAA,MAC7CC,WAD6C,GACSD,KADT,CAC7CC,WAD6C;AAAA,MAChCC,MADgC,GACSF,KADT,CAChCE,MADgC;AAAA,MACxBC,aADwB,GACSH,KADT,CACxBG,aADwB;AAAA,MACNC,UADM,4BACSJ,KADT;;AAAA,8BAE7BC,WAAW,CAACI,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2B,UAAAC,CAAC;AAAA,WAAIC,QAAQ,CAACD,CAAD,CAAZ;AAAA,GAA5B,CAF6B;AAAA;AAAA,MAE9CE,KAF8C;AAAA,MAEvCC,MAFuC;;AAAA,kBAGrB,qBAAS,IAAT,CAHqB;AAAA;AAAA,MAG9CC,SAH8C;AAAA,MAGnCC,UAHmC;;AAIrD,MAAMC,qBAAqB,GAAG,sCAAeZ,WAAf,CAA9B;;AAEA,MAAMa,EAAE,GACN,6BAAC,eAAD;AACE,IAAA,gBAAgB,MADlB;AAEE,IAAA,UAAU,yBAAkBZ,MAAlB,CAFZ;AAGE,IAAA,SAAS,EAAEC,aAHb;AAIE,IAAA,QAAQ,EAAE,CAACM,KAAD,EAAQC,MAAR,CAJZ;AAKE,IAAA,iBAAiB,EAAE,2BAAAK,KAAK,EAAI;AAC1BH,MAAAA,UAAU,CAACG,KAAK,CAACC,OAAP,CAAV;AACD;AAPH,IADF;;AAYA,MAAIL,SAAJ,EAAe;AACb,WAAO,IAAP;AACD;;AAED,SACE,6BAAC,kBAAD;AACE,IAAA,aAAa,EAAC,QADhB;AAEE,IAAA,EAAE,EAAEE,qBAAqB,GAAG,CAAH,GAAO,CAFlC;AAGE,IAAA,EAAE,EAAEA,qBAAqB,GAAG,CAAH,GAAO,CAHlC;AAIE,IAAA,MAAM,EACJF,SAAS,IAAIA,SAAS,KAAK,IAA3B,GACI,KADJ,CACU;AADV,MAEIE,qBAAqB,GACrB,OADqB,CACb;AADa,MAErB,OATR;AAWE,IAAA,SAAS,EAAEF;AAXb,KAYMP,UAZN,GAcE,6BAAC,YAAD;AAAK,IAAA,CAAC,EAAC;AAAP,KACGU,EADH,EAEE,6BAAC,aAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAe,IAAA,KAAK,EAAC,SAArB;AAA+B,IAAA,CAAC,EAAE;AAAlC,qBAFF,CAdF,CADF;AAuBD,CA7CM;;;AA+CP,IAAMG,kBAAkB,GAAG,+BAAOC,aAAP,CAAH;AAAA;AAAA;AAAA,kGACZ,UAAAC,CAAC;AAAA,SAAKA,CAAC,CAACC,UAAF,GAAe,GAAf,GAAqB,QAA1B;AAAA,CADW,EAER,UAAAD,CAAC;AAAA,SAAKA,CAAC,CAACE,QAAF,uBAA0B,oBAAM,SAAN,CAA1B,IAA+C,MAApD;AAAA,CAFO,EAGR,UAAAF,CAAC;AAAA,SAAKA,CAAC,CAACE,QAAF,GAAa,oBAAM,UAAN,CAAb,GAAiC,oBAAM,QAAN,CAAtC;AAAA,CAHO,EAMR,UAAAF,CAAC;AAAA,SACbA,CAAC,CAACR,SAAF,IAAeQ,CAAC,CAACR,SAAF,KAAgB,IAA/B,GAAsC,QAAtC,GAAiD,SADpC;AAAA,CANO,CAAxB","sourcesContent":["import { Box, color, Flex, FlexProps, Sans } from \"@artsy/palette\"\nimport { is300x50AdUnit } from \"Components/Publishing/Display/DisplayTargeting\"\nimport { AdDimension, AdUnit } from \"Components/Publishing/Typings\"\nimport React, { SFC, useState } from \"react\"\nimport { Bling as GPT } from \"react-gpt\"\nimport styled from \"styled-components\"\n\nexport interface DisplayAdProps extends FlexProps {\n  adUnit: AdUnit\n  adDimension: AdDimension\n  targetingData: {\n    is_testing: boolean\n    page_type: string\n    post_id: string\n    tags: string\n  }\n  isSeries?: boolean\n  isStandard?: boolean\n}\n\nexport interface DisplayAdContainerProps extends FlexProps {\n  isSeries?: boolean\n  isStandard?: boolean\n  adDimension?: AdDimension\n  isAdEmpty?: boolean\n}\n\nGPT.syncCorrelator(true)\n\nexport const DisplayAd: SFC<DisplayAdProps> = props => {\n  const { adDimension, adUnit, targetingData, ...otherProps } = props\n  const [width, height] = adDimension.split(\"x\").map(a => parseInt(a))\n  const [isAdEmpty, setAdEmpty] = useState(null)\n  const isMobileLeaderboardAd = is300x50AdUnit(adDimension)\n\n  const ad = (\n    <GPT\n      collapseEmptyDiv\n      adUnitPath={`/21805539690/${adUnit}`}\n      targeting={targetingData}\n      slotSize={[width, height]}\n      onSlotRenderEnded={event => {\n        setAdEmpty(event.isEmpty)\n      }}\n    />\n  )\n\n  if (isAdEmpty) {\n    return null\n  }\n\n  return (\n    <DisplayAdContainer\n      flexDirection=\"column\"\n      pt={isMobileLeaderboardAd ? 2 : 4}\n      pb={isMobileLeaderboardAd ? 2 : 1}\n      height={\n        isAdEmpty || isAdEmpty === null\n          ? \"1px\" // on initial render OR when no ad content returned from Google, set 1px height to ad container to prevent jarring UX effect\n          : isMobileLeaderboardAd\n          ? \"100px\" // on mobile 300x50 ads reduce ad container height to 100px\n          : \"334px\"\n      }\n      isAdEmpty={isAdEmpty}\n      {...otherProps}\n    >\n      <Box m=\"auto\">\n        {ad}\n        <Sans size=\"1\" color=\"black30\" m={1}>\n          Advertisement\n        </Sans>\n      </Box>\n    </DisplayAdContainer>\n  )\n}\n\nconst DisplayAdContainer = styled(Flex)<DisplayAdContainerProps>`\n  margin: ${p => (p.isStandard ? \"0\" : \"0 auto\")};\n  border-top: ${p => (p.isSeries ? `1px solid ${color(\"black10\")}` : \"none\")};\n  background: ${p => (p.isSeries ? color(\"black100\") : color(\"black5\"))};\n  text-align: center;\n  width: 100%;\n  visibility: ${p =>\n    p.isAdEmpty || p.isAdEmpty === null ? \"hidden\" : \"visible\"};\n`\n"],"file":"DisplayAd.js"}