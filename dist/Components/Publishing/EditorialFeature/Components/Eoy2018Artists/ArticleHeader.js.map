{"version":3,"sources":["../../../../../../src/Components/Publishing/EditorialFeature/Components/Eoy2018Artists/ArticleHeader.tsx"],"names":["Eoy2018ArticleHeader","gridSize","bgImages","props","images","resizedImages","map","url","width","urls","i","bgIndex","Math","floor","random","length","includes","push","isMobile","isTablet","isTest","imageUrls","getImageUrls","src","isMobileItem","isTabletItem","isVisible","imagesGrid","React","Component","HeaderGrid","Flex","Img","styled","div","GridItem","Box","ArticleHeader","Title","h1","TitleBlock","span","textAlign"],"mappings":"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","sourcesContent":["import { Box, color, Flex } from \"@artsy/palette\"\nimport { unica } from \"Assets/Fonts\"\nimport { flatten, map } from \"lodash\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { textAlign } from \"styled-system\"\nimport { resize } from \"Utils/resizer\"\nimport { Media } from \"Utils/Responsive\"\n\nexport class Eoy2018ArticleHeader extends React.Component<{\n  images?: any\n  isMobile?: boolean\n  isTablet?: boolean\n  isTest?: boolean\n}> {\n  getImageUrls = gridSize => {\n    const bgImages = map(flatten(this.props.images), \"url\")\n    const resizedImages = bgImages.map(url => resize(url, { width: 300 }))\n    const urls = []\n\n    let i = 0\n    for (i; i < gridSize; ) {\n      const bgIndex = Math.floor(\n        Math.random() * Math.floor(resizedImages.length)\n      )\n      if (!urls.includes(resizedImages[bgIndex])) {\n        urls.push(resizedImages[bgIndex])\n        i = i + 1\n      }\n    }\n    return urls\n  }\n\n  imagesGrid = gridSize => {\n    const { isMobile, isTablet, isTest } = this.props\n    const imageUrls = this.getImageUrls(gridSize)\n\n    if (isTest) {\n      // hide random elements in tests\n      return\n    }\n    return imageUrls.map((src, i) => {\n      const isMobileItem = isMobile && (i === 5 || i === 6)\n      const isTabletItem = isTablet && [2, 3, 9].includes(i)\n      const isVisible = isMobileItem || isTabletItem\n\n      return (\n        <GridItem key={i} width={[1 / 2, 1 / 3, 1 / 4]} isVisible={isVisible}>\n          <Img src={src} />\n        </GridItem>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <ArticleHeader>\n        <Media at=\"xs\">\n          <HeaderGrid flexWrap=\"wrap\">{this.imagesGrid(8)}</HeaderGrid>\n        </Media>\n        <Media greaterThan=\"xs\">\n          <HeaderGrid flexWrap=\"wrap\">{this.imagesGrid(12)}</HeaderGrid>\n        </Media>\n\n        <Title>\n          <TitleBlock>The Most </TitleBlock>\n          <TitleBlock textAlign=\"right\">Influential </TitleBlock>\n          <Media lessThan=\"md\">\n            <TitleBlock>Artists</TitleBlock>\n          </Media>\n          <Media lessThan=\"md\">\n            <TitleBlock textAlign=\"right\"> of 2018</TitleBlock>\n          </Media>\n\n          <Media greaterThan=\"sm\">\n            <TitleBlock>Artists of 2018</TitleBlock>\n          </Media>\n        </Title>\n      </ArticleHeader>\n    )\n  }\n}\n\nconst HeaderGrid = styled(Flex)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\nconst Img = styled.div<{ src?: string }>`\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  transition: opacity 0.5s;\n\n  ${({ src }) =>\n    src &&\n    `\n    background: url(${src});\n    background-size: cover;\n    background-position: 50%;\n    mix-blend-mode: screen;\n    filter: grayscale(100%);\n  `};\n`\n\nconst GridItem = styled(Box)<{ isVisible?: boolean }>`\n  border: 3px solid ${color(\"purple100\")};\n  transition: background-color 0.5s;\n\n  ${Img} {\n    ${props =>\n      props.isVisible &&\n      `\n    opacity: 1;\n    `};\n  }\n\n  &:hover {\n    background-color: ${color(\"purple100\")};\n\n    ${Img} {\n      opacity: 1;\n    }\n  }\n\n  ${props =>\n    props.isVisible &&\n    `\n    background-color: ${color(\"purple100\")};\n  `};\n`\n\nconst ArticleHeader = styled.div`\n  height: 90vh;\n  max-height: 1000px;\n  border: 3px solid ${color(\"purple100\")};\n  display: flex;\n  align-items: center;\n  position: relative;\n  overflow: hidden;\n`\n\nconst Title = styled.h1`\n  min-height: 100%;\n  min-width: 100%;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin: 0;\n  ${unica(\"s100\")};\n  font-weight: inherit;\n`\n\n// Font size is responsive to pagewidth with max/min sizes\n// font-size: calc([minimum size] + ([maximum size] - [minimum size]) * ((100vw - [minimum viewport width]) / ([maximum viewport width] - [minimum viewport width])))\nconst TitleBlock = styled.span<{ textAlign?: string }>`\n  display: block;\n  font-size: calc(80px + (200 - 80) * ((100vw - 300px) / (1600 - 300)));\n  line-height: initial;\n  ${textAlign};\n`\n"],"file":"ArticleHeader.js"}