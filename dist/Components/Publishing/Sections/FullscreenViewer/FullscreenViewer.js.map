{"version":3,"sources":["../../../../../src/Components/Publishing/Sections/FullscreenViewer/FullscreenViewer.tsx"],"names":["FullscreenViewer","props","e","keyCode","close","setState","isCaptionOpen","state","onClose","images","section","i","length","slider","innerSlider","list","setAttribute","focus","onToggleCaption","toggleCaption","sliderSettings","dots","infinite","slidesToShow","slidesToScroll","accessibility","lazyLoad","draggable","nextArrow","prevArrow","initialSlide","slideIndex","show","handleKeydown","renderImageComponents","Component","PropTypes","func","LeftArrow","onClick","RightArrow","FullscreenViewerContainer","styled","div","Close","NavArrow","direction","Icon","pMedia","sm"],"mappings":"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","sourcesContent":["import { pMedia } from \"Components/Helpers\"\nimport Icon from \"Components/Icon\"\nimport { map } from \"lodash\"\nimport PropTypes from \"prop-types\"\nimport React, { Component, HTMLProps } from \"react\"\nimport Slider, { Settings } from \"react-slick\"\nimport styled, { StyledFunction } from \"styled-components\"\nimport { Slide } from \"./Slide\"\n\ninterface FullscreenViewerProps extends HTMLProps<HTMLDivElement> {\n  images: any\n  show: boolean\n  onClose: () => void\n  slideIndex?: number\n}\n\ninterface FullscreenViewerState {\n  isCaptionOpen: boolean\n}\n\nexport class FullscreenViewer extends Component<\n  FullscreenViewerProps,\n  FullscreenViewerState\n> {\n  static childContextTypes = {\n    onToggleCaption: PropTypes.func,\n  }\n\n  private slider: any\n\n  constructor(props) {\n    super(props)\n    this.state = { isCaptionOpen: false }\n  }\n\n  componentDidUpdate() {\n    if (this.slider) {\n      this.slider.innerSlider.list.setAttribute(\"tabindex\", 0)\n      this.slider.innerSlider.list.focus()\n    }\n  }\n\n  handleKeydown = e => {\n    if (e.keyCode === 27) {\n      this.close(e)\n    }\n  }\n\n  getChildContext() {\n    return { onToggleCaption: this.toggleCaption }\n  }\n\n  toggleCaption = () => {\n    this.setState({ isCaptionOpen: !this.state.isCaptionOpen })\n  }\n\n  close = e => {\n    this.props.onClose()\n  }\n\n  renderImageComponents = () => {\n    const images = this.props.images\n    return map(images, (section, i) => {\n      return (\n        <Slide\n          isCaptionOpen={this.state.isCaptionOpen}\n          section={section}\n          index={i + 1}\n          total={images.length}\n          key={i}\n        />\n      )\n    })\n  }\n\n  render() {\n    const sliderSettings: Settings = {\n      dots: false,\n      infinite: false,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      accessibility: true,\n      lazyLoad: \"ondemand\",\n      draggable: true,\n      nextArrow: <RightArrow />,\n      prevArrow: <LeftArrow />,\n      initialSlide: this.props.slideIndex,\n    }\n    return (\n      <div>\n        {this.props.show && (\n          <FullscreenViewerContainer onKeyDown={this.handleKeydown}>\n            <Slider {...sliderSettings} ref={slider => (this.slider = slider)}>\n              {this.renderImageComponents()}\n            </Slider>\n            <Close onClick={this.close}>\n              <Icon name=\"close\" color=\"gray\" fontSize=\"24px\" />\n            </Close>\n          </FullscreenViewerContainer>\n        )}\n      </div>\n    )\n  }\n}\n\nconst LeftArrow = props => {\n  return (\n    <NavArrow direction=\"left\" onClick={props.onClick}>\n      <Icon name=\"chevron-left\" color=\"black\" fontSize=\"24px\" />\n    </NavArrow>\n  )\n}\n\nconst RightArrow = props => {\n  return (\n    <NavArrow direction=\"right\" onClick={props.onClick}>\n      <Icon name=\"chevron-right\" color=\"black\" fontSize=\"24px\" />\n    </NavArrow>\n  )\n}\n\nexport const FullscreenViewerContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  position: fixed;\n  z-index: 1070;\n  top: 0;\n  left: 0;\n  background-color: white;\n`\nconst Close = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin: 20px;\n  cursor: pointer;\n`\ninterface NavArrowProps extends React.HTMLProps<HTMLDivElement> {\n  direction: string\n}\nconst div: StyledFunction<NavArrowProps> = styled.div\nconst NavArrow = div`\n  display: flex;\n  align-items: center;\n  position: absolute;\n  height: 100vh;\n  top: 0;\n  box-sizing: border-box;\n  ${props => (props.direction === \"left\" ? \"left: 0px;\" : \"\")};\n  ${props => (props.direction === \"right\" ? \"right: 0px;\" : \"\")};\n  ${Icon} {\n    z-index: 10;\n    cursor: pointer;\n    padding: 60px;\n  };\n  ${pMedia.sm`\n    display: none;\n  `};\n`\n"],"file":"FullscreenViewer.js"}