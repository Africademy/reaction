{"version":3,"sources":["../../../../../src/Components/Publishing/Sections/ImageSetPreview/ImageSetPreview.tsx"],"names":["ImageSetPreview","withFullScreen","props","fullscreenImages","images","section","slideshowIndex","findIndex","img","type","image","url","onViewFullscreen","layout","src","width","children","color","title","alt","getImageUrl","onClick","React","PureComponent","ImageSetContainer","styled","div","FullLabel","Img","ImgContainer","MiniWrapper","Flex"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAoBaA,e,OADZC,8B;;;;;;;;;;;;;;;;;;8DAWW,YAAM;AAAA,wBAIV,MAAKC,KAJK;AAAA,UAEZC,gBAFY,eAEZA,gBAFY;AAAA,UAGDC,MAHC,eAGZC,OAHY,CAGDD,MAHC;AAKd,UAAME,cAAc,GAClBH,gBAAgB,IAChBA,gBAAgB,CAACI,SAAjB,CAA2B,UAAAC,GAAG,EAAI;AAChC,eAAOA,GAAG,CAACC,IAAJ,KAAa,SAAb,GACHD,GAAG,CAACE,KAAJ,KAAcN,MAAM,CAAC,CAAD,CAAN,CAAUM,KADrB,GAEHF,GAAG,CAACG,GAAJ,KAAYP,MAAM,CAAC,CAAD,CAAN,CAAUO,GAF1B;AAGD,OAJD,CAFF;;AAQA,YAAKT,KAAL,CAAWU,gBAAX,CAA4BN,cAA5B;AACD,K;;;;;;;kCAvBa;AAAA,gCACe,KAAKJ,KAAL,CAAWG,OAD1B;AAAA,UACJD,MADI,uBACJA,MADI;AAAA,UACIS,MADJ,uBACIA,MADJ;AAEZ,UAAMH,KAAK,GAAGN,MAAM,CAAC,CAAD,CAApB;AACA,UAAMU,GAAG,GAAGJ,KAAK,CAACC,GAAN,GAAYD,KAAK,CAACC,GAAlB,GAAwBD,KAAK,CAACA,KAA1C;AACA,UAAMK,KAAK,GAAGF,MAAM,KAAK,MAAX,GAAoB,GAApB,GAA0B,GAAxC;AAEA,aAAO,qBAAOC,GAAP,EAAY;AAAEC,QAAAA,KAAK,EAALA;AAAF,OAAZ,CAAP;AACD;;;6BAkBQ;AAAA,yBAKH,KAAKb,KALF;AAAA,UAELc,QAFK,gBAELA,QAFK;AAAA,UAGLC,KAHK,gBAGLA,KAHK;AAAA,8CAILZ,OAJK;AAAA,UAIMQ,MAJN,wBAIMA,MAJN;AAAA,UAIcK,KAJd,wBAIcA,KAJd;AAMP,UAAMC,GAAG,GAAGD,KAAK,IAAI,gBAArB;AACA,UAAMJ,GAAG,GAAG,KAAKM,WAAL,EAAZ;;AAEA,UAAIP,MAAM,KAAK,MAAf,EAAuB;AACrB,eACE,6BAAC,iBAAD,QACE,6BAAC,SAAD;AAAW,UAAA,OAAO,EAAE,KAAKQ;AAAzB,WACE,6BAAC,4BAAD,EAAmB,KAAKnB,KAAxB,CADF,EAEGc,QAFH,CADF,EAKE,6BAAC,YAAD,QACE,6BAAC,GAAD;AAAK,UAAA,GAAG,EAAEF,GAAV;AAAe,UAAA,GAAG,EAAEK;AAApB,UADF,CALF,CADF;AAWD,OAZD,MAYO;AACL,eACE,6BAAC,iBAAD,QACE,6BAAC,WAAD;AAAa,UAAA,UAAU,EAAC,QAAxB;AAAiC,UAAA,OAAO,EAAE,KAAKE,OAA/C;AAAwD,UAAA,KAAK,EAAEJ;AAA/D,WACE,6BAAC,GAAD;AAAK,UAAA,GAAG,EAAEH,GAAV;AAAe,UAAA,GAAG,EAAEK;AAApB,UADF,EAEE,6BAAC,4BAAD,EAAmB,KAAKjB,KAAxB,CAFF,CADF,CADF;AAQD;AACF;;;;EAzDkCoB,eAAMC,a;;;;AA4DpC,IAAMC,iBAAiB,GAAGC,0BAAOC,GAAV;AAAA;AAAA;AAAA,qCAAvB;;;;AAKA,IAAMC,SAAS,GAAGF,0BAAOC,GAAV;AAAA;AAAA;AAAA,wRAAf;;;;AAuBA,IAAME,GAAG,GAAGH,0BAAOjB,GAAV;AAAA;AAAA;AAAA,+BAAT;;;;AAKA,IAAMqB,YAAY,GAAGJ,0BAAOC,GAAV;AAAA;AAAA;AAAA,QAAlB;;;AAEP,IAAMI,WAAW,GAAG,+BAAOC,aAAP,CAAH;AAAA;AAAA;AAAA,iHAGK,UAAA7B,KAAK;AAAA,SAAKA,KAAK,CAACe,KAAN,GAAcf,KAAK,CAACe,KAApB,GAA4B,oBAAM,SAAN,CAAjC;AAAA,CAHV,EAMbW,GANa,CAAjB","sourcesContent":["import { color as Color, Flex } from \"@artsy/palette\"\nimport { withFullScreen } from \"Components/Publishing/Sections/FullscreenViewer/withFullScreen\"\nimport { ImagesData } from \"Components/Publishing/Typings\"\nimport React, { ReactNode } from \"react\"\nimport styled from \"styled-components\"\nimport { resize } from \"Utils/resizer\"\nimport { ImageSetLabel } from \"./ImageSetLabel\"\n\ntype Layout = \"mini\" | \"full\"\n\nexport interface ImageSetSection {\n  type: string\n  images: ImagesData\n  layout?: Layout\n  title?: string\n}\n\nexport interface ImageSetPreviewProps {\n  color?: string\n  section: ImageSetSection\n  children?: ReactNode\n  onViewFullscreen?: (index: number) => void\n  fullscreenImages?: ImagesData\n}\n\n@withFullScreen\nexport class ImageSetPreview extends React.PureComponent<ImageSetPreviewProps> {\n  getImageUrl() {\n    const { images, layout } = this.props.section\n    const image = images[0]\n    const src = image.url ? image.url : image.image\n    const width = layout === \"full\" ? 800 : 200\n\n    return resize(src, { width })\n  }\n\n  onClick = () => {\n    const {\n      fullscreenImages,\n      section: { images },\n    } = this.props\n    const slideshowIndex =\n      fullscreenImages &&\n      fullscreenImages.findIndex(img => {\n        return img.type === \"artwork\"\n          ? img.image === images[0].image\n          : img.url === images[0].url\n      })\n\n    this.props.onViewFullscreen(slideshowIndex)\n  }\n\n  render() {\n    const {\n      children,\n      color,\n      section: { layout, title },\n    } = this.props\n    const alt = title || \"Open Slideshow\"\n    const src = this.getImageUrl()\n\n    if (layout === \"full\") {\n      return (\n        <ImageSetContainer>\n          <FullLabel onClick={this.onClick}>\n            <ImageSetLabel {...this.props} />\n            {children}\n          </FullLabel>\n          <ImgContainer>\n            <Img src={src} alt={alt} />\n          </ImgContainer>\n        </ImageSetContainer>\n      )\n    } else {\n      return (\n        <ImageSetContainer>\n          <MiniWrapper alignItems=\"center\" onClick={this.onClick} color={color}>\n            <Img src={src} alt={alt} />\n            <ImageSetLabel {...this.props} />\n          </MiniWrapper>\n        </ImageSetContainer>\n      )\n    }\n  }\n}\n\nexport const ImageSetContainer = styled.div`\n  position: relative;\n  width: 100%;\n`\n\nexport const FullLabel = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 20px;\n  min-height: 50px;\n  width: auto;\n  max-width: calc(100% - 80px);\n  border-radius: 2px;\n  background: rgba(255, 255, 255, 0.8);\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n\n  &:hover {\n    background: rgba(0, 0, 0, 0.6);\n    color: white;\n\n    path,\n    polygon {\n      fill: white;\n    }\n  }\n`\n\nexport const Img = styled.img`\n  height: auto;\n  width: 100%;\n`\n\nexport const ImgContainer = styled.div``\n\nconst MiniWrapper = styled(Flex)<{ color?: string }>`\n  height: 100px;\n  padding: 10px 0 10px 10px;\n  border: 1px solid ${props => (props.color ? props.color : Color(\"black10\"))};\n  cursor: pointer;\n\n  ${Img} {\n    height: 100%;\n    width: auto;\n  }\n`\n"],"file":"ImageSetPreview.js"}