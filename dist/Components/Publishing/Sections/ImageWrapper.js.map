{"version":3,"sources":["../../../../src/Components/Publishing/Sections/ImageWrapper.tsx"],"names":["ImageWrapper","undefined","isLoaded","mounted","setState","img","Image","imgTag","ReactDOM","findDOMNode","image","imgSrc","getAttribute","src","error","onload","onImageLoad","props","editing","layout","linked","slideshowIndex","imageProps","className","state","ref","React","PureComponent","Fullscreen","styled","div","StyledImageWrapper","pMedia","sm","BlockImage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaaA,Y;;;;;;;;;;;;;;;;;;4DACHC,S;;8DACE,K;;4DAEF;AACNC,MAAAA,QAAQ,EAAE;AADJ,K;;kEA2BM,YAAM;AAClB,UAAI,MAAKC,OAAT,EAAkB;AAChB,cAAKC,QAAL,CAAc;AACZF,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGD;AACF,K;;;;;;;wCA7BmB;AAClB,UAAMG,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AAEA;;;;;AAIA,UAAI;AACF,YAAMC,MAAM,GAAGC,kBAASC,WAAT,CAAqB,KAAKC,KAA1B,CAAf;;AACA,YAAMC,MAAM,GAAGJ,MAAM,CAACK,YAAP,CAAoB,KAApB,CAAf;AACAP,QAAAA,GAAG,CAACQ,GAAJ,GAAUF,MAAV;AACD,OAJD,CAIE,OAAOG,KAAP,EAAc;AACdT,QAAAA,GAAG,CAACQ,GAAJ,GAAU,EAAV;AACD,OAND,SAMU;AACRR,QAAAA,GAAG,CAACU,MAAJ,GAAa,KAAKC,WAAlB;AACA,aAAKb,OAAL,GAAe,IAAf;AACD;AACF;;;2CAEsB;AACrB,WAAKA,OAAL,GAAe,KAAf;AACD;;;6BAUQ;AAAA;;AAAA,wBAOE,KAAKc,KAPP;AAAA,UAELC,OAFK,eAELA,OAFK;AAAA,UAGLC,MAHK,eAGLA,MAHK;AAAA,UAILC,MAJK,eAILA,MAJK;AAAA,UAKLC,cALK,eAKLA,cALK;AAAA,UAMFC,UANE;;AAQP,UAAIC,SAAS,GAAG,uBAAhB;;AAEA,UAAI,KAAKC,KAAL,CAAWtB,QAAX,IAAuBgB,OAA3B,EAAoC;AAClCK,QAAAA,SAAS,GAAGA,SAAS,GAAG,eAAxB;AACD;;AAED,aACE,6BAAC,kBAAD,QACE,6BAAC,UAAD;AACE,QAAA,SAAS,EAAEA,SADb;AAEE,QAAA,GAAG,EAAE,aAAAE,IAAG;AAAA,iBAAK,MAAI,CAACf,KAAL,GAAae,IAAlB;AAAA;AAFV,SAGMH,UAHN,EADF,EAOGH,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,MAAnC,IAA6CC,MAA7C,IACC,6BAAC,UAAD,QACE,6BAAC,8BAAD;AAAgB,QAAA,KAAK,EAAEC;AAAvB,QADF,CARJ,CADF;AAeD;;;;EApE+BK,eAAMC,a;;;;AAuExC,IAAMC,UAAU,GAAGC,0BAAOC,GAAV;AAAA;AAAA;AAAA,0CAAhB;;AAKA,IAAMC,kBAAkB,GAAGF,0BAAOC,GAAV;AAAA;AAAA;AAAA,0IAIlBF,UAJkB,EAUpBI,gBAAOC,EAVa,oBAWlBL,UAXkB,EAAxB;;AA0BA,IAAMM,UAAU,GAAGL,0BAAOxB,GAAV;AAAA;AAAA;AAAA,sBAAhB","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport styled from \"styled-components\"\nimport { pMedia } from \"../../Helpers\"\nimport { ArticleLayout } from \"../Typings\"\nimport { ViewFullscreen } from \"./ViewFullscreen\"\n\ninterface Props extends React.HTMLProps<HTMLImageElement> {\n  src: string\n  layout?: ArticleLayout\n  linked?: boolean\n  width?: string | number\n  height?: string | number\n  alt?: string\n  editing?: boolean\n  slideshowIndex?: number\n}\n\nexport class ImageWrapper extends React.PureComponent<Props, any> {\n  image = undefined\n  mounted = false\n\n  state = {\n    isLoaded: false,\n  }\n\n  componentDidMount() {\n    const img = new Image()\n\n    /**\n     * TODO: Clean this up\n     * Guard against snapshot tests See: https://reactjs.org/blog/2016/11/16/react-v15.4.0.html#mocking-refs-for-snapshot-testing\n     */\n    try {\n      const imgTag = ReactDOM.findDOMNode(this.image) as Element\n      const imgSrc = imgTag.getAttribute(\"src\")\n      img.src = imgSrc\n    } catch (error) {\n      img.src = \"\"\n    } finally {\n      img.onload = this.onImageLoad\n      this.mounted = true\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false\n  }\n\n  onImageLoad = () => {\n    if (this.mounted) {\n      this.setState({\n        isLoaded: true,\n      })\n    }\n  }\n\n  render() {\n    const {\n      editing,\n      layout,\n      linked,\n      slideshowIndex,\n      ...imageProps\n    }: any = this.props\n    let className = \"BlockImage__container\"\n\n    if (this.state.isLoaded || editing) {\n      className = className + \" image-loaded\"\n    }\n\n    return (\n      <StyledImageWrapper>\n        <BlockImage\n          className={className}\n          ref={ref => (this.image = ref)}\n          {...imageProps}\n        />\n\n        {layout !== \"classic\" && layout !== \"news\" && linked && (\n          <Fullscreen>\n            <ViewFullscreen index={slideshowIndex} />\n          </Fullscreen>\n        )}\n      </StyledImageWrapper>\n    )\n  }\n}\n\nconst Fullscreen = styled.div`\n  opacity: 0;\n  transition: opacity 0.3s;\n`\n\nconst StyledImageWrapper = styled.div`\n  position: relative;\n\n  &:hover {\n    ${Fullscreen} {\n      opacity: 1;\n    }\n  }\n\n  /* stylelint-disable-next-line declaration-block-semicolon-newline-after */\n  ${pMedia.sm`\n    ${Fullscreen} {\n      opacity: 1;\n    }\n  `};\n\n  .BlockImage__container {\n    opacity: 0;\n    transition: opacity 1s;\n  }\n\n  .image-loaded {\n    opacity: 1;\n  }\n`\n\nconst BlockImage = styled.img`\n  display: block;\n`\n"],"file":"ImageWrapper.js"}