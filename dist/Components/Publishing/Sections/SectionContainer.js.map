{"version":3,"sources":["../../../../src/Components/Publishing/Sections/SectionContainer.tsx"],"names":["BlockquoteWidth","ColumnWidth","ColumnWidthClassic","Fillwidth","OverflowWidth","OverflowWidthClassic","SectionContainer","styled","div","props","getSectionWidth","section","articleLayout","customWidth","pMedia","xl","md","getSectionMobilePadding","layout","maybeOverflow","isText","type","isBlockquote","body","includes","isFillWidth","isMiniImageSet"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,OAAxB;AACA,IAAMC,WAAW,GAAG,OAApB;AACA,IAAMC,kBAAkB,GAAG,OAA3B;AACA,IAAMC,SAAS,GAAG,MAAlB;AACA,IAAMC,aAAa,GAAG,OAAtB;AACA,IAAMC,oBAAoB,GAAG,QAA7B;;AAEO,IAAMC,gBAAgB,GAAGC,0BAAOC,GAAV;AAAA;AAAA;AAAA,kGAQlB,UAAAC,KAAK;AAAA,SACZC,eAAe,CAACD,KAAK,CAACE,OAAP,EAAgBF,KAAK,CAACG,aAAtB,EAAqCH,KAAK,CAACI,WAA3C,CADH;AAAA,CARa,EAYzB,UAAAJ,KAAK;AAAA,SAAIK,gBAAOC,EAAX,oBACHN,KAAK,CAACG,aAAN,KAAwB,UAAxB,6BAESX,WAFT,WADG;AAAA,CAZoB,EAmBzB,UAAAQ,KAAK;AAAA,SAAIK,gBAAOE,EAAX,qBACMC,uBAAuB,CAACR,KAAK,CAACE,OAAP,CAD7B;AAAA,CAnBoB,CAAtB;;;;AAwBA,IAAMD,eAAe,GAAG,SAAlBA,eAAkB,CAC7BC,OAD6B,EAE7BC,aAF6B,EAG7BC,WAH6B,EAI1B;AACH,MAAMK,MAAM,GAAIP,OAAO,IAAIA,OAAO,CAACO,MAApB,IAA+B,cAA9C;AACA,MAAMC,aAAa,GACjBD,MAAM,KAAK,oBAAX,GAAkCd,aAAlC,GAAkDH,WADpD;AAEA,MAAMmB,MAAM,GAAGT,OAAO,IAAIA,OAAO,CAACU,IAAR,KAAiB,MAA3C;AACA,MAAMC,YAAY,GAAGF,MAAM,IAAIT,OAAO,CAACY,IAAR,CAAaC,QAAb,CAAsB,cAAtB,CAA/B;;AAEA,MAAIX,WAAJ,EAAiB;AACf,qBAAUA,WAAV;AACD;;AAED,UAAQD,aAAR;AACE,SAAK,UAAL;AAAiB;AACf,YAAIU,YAAJ,EAAkB;AAChB,iBAAOlB,aAAP;AACD,SAFD,MAEO;AACL,iBAAOe,aAAP;AACD;AACF;;AACD,SAAK,SAAL;AAAgB;AACd,YAAIG,YAAJ,EAAkB;AAChB,iBAAOtB,eAAP;AACD,SAFD,MAEO,IAAIkB,MAAM,KAAK,WAAf,EAA4B;AACjC,iBAAOf,SAAP;AACD,SAFM,MAEA;AACL,iBAAOgB,aAAP;AACD;AACF;;AACD,SAAK,SAAL;AAAgB;AACd,eAAOD,MAAM,KAAK,oBAAX,GACHb,oBADG,GAEHH,kBAFJ;AAGD;;AACD;AACE,aAAOD,WAAP;AAvBJ;AAyBD,CAxCM;;;;AA0CA,IAAMgB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACN,OAAD,EAA2B;AAChE,MAAMU,IAAI,GAAGV,OAAO,IAAIA,OAAO,CAACU,IAAhC;AACA,MAAMI,WAAW,GAAG,CAAC,OAAD,EAAU,kBAAV,EAA8B,WAA9B,EAA2CD,QAA3C,CAAoDH,IAApD,CAApB;AACA,MAAMK,cAAc,GAAGL,IAAI,KAAK,WAAT,IAAwBV,OAAO,CAACO,MAAR,KAAmB,MAAlE;AAEA,SAAO,CAACO,WAAD,IAAgBC,cAAhB,GAAiC,QAAjC,GAA4C,CAAnD;AACD,CANM","sourcesContent":["import { pMedia } from \"Components/Helpers\"\nimport { ArticleLayout, SectionData } from \"Components/Publishing/Typings\"\nimport styled from \"styled-components\"\n\nconst BlockquoteWidth = \"900px\"\nconst ColumnWidth = \"680px\"\nconst ColumnWidthClassic = \"580px\"\nconst Fillwidth = \"100%\"\nconst OverflowWidth = \"780px\"\nconst OverflowWidthClassic = \"1100px\"\n\nexport const SectionContainer = styled.div<{\n  section?: SectionData\n  articleLayout?: ArticleLayout\n  customWidth?: number\n}>`\n  box-sizing: border-box;\n  margin: auto;\n  margin-bottom: 40px;\n  width: ${props =>\n    getSectionWidth(props.section, props.articleLayout, props.customWidth)};\n  max-width: 100%;\n\n  ${props => pMedia.xl`\n    ${props.articleLayout === \"standard\" &&\n      `\n      width: ${ColumnWidth}\n    `}\n  `};\n\n  ${props => pMedia.md`\n    padding: ${getSectionMobilePadding(props.section)};\n  `};\n`\n\nexport const getSectionWidth = (\n  section?: SectionData,\n  articleLayout?: ArticleLayout,\n  customWidth?: number\n) => {\n  const layout = (section && section.layout) || \"column_width\"\n  const maybeOverflow =\n    layout === \"overflow_fillwidth\" ? OverflowWidth : ColumnWidth\n  const isText = section && section.type === \"text\"\n  const isBlockquote = isText && section.body.includes(\"<blockquote>\")\n\n  if (customWidth) {\n    return `${customWidth}px`\n  }\n\n  switch (articleLayout) {\n    case \"standard\": {\n      if (isBlockquote) {\n        return OverflowWidth\n      } else {\n        return maybeOverflow\n      }\n    }\n    case \"feature\": {\n      if (isBlockquote) {\n        return BlockquoteWidth\n      } else if (layout === \"fillwidth\") {\n        return Fillwidth\n      } else {\n        return maybeOverflow\n      }\n    }\n    case \"classic\": {\n      return layout === \"overflow_fillwidth\"\n        ? OverflowWidthClassic\n        : ColumnWidthClassic\n    }\n    default:\n      return ColumnWidth\n  }\n}\n\nexport const getSectionMobilePadding = (section?: SectionData) => {\n  const type = section && section.type\n  const isFillWidth = [\"video\", \"image_collection\", \"image_set\"].includes(type)\n  const isMiniImageSet = type === \"image_set\" && section.layout === \"mini\"\n\n  return !isFillWidth || isMiniImageSet ? \"0 20px\" : 0\n}\n"],"file":"SectionContainer.js"}