{"version":3,"sources":["../../../../src/Components/Publishing/Sections/Text.tsx"],"names":["Text","html","props","state","isContentEnd","cleanedHtml","replace","doc","document","createElement","innerHTML","paragraphs","getElementsByTagName","lastParagraph","length","node","urlBase","types","type","getAttribute","index","color","LinkWithTooltip","require","default","tagName","newNode","ownerDocument","setAttribute","Array","from","childNodes","forEach","child","appendChild","transformNode","shouldShowTooltipForURL","href","linkNode","textContent","key","url","next","nextSibling","text","apostrophe","n","str","substr","test","substring","htmlMaybeWithContentEnd","setState","children","isContentStart","layout","postscript","showTooltips","transform","__html","Component"],"mappings":"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","sourcesContent":["import ReactHtmlParser, { convertNodeToElement } from \"@artsy/react-html-parser\"\nimport { startsWith } from \"lodash\"\nimport React, { Component } from \"react\"\nimport { get } from \"Utils/get\"\nimport { ArticleLayout } from \"../Typings\"\nimport { StyledText } from \"./StyledText\"\n\ninterface Props extends React.HTMLProps<HTMLDivElement> {\n  color?: string\n  html?: string\n  isContentEnd?: boolean\n  isContentStart?: boolean\n  layout: ArticleLayout\n  postscript?: boolean\n  showTooltips?: boolean\n}\n\ninterface State {\n  html: string\n}\n\nexport class Text extends Component<Props, State> {\n  static defaultProps = {\n    color: \"black\",\n    showTooltips: false,\n  }\n\n  state = {\n    html: this.props.html || \"\",\n  }\n\n  componentDidMount() {\n    const html = this.htmlMaybeWithContentEnd()\n\n    this.setState({ html })\n  }\n\n  htmlMaybeWithContentEnd = () => {\n    const { html } = this.state\n    const { isContentEnd } = this.props\n    // Remove existing spans - TODO: Backfill out of articles\n    const cleanedHtml = html.replace(\"<span class='content-end'> </span>\", \"\")\n\n    if (isContentEnd) {\n      const doc = document.createElement(\"div\")\n      doc.innerHTML = cleanedHtml\n\n      const paragraphs = doc.getElementsByTagName(\"P\")\n      const lastParagraph =\n        paragraphs.length && paragraphs[paragraphs.length - 1]\n\n      if (lastParagraph) {\n        // insert content-end in last paragraph\n        lastParagraph.innerHTML =\n          lastParagraph.innerHTML + \"<span class='content-end'> </span>\"\n      }\n      return doc.innerHTML\n    }\n    return cleanedHtml\n  }\n\n  shouldShowTooltipForURL = (node: Element) => {\n    const urlBase = \"https://www.artsy.net/\"\n    const types = [\"artist/\", \"gene/\"]\n\n    for (const type of types) {\n      if (startsWith(node.getAttribute(\"href\"), urlBase + type)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  transformNode = (node: Element, index) => {\n    const { color } = this.props\n    // Dont include relay components unless necessary\n    // To avoid 'regeneratorRuntime' error\n    const LinkWithTooltip = require(\"../ToolTip/LinkWithTooltip\").default\n\n    if (node.tagName === \"P\") {\n      const newNode = node.ownerDocument.createElement(\"div\")\n      newNode.setAttribute(\"class\", \"paragraph\")\n      Array.from(node.childNodes).forEach(child => newNode.appendChild(child))\n      return convertNodeToElement(newNode, index, this.transformNode)\n    }\n\n    if (node.tagName === \"A\" && this.shouldShowTooltipForURL(node)) {\n      const href = node.getAttribute(\"href\")\n      const linkNode = node.childNodes[0]\n\n      if (linkNode && linkNode.textContent) {\n        const props = { key: href + index, url: href, color }\n        const next = node.nextSibling\n        const text = linkNode.textContent\n\n        // Check to see if there's an apostrophe following a linked section of\n        // text and if found, return it.\n        const apostrophe = get(next, n => {\n          const str = n.textContent.substr(0, 2)\n          if (/[â€™'][a-zA-Z]/.test(str)) {\n            return str\n          }\n        })\n\n        if (apostrophe) {\n          // Remove the apostrophe from the original text\n          next.textContent = next.textContent.substring(2)\n          // And wrap the whole thing with a span preventing whitespace breaks\n          return (\n            <span\n              className=\"preventLineBreak\"\n              key={`apostropheLinkNode-${props.key}`}\n            >\n              <LinkWithTooltip {...props}>{text}</LinkWithTooltip>\n              {apostrophe}\n            </span>\n          )\n        }\n\n        return <LinkWithTooltip {...props}>{text}</LinkWithTooltip>\n      }\n    }\n  }\n\n  render() {\n    const {\n      children,\n      color,\n      isContentStart,\n      layout,\n      postscript,\n      showTooltips,\n    } = this.props\n    const { html } = this.state\n\n    return (\n      <StyledText\n        className=\"article__text-section\"\n        color={color}\n        isContentStart={isContentStart}\n        layout={layout}\n        postscript={postscript}\n        showTooltips={showTooltips}\n      >\n        {html.length ? (\n          showTooltips ? (\n            <div>\n              {ReactHtmlParser(html, { transform: this.transformNode })}\n            </div>\n          ) : (\n            <div dangerouslySetInnerHTML={{ __html: html }} />\n          )\n        ) : (\n          children\n        )}\n      </StyledText>\n    )\n  }\n}\n"],"file":"Text.js"}