{"version":3,"sources":["../../../../src/Components/Publishing/ToolTip/ToolTip.tsx"],"names":["ToolTip","props","entity","model","arrowLeft","orientation","onMouseEnter","onMouseLeave","positionLeft","getToolTip","React","Component","ToolTipContainer","styled","div","attrs","Content","ArrowContainer"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAgBaA,O;;;;;;;;;;;;;;;;;;iEACE,YAAM;AAAA,wBACS,MAAKC,KADd;AAAA,UACTC,MADS,eACTA,MADS;AAAA,UACDC,KADC,eACDA,KADC;;AAGjB,cAAQA,KAAR;AACE,aAAK,QAAL;AAAe;AACb,mBAAO,6BAAC,qCAAD;AAAwB,cAAA,MAAM,EAAED;AAAhC,cAAP;AACD;;AACD,aAAK,MAAL;AAAa;AACX,mBAAO,6BAAC,iCAAD;AAAsB,cAAA,IAAI,EAAEA;AAA5B,cAAP;AACD;;AACD;AAAS;AACP,mBAAO,IAAP;AACD;AATH;AAWD,K;;;;;;;6BAEQ;AAAA,yBAQH,KAAKD,KARF;AAAA,UAELG,SAFK,gBAELA,SAFK;AAAA,UAGLF,MAHK,gBAGLA,MAHK;AAAA,UAILG,WAJK,gBAILA,WAJK;AAAA,UAKLC,YALK,gBAKLA,YALK;AAAA,UAMLC,YANK,gBAMLA,YANK;AAAA,UAOLC,YAPK,gBAOLA,YAPK;AAUP,UAAI,CAACN,MAAL,EAAa,OAAO,IAAP;AAEb,aACE,6BAAC,gBAAD;AACE,QAAA,WAAW,EAAEG,WADf;AAEE,QAAA,YAAY,EAAEC,YAFhB;AAGE,QAAA,YAAY,EAAEC,YAHhB;AAIE,QAAA,YAAY,EAAEC;AAJhB,SAME,6BAAC,OAAD;AAAS,QAAA,WAAW,EAAEH,WAAtB;AAAmC,QAAA,SAAS,EAAED;AAA9C,SACGC,WAAW,KAAK,MAAhB,IACC;AACA,mCAAC,YAAD;AAAO,QAAA,WAAW,EAAC;AAAnB,QAHJ,EAKG,KAAKI,UAAL,EALH,EAMGJ,WAAW,KAAK,IAAhB,IACC;AACA,mCAAC,YAAD;AAAO,QAAA,WAAW,EAAC;AAAnB,QARJ,CANF,CADF;AAoBD;;;;EAjD0BK,eAAMC,S;;;;AA2D5B,IAAMC,gBAAgB,GAAGC,0BAAOC,GAAP,CAAWC,KAAX,CAA2B,EAA3B,CAAH;AAAA;AAAA;AAAA,kEAElB,oBAAM,UAAN,CAFkB,EAInB,UAAAd,KAAK;AAAA,SAAKA,KAAK,CAACO,YAAN,GAAqBP,KAAK,CAACO,YAA3B,GAA0C,CAA/C;AAAA,CAJc,EAMzB,UAAAP,KAAK;AAAA,SACLA,KAAK,CAACI,WAAN,KAAsB,IAAtB,6CADK;AAAA,CANoB,CAAtB;;;;AAUP,IAAMW,OAAO,GAAGH,0BAAOC,GAAP,CAAWC,KAAX,CACd,EADc,CAAH;AAAA;AAAA;AAAA,+KAcTE,qBAdS,EAeD,UAAAhB,KAAK;AAAA,SACXA,KAAK,CAACG,SAAN,aAAqBH,KAAK,CAACG,SAA3B,4BADW;AAAA,CAfJ,EAiBP,UAAAH,KAAK;AAAA,SACLA,KAAK,CAACI,WAAN,KAAsB,MAAtB,mCADK;AAAA,CAjBE,CAAb","sourcesContent":["import { color } from \"@artsy/palette\"\nimport { ArtistToolTip_artist$ref } from \"__generated__/ArtistToolTip_artist.graphql\"\nimport { GeneToolTip_gene$ref } from \"__generated__/GeneToolTip_gene.graphql\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { ArtistTooltipContainer } from \"./ArtistToolTip\"\nimport { Arrow, ArrowContainer } from \"./Components/Arrow\"\nimport { GeneToolTipContainer } from \"./GeneToolTip\"\n\ninterface Props extends React.HTMLProps<HTMLDivElement> {\n  arrowLeft?: string\n  orientation?: string\n  model: string\n  onMouseEnter?: any\n  onMouseLeave?: any\n  positionLeft?: number\n  /**\n   * Having to type this opaque data manually is an exceptional case, because of\n   * how this component setup doesnâ€™t strictly follow a Relay tree.\n   */\n  entity: { \" $fragmentRefs\": ArtistToolTip_artist$ref & GeneToolTip_gene$ref }\n}\n\nexport class ToolTip extends React.Component<Props> {\n  getToolTip = () => {\n    const { entity, model } = this.props\n\n    switch (model) {\n      case \"artist\": {\n        return <ArtistTooltipContainer artist={entity} />\n      }\n      case \"gene\": {\n        return <GeneToolTipContainer gene={entity} />\n      }\n      default: {\n        return null\n      }\n    }\n  }\n\n  render() {\n    const {\n      arrowLeft,\n      entity,\n      orientation,\n      onMouseEnter,\n      onMouseLeave,\n      positionLeft,\n    } = this.props\n\n    if (!entity) return null\n\n    return (\n      <ToolTipContainer\n        orientation={orientation}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        positionLeft={positionLeft}\n      >\n        <Content orientation={orientation} arrowLeft={arrowLeft}>\n          {orientation === \"down\" && (\n            // point up from below content\n            <Arrow orientation=\"up\" />\n          )}\n          {this.getToolTip()}\n          {orientation === \"up\" && (\n            // point down from above content\n            <Arrow orientation=\"down\" />\n          )}\n        </Content>\n      </ToolTipContainer>\n    )\n  }\n}\n\ninterface DivProps {\n  orientation: string\n  onMouseEnter: any\n  onMouseLeave: any\n  positionLeft: number\n}\n\nexport const ToolTipContainer = styled.div.attrs<DivProps>({})`\n  position: absolute;\n  color: ${color(\"black100\")};\n  z-index: 10;\n  left: ${props => (props.positionLeft ? props.positionLeft : 0)}px;\n\n  ${props =>\n    props.orientation === \"up\" ? `bottom: 95%;` : `top: calc(100% + 10px);`};\n`\n\nconst Content = styled.div.attrs<{ orientation: string; arrowLeft?: string }>(\n  {}\n)`\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.15);\n  padding: 20px;\n  background: white;\n  margin-bottom: 15px;\n  width: fit-content;\n  color: inherit;\n\n  a {\n    background-image: none;\n  }\n\n  ${ArrowContainer} {\n    left: ${props =>\n      props.arrowLeft ? `${props.arrowLeft}px` : `calc(50% - 15px)`};\n    ${props =>\n      props.orientation === \"down\" ? `top: -35px;` : `bottom: -15px;`};\n  }\n`\n"],"file":"ToolTip.js"}