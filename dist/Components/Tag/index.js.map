{"version":3,"sources":["../../../src/Components/Tag/index.tsx"],"names":["TagContents","props","state","for_sale","medium","price_range","dimension_range","sort","filters","onStateChange","slice","value","filter","toLowerCase","setState","handleStateChange","forSale","sortEl","val","tagID","relayEnvironment","onForSaleToggleSelect","bind","onSortSelect","tag","onDropdownSelect","React","Component","Contents"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { graphql } from \"react-relay\"\n\nimport { TagContentsArtworksQuery } from \"__generated__/TagContentsArtworksQuery.graphql\"\nimport { SystemContextProps, withSystemContext } from \"Artsy\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport TagArtworks from \"./TagArtworks\"\n\nexport interface Filters {\n  for_sale: boolean\n  dimension_range: string\n  price_range: string\n  medium: string\n}\n\nexport type Sort = \"year\" | \"-year\" | \"-partner_updated_at\"\n\nexport interface StateChangePayload {\n  filters: Filters\n  sort: Sort\n}\n\nexport interface Props extends SystemContextProps {\n  filters?: Partial<Filters>\n  tagID: string\n  sort?: Sort\n  onStateChange: (payload: StateChangePayload) => void\n}\n\nexport interface State extends Filters {\n  sort?: Sort\n}\n\nclass TagContents extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    const {\n      for_sale,\n      price_range,\n      dimension_range,\n      medium,\n    } = this.props.filters\n    this.state = {\n      for_sale: for_sale || null,\n      medium: medium || \"*\",\n      price_range: price_range || \"*\",\n      dimension_range: dimension_range || \"*\",\n      sort: this.props.sort || \"-partner_updated_at\",\n    }\n  }\n\n  handleStateChange = () => {\n    const { for_sale, medium, price_range, dimension_range, sort } = this.state\n    const filters = {\n      for_sale,\n      medium,\n      price_range,\n      dimension_range,\n    }\n    this.props.onStateChange({ filters, sort })\n  }\n\n  // Because `for_sale` is a proper filter of its own, but\n  // we include its aggregation as part of `price_range`, we\n  // have to handle it specially.\n  onDropdownSelect(slice: string, value: string) {\n    let filter = slice.toLowerCase()\n    if (filter === \"price_range\" && value === \"*-*\") {\n      filter = \"for_sale\"\n      value = \"true\"\n    }\n    this.setState(\n      ({\n        [filter]: value,\n      } as any) as Filters,\n      this.handleStateChange\n    )\n  }\n\n  onForSaleToggleSelect() {\n    const forSale = this.state.for_sale ? null : true\n    this.setState(\n      {\n        for_sale: forSale,\n      },\n      this.handleStateChange\n    )\n  }\n\n  onSortSelect(sortEl) {\n    this.setState(\n      {\n        sort: sortEl.val,\n      },\n      this.handleStateChange\n    )\n  }\n\n  render() {\n    const { tagID, relayEnvironment } = this.props\n    const { for_sale, medium, price_range, dimension_range, sort } = this.state\n    return (\n      <QueryRenderer<TagContentsArtworksQuery>\n        environment={relayEnvironment}\n        query={graphql`\n          query TagContentsArtworksQuery(\n            $tagID: String!\n            $medium: String\n            $price_range: String\n            $sort: String\n            $for_sale: Boolean\n            $dimension_range: String\n          ) {\n            tag(id: $tagID) {\n              ...TagArtworks_tag\n                @arguments(\n                  for_sale: $for_sale\n                  medium: $medium\n                  price_range: $price_range\n                  dimension_range: $dimension_range\n                )\n            }\n          }\n        `}\n        variables={{ tagID, ...this.state }}\n        render={({ props }) => {\n          if (props) {\n            return (\n              <TagArtworks\n                onForSaleToggleSelected={this.onForSaleToggleSelect.bind(this)}\n                onSortSelected={this.onSortSelect.bind(this)}\n                sort={sort}\n                for_sale={for_sale}\n                medium={medium}\n                price_range={price_range}\n                dimension_range={dimension_range}\n                tag={props.tag}\n                onDropdownSelected={this.onDropdownSelect.bind(this)}\n              />\n            )\n          } else {\n            return null\n          }\n        }}\n      />\n    )\n  }\n}\n\nexport const Contents = withSystemContext(TagContents)\n"],"file":"index.js"}