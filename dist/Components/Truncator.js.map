{"version":3,"sources":["../../src/Components/Truncator.tsx"],"names":["Truncator","ReadMoreLink","children","ellipsis","maxLineCount","html","ReactDOM","renderToStaticMarkup","readMoreHTML","HTMLEllipsis","process","env","NODE_ENV","responsiveHOC","require","unsafeHTML","__html","String"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AAQA;;;;AAIO,IAAMA,SAA2B,GAAG,SAA9BA,SAA8B,OAKrC;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,YACI,QADJA,YACI;;AACJ,MAAMC,IAAI,GAAGC,gBAASC,oBAAT,CAA8B,2CAAOL,QAAP,CAA9B,CAAb;;AACA,MAAIM,YAAY,GAAG,IAAnB;;AAEA,MAAIP,YAAJ,EAAkB;AAChBO,IAAAA,YAAY,GAAGF,gBAASC,oBAAT,CAA8BN,YAAY,EAA1C,CAAf;AACD,GANG,CAQJ;;;AACA,MAAIQ,YAAJ;;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,QAAMC,aAAa,GAAGC,OAAO,CAAC,wCAAD,CAA7B;;AACAL,IAAAA,YAAY,GAAGI,aAAa,GAAGC,OAAO,CAAC,+BAAD,CAAV,CAA5B;AACD,GAHD,MAGO;AACLL,IAAAA,YAAY,GAAG;AAAA,UAAGM,UAAH,SAAGA,UAAH;AAAA,aACb;AACE,QAAA,uBAAuB,EAAE;AACvBC,UAAAA,MAAM,EAAED;AADe;AAD3B,QADa;AAAA,KAAf;AAOD;;AAED,SACE,6BAAC,4BAAD,QACE,6BAAC,YAAD;AACE,IAAA,UAAU,EAAEV,IADd;AAEE,IAAA,OAAO,EAAEY,MAAM,CAACb,YAAY,IAAI,CAAjB,CAFjB;AAGE,IAAA,QAAQ,EAAED,QAHZ;AAIE,IAAA,YAAY,EAAEK;AAJhB,IADF,CADF;AAUD,CAvCM","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom/server\"\nimport { ErrorBoundary } from \"./ErrorBoundary\"\n\ninterface Props {\n  maxLineCount?: number\n  ellipsis?: string\n  ReadMoreLink?: () => any\n}\n\n/**\n * Truncate large bodies of text.\n * If you need to truncate a single line, consider using `text-overflow: ellipsis`.\n */\nexport const Truncator: React.SFC<Props> = ({\n  ReadMoreLink,\n  children,\n  ellipsis,\n  maxLineCount,\n}) => {\n  const html = ReactDOM.renderToStaticMarkup(<span>{children}</span>)\n  let readMoreHTML = null\n\n  if (ReadMoreLink) {\n    readMoreHTML = ReactDOM.renderToStaticMarkup(ReadMoreLink())\n  }\n\n  // FIXME: Make safe for tests\n  let HTMLEllipsis\n\n  if (process.env.NODE_ENV !== \"test\") {\n    const responsiveHOC = require(\"react-lines-ellipsis/lib/responsiveHOC\")\n    HTMLEllipsis = responsiveHOC()(require(\"react-lines-ellipsis/lib/html\"))\n  } else {\n    HTMLEllipsis = ({ unsafeHTML }) => (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: unsafeHTML,\n        }}\n      />\n    )\n  }\n\n  return (\n    <ErrorBoundary>\n      <HTMLEllipsis\n        unsafeHTML={html}\n        maxLine={String(maxLineCount || 2)}\n        ellipsis={ellipsis}\n        ellipsisHTML={readMoreHTML}\n      />\n    </ErrorBoundary>\n  )\n}\n"],"file":"Truncator.js"}