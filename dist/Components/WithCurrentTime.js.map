{"version":3,"sources":["../../src/Components/WithCurrentTime.tsx"],"names":["WithCurrentTime","children","interval","syncWithServer","relayEnvironment","currentTime","setCurrentTime","timeOffsetInMilliseconds","setTimeOffsetInMilliseconds","intervalId","updateCurrentTime","then","offset","setInterval","clearInterval","DateTime","fromISO","minus","millisecond","toString"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AA6BO,IAAMA,eAA+C,GAAG,SAAlDA,eAAkD,OAIzD;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,2BAFJC,QAEI;AAAA,MAFJA,QAEI,8BAFO,IAEP;AAAA,MADJC,cACI,QADJA,cACI;;AAAA,0BACyB,8BADzB;AAAA,MACIC,gBADJ,qBACIA,gBADJ;;AAAA,kBAEkC,qBAAS,2DAAT,CAFlC;AAAA;AAAA,MAEGC,WAFH;AAAA,MAEgBC,cAFhB;;AAAA,mBAG4D,qBAAS,CAAT,CAH5D;AAAA;AAAA,MAGGC,wBAHH;AAAA,MAG6BC,2BAH7B;;AAIJ,MAAIC,UAAJ;;AAEA,WAASC,iBAAT,GAA6B;AAC3BJ,IAAAA,cAAc,CAAC,2DAAD,CAAd;AACD;;AAED,wBAAU,YAAM;AACd,QAAIH,cAAJ,EAAoB;AAClB,8CAA6BC,gBAA7B,EAA+CO,IAA/C,CAAoD,UAAAC,MAAM,EAAI;AAC5DJ,QAAAA,2BAA2B,CAACI,MAAD,CAA3B;AACD,OAFD;AAGD;;AAEDH,IAAAA,UAAU,GAAGI,WAAW,CAACH,iBAAD,EAAoBR,QAAQ,IAAI,IAAhC,CAAxB;AAEA,WAAO,YAAM;AACXY,MAAAA,aAAa,CAACL,UAAD,CAAb;AACD,KAFD;AAGD,GAZD,EAYG,EAZH;AAcA,SAAOR,QAAQ,CACbc,gBAASC,OAAT,CAAiBX,WAAjB,EACGY,KADH,CACS;AAAEC,IAAAA,WAAW,EAAEX;AAAf,GADT,EAEGY,QAFH,EADa,CAAf;AAKD,CAjCM","sourcesContent":["import { useSystemContext } from \"Artsy\"\nimport { DateTime } from \"luxon\"\nimport React, { useEffect, useState } from \"react\"\nimport { getCurrentTimeAsIsoString } from \"Utils/getCurrentTimeAsIsoString\"\nimport { getOffsetBetweenGravityClock } from \"Utils/time\"\n\n/**\n * Render prop component to provide the current time as an ISO string, and\n * an offset from the current time to the server time (in milliseconds).\n *\n * If the `syncWithServer` prop is provided the offset is calculated and included\n * with the current time. Any errors in offset calculation, or if that prop is not\n * provided, will result in the offset being calculated as 0.\n *\n * Example usage:\n *\n *     <WithCurrentTime>\n *       {currentTime => (\n *          <>The current time is {currentTime}</>\n *       )}\n *     </WithCurrentTime>\n *\n * @param interval The interval (in ms) with which to update the time.\n *                 The default value is 1000, i.e. the time is updated once\n *                 every second.\n */\n\ninterface WithCurrentTimeProps {\n  interval?: number\n  syncWithServer?: boolean\n  children: (currentTime: string) => React.ReactElement<any>\n}\n\nexport const WithCurrentTime: React.FC<WithCurrentTimeProps> = ({\n  children,\n  interval = 1000,\n  syncWithServer,\n}) => {\n  const { relayEnvironment } = useSystemContext()\n  const [currentTime, setCurrentTime] = useState(getCurrentTimeAsIsoString())\n  const [timeOffsetInMilliseconds, setTimeOffsetInMilliseconds] = useState(0)\n  let intervalId\n\n  function updateCurrentTime() {\n    setCurrentTime(getCurrentTimeAsIsoString())\n  }\n\n  useEffect(() => {\n    if (syncWithServer) {\n      getOffsetBetweenGravityClock(relayEnvironment).then(offset => {\n        setTimeOffsetInMilliseconds(offset)\n      })\n    }\n\n    intervalId = setInterval(updateCurrentTime, interval || 1000)\n\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [])\n\n  return children(\n    DateTime.fromISO(currentTime)\n      .minus({ millisecond: timeOffsetInMilliseconds })\n      .toString()\n  )\n}\n"],"file":"WithCurrentTime.js"}