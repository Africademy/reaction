{"version":3,"sources":["../../../src/Components/Wizard/Wizard.tsx"],"names":["Wizard","props","e","values","preventDefault","setState","state","currentStepIndex","Math","min","steps","length","max","actions","onComplete","isLastStep","setSubmitting","onSubmit","currentStep","result","Boolean","then","shouldGoNext","next","initialValues","children","validate","validationSchema","handleSubmit","formikRenderProps","context","wizard","wizardProps","form","shouldAllowNext","errors","touched","React","createElement","Children","toArray","previous","progressPercentage","Component","WizardContextProvider","PropTypes","object"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BaA,M;;;;;AAKX,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gFAAMA,KAAN;;AADiB,2DAsCZ,UAACC,CAAD,EAAiCC,MAAjC,EAA4C;AACjDD,MAAAA,CAAC,IAAIA,CAAC,CAACE,cAAF,EAAL;;AACA,YAAKC,QAAL,CAAc,UAAAC,KAAK;AAAA,eAAK;AACtBC,UAAAA,gBAAgB,EAAEC,IAAI,CAACC,GAAL,CAChBH,KAAK,CAACC,gBAAN,GAAyB,CADT,EAEhB,MAAKG,KAAL,CAAWC,MAAX,GAAoB,CAFJ,CADI;AAKtBR,UAAAA,MAAM,EAANA;AALsB,SAAL;AAAA,OAAnB;AAOD,KA/CkB;;AAAA,+DAiDR,UAACD,CAAD,EAAiCC,MAAjC,EAA4C;AACrDD,MAAAA,CAAC,IAAIA,CAAC,CAACE,cAAF,EAAL;;AACA,YAAKC,QAAL,CAAc,UAAAC,KAAK;AAAA,eAAK;AACtBC,UAAAA,gBAAgB,EAAEC,IAAI,CAACI,GAAL,CAASN,KAAK,CAACC,gBAAN,GAAyB,CAAlC,EAAqC,CAArC;AADI,SAAL;AAAA,OAAnB;AAGD,KAtDkB;;AAAA,mEA2DP,UAACJ,MAAD,EAASU,OAAT,EAAqB;AAAA,UACvBC,UADuB,GACR,MAAKb,KADG,CACvBa,UADuB;;AAE/B,UAAI,MAAKC,UAAT,EAAqB;AACnBD,QAAAA,UAAU,IAAIA,UAAU,CAACX,MAAD,EAASU,OAAT,CAAxB;AACD,OAFD,MAEO;AACLA,QAAAA,OAAO,IAAIA,OAAO,CAACG,aAAR,CAAsB,KAAtB,CAAX,CADK,CAEL;;AACA,YAAMC,QAAQ,GAAG,MAAKC,WAAL,CAAiBjB,KAAjB,CAAuBgB,QAAxC;;AACA,YAAIA,QAAJ,EAAc;AACZJ,UAAAA,OAAO,CAACG,aAAR,CAAsB,IAAtB;AACA,cAAMG,MAAM,GAAGF,QAAQ,CAACd,MAAD,EAASU,OAAT,CAAvB;;AAEA,cAAIM,MAAM,YAAYC,OAAtB,EAA+B;AAC7BP,YAAAA,OAAO,CAACG,aAAR,CAAsB,KAAtB;AACA,mBAAOG,MAAP;AACD,WAHD,MAGO;AACL,mBAAQA,MAAD,CAA6BE,IAA7B,CAAkC,UAAAC,YAAY,EAAI;AACvD,kBAAIA,YAAJ,EAAkB;AAChBT,gBAAAA,OAAO,CAACG,aAAR,CAAsB,KAAtB;;AACA,sBAAKO,IAAL,CAAU,IAAV,EAAgBpB,MAAhB;AACD;AACF,aALM,CAAP;AAMD;AACF,SAfD,MAeO;AACL,gBAAKoB,IAAL,CAAU,IAAV,EAAgBpB,MAAhB;AACD;AACF;AACF,KAtFkB;;AAEjB,UAAKG,KAAL,GAAa;AACXC,MAAAA,gBAAgB,EAAE;AADP,KAAb;AAFiB;AAKlB;;;;6BAmFQ;AAAA;;AAAA,wBAC6B,KAAKN,KADlC;AAAA,UACCuB,aADD,eACCA,aADD;AAAA,UACgBC,QADhB,eACgBA,QADhB;AAAA,kCAEgC,KAAKP,WAAL,CAAiBjB,KAFjD;AAAA,UAECyB,QAFD,yBAECA,QAFD;AAAA,UAEWC,gBAFX,yBAEWA,gBAFX;AAIP,aACE,6BAAC,cAAD;AACE,QAAA,aAAa,EAAEH,aADjB;AAEE,QAAA,QAAQ,EAAEE,QAFZ;AAGE,QAAA,gBAAgB,EAAEC,gBAHpB;AAIE,QAAA,gBAAgB,EAAE,KAJpB;AAKE,QAAA,QAAQ,EAAE,KAAKC,YALjB;AAME,QAAA,MAAM,EAAE,gBAAAC,iBAAiB,EAAI;AAC3B,cAAMC,OAAsB,GAAG;AAC7BC,YAAAA,MAAM,EAAE,MAAI,CAACC,WADgB;AAE7BC,YAAAA,IAAI,EAAEJ;AAFuB,WAA/B;AAKAC,UAAAA,OAAO,CAACC,MAAR,CAAeG,eAAf,GACE,uBAAQL,iBAAiB,CAACM,MAA1B,KACA,CAAC,uBAAQN,iBAAiB,CAACO,OAA1B,CAFH;AAIA,iBACE;AAAM,YAAA,QAAQ,EAAEP,iBAAiB,CAACD;AAAlC,aACE,6BAAC,qBAAD,EAA2BE,OAA3B,EACG,CAAC,CAAC,MAAI,CAAC7B,KAAL,CAAWS,KAAb,GACG2B,eAAMC,aAAN,CAAoBb,QAApB,EAAqCK,OAArC,CADH,GAEG,MAAI,CAACZ,WAHX,CADF,CADF;AASD;AAzBH,QADF;AA6BD;;;wBAlH0B;AACzB,UAAI,CAAC,CAAC,KAAKjB,KAAL,CAAWS,KAAjB,EAAwB;AACtB,eAAO,KAAKT,KAAL,CAAWS,KAAlB;AACD,OAFD,MAEO;AACL,eAAO2B,eAAME,QAAN,CAAeC,OAAf,CAAuB,KAAKvC,KAAL,CAAWwB,QAAlC,CAAP;AAGD;AACF;;;wBAEiB;AAChB,aAAO,KAAKf,KAAL,CAAW,KAAKJ,KAAL,CAAWC,gBAAtB,CAAP;AACD;;;wBAEgB;AACf,aAAO,KAAKD,KAAL,CAAWC,gBAAX,KAAgC,KAAKG,KAAL,CAAWC,MAAX,GAAoB,CAA3D;AACD;;;wBAEoC;AACnC,aAAO;AACLO,QAAAA,WAAW,EAAE,KAAKA,WADb;AAELH,QAAAA,UAAU,EAAE,KAAKA,UAFZ;AAGL0B,QAAAA,QAAQ,EAAE,KAAKA,QAHV;AAILlB,QAAAA,IAAI,EAAE,KAAKK,YAJN;AAKLrB,QAAAA,gBAAgB,EAAE,KAAKD,KAAL,CAAWC,gBALxB;AAMLG,QAAAA,KAAK,EAAE,KAAKA,KANP;AAOLwB,QAAAA,eAAe,EAAE,KAPZ;AAQLQ,QAAAA,kBAAkB,EAAE,CAAC,KAAKpC,KAAL,CAAWC,gBAAX,GAA8B,CAA/B,IAAoC,KAAKG,KAAL,CAAWC;AAR9D,OAAP;AAUD;;;;EAzCyB0B,eAAMM,S;;;;gBAArB3C,M,kBACW;AACpBwB,EAAAA,aAAa,EAAE;AADK,C;;IAgIlBoB,qB;;;;;;;;;;;;;sCAM6B;AAC/B,aAAO;AACLb,QAAAA,MAAM,EAAE,KAAK9B,KAAL,CAAW8B,MADd;AAELE,QAAAA,IAAI,EAAE,KAAKhC,KAAL,CAAWgC;AAFZ,OAAP;AAID;;;6BAEQ;AACP,aAAO,KAAKhC,KAAL,CAAWwB,QAAlB;AACD;;;;EAfiCkB,gB;;gBAA9BC,qB,uBACuB;AACzBb,EAAAA,MAAM,EAAEc,mBAAUC,MADO;AAEzBb,EAAAA,IAAI,EAAEY,mBAAUC;AAFS,C","sourcesContent":["import { Formik, FormikActions } from \"formik\"\nimport { isEmpty } from \"lodash\"\nimport PropTypes from \"prop-types\"\nimport React, { Component } from \"react\"\nimport { StepElement, StepProps, WizardRenderProps } from \"./types\"\nimport { FormValues, WizardContext } from \"./types\"\n\ninterface WizardProps {\n  onComplete?: (\n    values?: FormValues,\n    actions?: FormikActions<FormValues>\n  ) => void\n  initialValues?: any\n  steps?: StepElement[]\n  children?:\n    | ((props: {\n        wizard: WizardRenderProps\n        form: any\n      }) => React.ReactElement<any>)\n    | StepElement\n    | StepElement[]\n}\n\ninterface WizardState {\n  currentStepIndex: number\n}\n\n/**\n * Generate a multi-step wizard wrapped in a form.\n * steps can be an Array of children of the shape\n *\n * The wizard can be used in two different ways,\n * using the render prop API or passing steps in\n * as children.\n *\n * @example\n *\n * ```javascript\n * <Wizard steps={[<Step />, <Step />]}>\n *  {({ wizard, form }) => {\n *   <div>\n *     Current step: {wizard.currentStepIndex}\n *     <div>{wizard.currentStep}</div>\n *     <NextButton onClick={wizard.next} />\n *   </div>\n *  }}\n * </Wizard>\n * ```\n *\n * or\n *\n * ```javascript\n * <Wizard>\n *   <Step />\n *   <Step />\n * </Wizard>\n * ```\n */\nexport class Wizard extends React.Component<WizardProps, WizardState> {\n  static defaultProps = {\n    initialValues: null,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentStepIndex: 0,\n    }\n  }\n\n  get steps(): StepElement[] {\n    if (!!this.props.steps) {\n      return this.props.steps\n    } else {\n      return React.Children.toArray(this.props.children) as Array<\n        React.ReactElement<StepProps>\n      >\n    }\n  }\n\n  get currentStep() {\n    return this.steps[this.state.currentStepIndex] as StepElement\n  }\n\n  get isLastStep() {\n    return this.state.currentStepIndex === this.steps.length - 1\n  }\n\n  get wizardProps(): WizardRenderProps {\n    return {\n      currentStep: this.currentStep,\n      isLastStep: this.isLastStep,\n      previous: this.previous,\n      next: this.handleSubmit,\n      currentStepIndex: this.state.currentStepIndex,\n      steps: this.steps,\n      shouldAllowNext: false,\n      progressPercentage: (this.state.currentStepIndex + 1) / this.steps.length,\n    }\n  }\n\n  next = (e: React.FormEvent<any> | null, values) => {\n    e && e.preventDefault()\n    this.setState(state => ({\n      currentStepIndex: Math.min(\n        state.currentStepIndex + 1,\n        this.steps.length - 1\n      ),\n      values,\n    }))\n  }\n\n  previous = (e: React.FormEvent<any> | null, values) => {\n    e && e.preventDefault()\n    this.setState(state => ({\n      currentStepIndex: Math.max(state.currentStepIndex - 1, 0),\n    }))\n  }\n\n  handleSubmit: (\n    values: FormValues,\n    actions?: FormikActions<FormValues>\n  ) => void = (values, actions) => {\n    const { onComplete } = this.props\n    if (this.isLastStep) {\n      onComplete && onComplete(values, actions)\n    } else {\n      actions && actions.setSubmitting(false)\n      // If exist, call onSubmit on the current step\n      const onSubmit = this.currentStep.props.onSubmit\n      if (onSubmit) {\n        actions.setSubmitting(true)\n        const result = onSubmit(values, actions)\n\n        if (result instanceof Boolean) {\n          actions.setSubmitting(false)\n          return result\n        } else {\n          return (result as Promise<boolean>).then(shouldGoNext => {\n            if (shouldGoNext) {\n              actions.setSubmitting(false)\n              this.next(null, values)\n            }\n          })\n        }\n      } else {\n        this.next(null, values)\n      }\n    }\n  }\n\n  render() {\n    const { initialValues, children } = this.props\n    const { validate, validationSchema } = this.currentStep.props\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        validate={validate}\n        validationSchema={validationSchema}\n        validateOnChange={false}\n        onSubmit={this.handleSubmit}\n        render={formikRenderProps => {\n          const context: WizardContext = {\n            wizard: this.wizardProps,\n            form: formikRenderProps,\n          }\n\n          context.wizard.shouldAllowNext =\n            isEmpty(formikRenderProps.errors) &&\n            !isEmpty(formikRenderProps.touched)\n\n          return (\n            <form onSubmit={formikRenderProps.handleSubmit}>\n              <WizardContextProvider {...context}>\n                {!!this.props.steps\n                  ? React.createElement(children as any, context)\n                  : this.currentStep}\n              </WizardContextProvider>\n            </form>\n          )\n        }}\n      />\n    )\n  }\n}\n\nclass WizardContextProvider extends Component<WizardContext> {\n  static childContextTypes = {\n    wizard: PropTypes.object,\n    form: PropTypes.object,\n  }\n\n  getChildContext(): WizardContext {\n    return {\n      wizard: this.props.wizard,\n      form: this.props.form,\n    }\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n"],"file":"Wizard.js"}