{"version":3,"sources":["../../../src/Components/v2/ArtistCard.tsx"],"names":["ArtistCard","props","onClick","artist","href","React","Component","lazyLoad","SingleLineTruncation","Sans","LargeArtistCard","image","i","cropped","url","name","formatted_nationality_and_birthday","user","handleOpenAuth","is_followed","getButtonLabel","SmallArtistCard","mediator","entity","contextModule","Schema","ContextModule","ArtworkPage","intent","AuthModalIntent","FollowArtist","ArtistCardFragmentContainer","isFollowed"],"mappings":"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","sourcesContent":["import { ArtistCard_artist } from \"__generated__/ArtistCard_artist.graphql\"\nimport { Mediator } from \"Artsy\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { FollowArtistButtonFragmentContainer as FollowArtistButton } from \"Components/FollowButton/FollowArtistButton\"\nimport { Truncator } from \"Components/Truncator\"\nimport React, { SFC } from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { get } from \"Utils/get\"\nimport { AuthModalIntent, openAuthModal } from \"Utils/openAuthModal\"\nimport { Media } from \"Utils/Responsive\"\n\nimport {\n  Avatar,\n  BorderBox,\n  Box,\n  Button,\n  Flex,\n  Link,\n  Sans,\n  Serif,\n  space,\n  Spacer,\n} from \"@artsy/palette\"\nimport styled from \"styled-components\"\n\ninterface Props {\n  artist: ArtistCard_artist\n  user: User\n  mediator?: Mediator\n  /** Lazy load the avatar image */\n  lazyLoad?: boolean\n  onClick?: () => void\n}\n\nexport class ArtistCard extends React.Component<Props> {\n  static defaultProps = {\n    lazyLoad: false,\n  }\n\n  render() {\n    return (\n      <Link\n        onClick={this.props.onClick}\n        href={this.props.artist.href}\n        noUnderline\n      >\n        <Media at=\"xs\">\n          <SmallArtistCard {...this.props} />\n        </Media>\n        <Media greaterThan=\"xs\">\n          <LargeArtistCard {...this.props} />\n        </Media>\n      </Link>\n    )\n  }\n}\n\nconst SingleLineTruncation = styled(Sans)`\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  width: 100%;\n  text-align: center;\n`\n\nexport const LargeArtistCard: SFC<Props> = props => (\n  <BorderBox hover flexDirection=\"column\" width=\"100%\" height=\"254px\">\n    <Flex flexDirection=\"column\" flexGrow=\"0\" alignItems=\"center\" pt={1} mb={1}>\n      {props.artist.image && (\n        <Box mb={1}>\n          <Avatar\n            lazyLoad={props.lazyLoad}\n            src={get(props.artist.image, i => i.cropped.url)}\n          />\n        </Box>\n      )}\n\n      <Serif size=\"3t\" weight=\"semibold\" textAlign=\"center\">\n        <Truncator maxLineCount={2}>{props.artist.name}</Truncator>\n      </Serif>\n\n      <SingleLineTruncation size=\"2\">\n        {props.artist.formatted_nationality_and_birthday}\n      </SingleLineTruncation>\n    </Flex>\n\n    <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"auto\">\n      <FollowArtistButton\n        artist={props.artist}\n        user={props.user}\n        onOpenAuthModal={() => handleOpenAuth(props)}\n        render={({ is_followed }) => {\n          return (\n            <Button variant=\"secondaryOutline\" size=\"small\" width={space(9)}>\n              {getButtonLabel(is_followed)}\n            </Button>\n          )\n        }}\n      />\n    </Flex>\n  </BorderBox>\n)\n\nexport const SmallArtistCard: SFC<Props> = props => (\n  <BorderBox hover width=\"100%\">\n    {props.artist.image && (\n      <Box mr={2}>\n        <Avatar\n          lazyLoad={props.lazyLoad}\n          size=\"xs\"\n          src={get(props.artist.image, i => i.cropped.url)}\n        />\n      </Box>\n    )}\n    <Flex flexDirection=\"column\">\n      <Serif size=\"3t\" weight=\"semibold\">\n        <Truncator maxLineCount={2}>{props.artist.name}</Truncator>\n      </Serif>\n\n      <Sans size=\"1\">{props.artist.formatted_nationality_and_birthday}</Sans>\n\n      <Spacer mb={1} />\n\n      <FollowArtistButton\n        artist={props.artist}\n        user={props.user}\n        onOpenAuthModal={() => handleOpenAuth(props)}\n        render={({ is_followed }) => {\n          return (\n            <Button variant=\"secondaryOutline\" size=\"small\" width=\"70px\">\n              {getButtonLabel(is_followed)}\n            </Button>\n          )\n        }}\n      />\n    </Flex>\n  </BorderBox>\n)\n\nconst handleOpenAuth = props => {\n  openAuthModal(props.mediator, {\n    entity: props.artist,\n    contextModule: Schema.ContextModule.ArtworkPage,\n    intent: AuthModalIntent.FollowArtist,\n  })\n}\n\nexport const ArtistCardFragmentContainer = createFragmentContainer(ArtistCard, {\n  artist: graphql`\n    fragment ArtistCard_artist on Artist {\n      name\n      id\n      href\n      image {\n        cropped(width: 400, height: 300) {\n          url\n        }\n      }\n      formatted_nationality_and_birthday\n      ...FollowArtistButton_artist\n    }\n  `,\n})\n\n// Helpers\n\nconst getButtonLabel = (isFollowed: boolean): string => {\n  return isFollowed ? \"Unfollow\" : \"Follow\"\n}\n"],"file":"ArtistCard.js"}