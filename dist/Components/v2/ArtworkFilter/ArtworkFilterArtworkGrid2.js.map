{"version":3,"sources":["../../../../src/Components/v2/ArtworkFilter/ArtworkFilterArtworkGrid2.tsx"],"names":["ArtworkFilterArtworkGrid","props","user","mediator","context","aggregations","p","filtered_artworks","length","setAggregations","columnCount","artworks","hasNextPage","pageInfo","loadNext","loadPage","filters","page","setFilter","isLoading","resetFilters","ZeroState","artwork","onArtworkBrickClick","pageCursors","_cursor","ArtworkFilterArtworkGridRefetchContainer"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AASA,IAAMA,wBAEL,GAAG,SAFEA,wBAEF,CAAAC,KAAK,EAAI;AAAA,0BACgB,8BADhB;AAAA,MACHC,IADG,qBACHA,IADG;AAAA,MACGC,QADH,qBACGA,QADH;;AAEX,MAAMC,OAAO,GAAG,oDAAhB;AACA,MAAMC,YAAY,GAAG,cAAIJ,KAAJ,EAAW,UAAAK,CAAC;AAAA,WAAIA,CAAC,CAACC,iBAAF,CAAoBF,YAAxB;AAAA,GAAZ,CAArB;AAEA;;;;;AAIA,wBAAU,YAAM;AACd,QAAI,uBAAQD,OAAO,CAACC,YAAhB,KAAiCA,YAAY,CAACG,MAAlD,EAA0D;AACxDJ,MAAAA,OAAO,CAACK,eAAR,CAAwBJ,YAAxB;AACD;AACF,GAJD,EAIG,EAJH;AATW,MAgBTK,WAhBS,GAkBPT,KAlBO,CAgBTS,WAhBS;AAAA,MAiBYC,QAjBZ,GAkBPV,KAlBO,CAiBTM,iBAjBS,CAiBYI,QAjBZ;AAAA,MAqBGC,WArBH,GAsBPD,QAtBO,CAqBTE,QArBS,CAqBGD,WArBH;AAwBX;;;;AAGA,WAASE,QAAT,GAAoB;AAClB,QAAIF,WAAJ,EAAiB;AACfG,MAAAA,QAAQ,CAACX,OAAO,CAACY,OAAR,CAAgBC,IAAhB,GAAuB,CAAxB,CAAR;AACD;AACF;AAED;;;;;AAGA,WAASF,QAAT,CAAkBE,IAAlB,EAAwB;AACtBb,IAAAA,OAAO,CAACc,SAAR,CAAkB,MAAlB,EAA0BD,IAA1B;AACD;;AAED,SACE,4DACE,6BAAC,wBAAD;AAAa,IAAA,SAAS,EAAEhB,KAAK,CAACkB;AAA9B,KACE,6BAAC,oBAAD;AACE,IAAA,QAAQ,EAAER,QADZ;AAEE,IAAA,WAAW,EAAED,WAFf;AAGE,IAAA,iBAAiB,EAAE,CAHrB;AAIE,IAAA,UAAU,EAAE,EAJd;AAKE,IAAA,IAAI,EAAER,IALR;AAME,IAAA,QAAQ,EAAEC,QANZ;AAOE,IAAA,cAAc,EAAEC,OAAO,CAACgB,YAP1B;AAQE,IAAA,mBAAmB,EAAEhB,OAAO,CAACiB,SAAR,IAAqB,6BAAC,OAAD,CAAS,SAAT,OAR5C;AASE,IAAA,YAAY,EAAE,sBAAAC,OAAO,EAAI;AACvB,UAAIlB,OAAO,CAACmB,mBAAZ,EAAiC;AAC/BnB,QAAAA,OAAO,CAACmB,mBAAR,CAA4BD,OAA5B,EAAqCrB,KAArC;AACD;AACF;AAbH,IADF,EAiBE,6BAAC,eAAD;AAAQ,IAAA,EAAE,EAAE;AAAZ,IAjBF,EAmBE,6BAAC,YAAD,QACE,6BAAC,uCAAD;AACE,IAAA,WAAW,EAAEU,QAAQ,CAACE,QAAT,CAAkBD,WADjC;AAEE,IAAA,WAAW,EAAED,QAAQ,CAACa,WAFxB;AAGE,IAAA,OAAO,EAAE,iBAACC,OAAD,EAAUR,IAAV;AAAA,aAAmBF,QAAQ,CAACE,IAAD,CAA3B;AAAA,KAHX;AAIE,IAAA,MAAM,EAAE;AAAA,aAAMH,QAAQ,EAAd;AAAA,KAJV;AAKE,IAAA,QAAQ,EAAC;AALX,IADF,CAnBF,CADF,CADF;AAiCD,CA3ED;;AA6EO,IAAMY,wCAAwC,GAAG,wCACtD1B,wBADsD,EAEtD;AACEO,EAAAA,iBAAiB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADnB,CAFsD;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAjD","sourcesContent":["import { Box, Spacer } from \"@artsy/palette\"\nimport { isEmpty } from \"lodash\"\nimport React, { useEffect } from \"react\"\nimport { createRefetchContainer, graphql, RelayRefetchProp } from \"react-relay\"\n\nimport { ArtworkFilterArtworkGrid2_filtered_artworks } from \"__generated__/ArtworkFilterArtworkGrid2_filtered_artworks.graphql\"\nimport { useSystemContext } from \"Artsy\"\nimport ArtworkGrid from \"Components/ArtworkGrid\"\nimport { get } from \"Utils/get\"\nimport { LoadingArea } from \"../LoadingArea\"\nimport { PaginationFragmentContainer as Pagination } from \"../Pagination\"\nimport { Aggregations, useArtworkFilterContext } from \"./ArtworkFilterContext\"\n\ninterface ArtworkFilterArtworkGridProps {\n  columnCount: number[]\n  filtered_artworks: ArtworkFilterArtworkGrid2_filtered_artworks\n  isLoading?: boolean\n  relay: RelayRefetchProp\n}\n\nconst ArtworkFilterArtworkGrid: React.FC<\n  ArtworkFilterArtworkGridProps\n> = props => {\n  const { user, mediator } = useSystemContext()\n  const context = useArtworkFilterContext()\n  const aggregations = get(props, p => p.filtered_artworks.aggregations)\n\n  /**\n   * If aggregations have not been passed as props when instantiating the\n   * <ArtworkFilter> component then populate.\n   */\n  useEffect(() => {\n    if (isEmpty(context.aggregations) && aggregations.length) {\n      context.setAggregations(aggregations as Aggregations)\n    }\n  }, [])\n\n  const {\n    columnCount,\n    filtered_artworks: { artworks },\n  } = props\n\n  const {\n    pageInfo: { hasNextPage },\n  } = artworks\n\n  /**\n   * Load next page of artworks\n   */\n  function loadNext() {\n    if (hasNextPage) {\n      loadPage(context.filters.page + 1)\n    }\n  }\n\n  /**\n   * Refetch page of artworks based on cursor\n   */\n  function loadPage(page) {\n    context.setFilter(\"page\", page)\n  }\n\n  return (\n    <>\n      <LoadingArea isLoading={props.isLoading}>\n        <ArtworkGrid\n          artworks={artworks as any}\n          columnCount={columnCount}\n          preloadImageCount={9}\n          itemMargin={40}\n          user={user}\n          mediator={mediator}\n          onClearFilters={context.resetFilters}\n          emptyStateComponent={context.ZeroState && <context.ZeroState />}\n          onBrickClick={artwork => {\n            if (context.onArtworkBrickClick) {\n              context.onArtworkBrickClick(artwork, props)\n            }\n          }}\n        />\n\n        <Spacer mb={3} />\n\n        <Box>\n          <Pagination\n            hasNextPage={artworks.pageInfo.hasNextPage}\n            pageCursors={artworks.pageCursors as any}\n            onClick={(_cursor, page) => loadPage(page)}\n            onNext={() => loadNext()}\n            scrollTo=\"#jump--artworkFilter\"\n          />\n        </Box>\n      </LoadingArea>\n    </>\n  )\n}\n\nexport const ArtworkFilterArtworkGridRefetchContainer = createRefetchContainer(\n  ArtworkFilterArtworkGrid,\n  {\n    filtered_artworks: graphql`\n      fragment ArtworkFilterArtworkGrid2_filtered_artworks on FilterArtworks\n        @argumentDefinitions(\n          first: { type: \"Int\", defaultValue: 30 }\n          after: { type: \"String\", defaultValue: \"\" }\n        ) {\n        __id\n\n        aggregations {\n          slice\n          counts {\n            id\n            name\n            count\n          }\n        }\n\n        artworks: artworks_connection(first: $first, after: $after) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          pageCursors {\n            ...Pagination_pageCursors\n          }\n          edges {\n            node {\n              __id\n            }\n          }\n          ...ArtworkGrid_artworks\n        }\n      }\n    `,\n  },\n  graphql`\n    query ArtworkFilterArtworkGrid2Query(\n      $filteredArtworksNodeID: ID!\n      $first: Int!\n      $after: String\n    ) {\n      filtered_artworks: node(__id: $filteredArtworksNodeID) {\n        ...ArtworkFilterArtworkGrid2_filtered_artworks\n          @arguments(first: $first, after: $after)\n      }\n    }\n  `\n)\n"],"file":"ArtworkFilterArtworkGrid2.js"}