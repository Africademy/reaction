{"version":3,"sources":["../../../../src/Components/v2/ArtworkFilter/ArtworkFilterContext.tsx"],"names":["initialArtworkFilterState","attribution_class","major_periods","page","sort","ArtworkFilterContext","React","createContext","filters","hasFilters","isDefaultValue","rangeToTuple","resetFilters","setFilter","sortOptions","unsetFilter","ZeroState","ArtworkFilterContextProvider","aggregations","children","counts","onArtworkBrickClick","onChange","onFilterClick","initialFilterState","artworkFilterReducer","artworkFilterState","dispatch","filterAggregations","setAggregations","artworkCounts","setCounts","artworkFilterContext","field","range","name","val","type","payload","value","state","action","filterState","concat","Number","forEach","filter","Boolean","reset","medium","useArtworkFilterContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAEA;;;AAGO,IAAMA,yBAAyB,GAAG;AACvCC,EAAAA,iBAAiB,EAAE,EADoB;AAEvCC,EAAAA,aAAa,EAAE,EAFwB;AAGvCC,EAAAA,IAAI,EAAE,CAHiC;AAIvCC,EAAAA,IAAI,EAAE,gBAJiC,CAMvC;AACA;AACA;AACA;;AAGF;;;;AAZyC,CAAlC;;;AAiGP;;;AAGO,IAAMC,oBAAoB,GAAGC,eAAMC,aAAN,CAElC;AACAC,EAAAA,OAAO,EAAER,yBADT;AAEAS,EAAAA,UAAU,EAAE,KAFZ;AAGAC,EAAAA,cAAc,EAAE,IAHhB;AAIAC,EAAAA,YAAY,EAAE,IAJd;AAKAC,EAAAA,YAAY,EAAE,IALd;AAMAC,EAAAA,SAAS,EAAE,IANX;AAOAC,EAAAA,WAAW,EAAE,EAPb;AAQAC,EAAAA,WAAW,EAAE,IARb;AASAC,EAAAA,SAAS,EAAE;AATX,CAFkC,CAA7B;;;;AAgCA,IAAMC,4BAIZ,GAAG,SAJSA,4BAIT,OAUE;AAAA,+BATJC,YASI;AAAA,MATJA,YASI,kCATW,EASX;AAAA,MARJC,QAQI,QARJA,QAQI;AAAA,yBAPJC,MAOI;AAAA,MAPJA,MAOI,4BAPK,EAOL;AAAA,0BANJZ,OAMI;AAAA,MANJA,OAMI,6BANM,EAMN;AAAA,MALJa,mBAKI,QALJA,mBAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,aAGI,QAHJA,aAGI;AAAA,MAFJT,WAEI,QAFJA,WAEI;AAAA,MADJE,SACI,QADJA,SACI;;AACJ,MAAMQ,kBAAkB,qBACnBxB,yBADmB,EAEnBQ,OAFmB,CAAxB;;AADI,oBAMmC,uBACrCiB,oBADqC,EAErCD,kBAFqC,CANnC;AAAA;AAAA,MAMGE,kBANH;AAAA,MAMuBC,QANvB,oBAWJ;;;AAXI,kBAY0C,qBAAST,YAAT,CAZ1C;AAAA;AAAA,MAYGU,kBAZH;AAAA,MAYuBC,eAZvB;;AAAA,mBAa+B,qBAAST,MAAT,CAb/B;AAAA;AAAA,MAaGU,aAbH;AAAA,MAakBC,SAblB;;AAeJ,qCAAqB,YAAM;AACzB,QAAIT,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC,oBAAKI,kBAAL,EAAyB,CAAC,OAAD,CAAzB,CAAD,CAAR;AACD;AACF,GAJD,EAIG,CAACA,kBAAD,CAJH;AAMA,MAAMM,oBAAoB,GAAG;AAC3BxB,IAAAA,OAAO,EAAEkB,kBADkB;AAE3BjB,IAAAA,UAAU,EAAE,4BAAWiB,kBAAX,CAFe;AAI3B;AACAL,IAAAA,mBAAmB,EAAnBA,mBAL2B;AAM3BE,IAAAA,aAAa,EAAbA,aAN2B;AAQ3B;AACAT,IAAAA,WAAW,EAAXA,WAT2B;AAU3BI,IAAAA,YAAY,EAAEU,kBAVa;AAW3BC,IAAAA,eAAe,EAAfA,eAX2B;AAY3BT,IAAAA,MAAM,EAAEU,aAZmB;AAa3BC,IAAAA,SAAS,EAATA,SAb2B;AAe3B;AACAf,IAAAA,SAAS,EAATA,SAhB2B;AAkB3B;AACAN,IAAAA,cAAc,EAAE,wBAAAuB,KAAK,EAAI;AACvB,aAAO,sCAAgBA,KAAhB,EAAuBP,kBAAkB,CAACO,KAAD,CAAzC,CAAP;AACD,KArB0B;AAuB3BtB,IAAAA,YAAY,EAAE,sBAAAuB,KAAK,EAAI;AACrB,aAAO,iCAAaR,kBAAb,EAAiCQ,KAAjC,CAAP;AACD,KAzB0B;AA2B3BrB,IAAAA,SAAS,EAAE,mBAACsB,IAAD,EAAOC,GAAP,EAAe;AACxB,UAAIb,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAACY,IAAD,EAAOC,GAAP,oBAAiBV,kBAAjB,sBAAsCS,IAAtC,EAA6CC,GAA7C,GAAb;AACD;;AAEDT,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAE,KADC;AAEPC,QAAAA,OAAO,EAAE;AACPH,UAAAA,IAAI,EAAJA,IADO;AAEPI,UAAAA,KAAK,EAAEH;AAFA;AAFF,OAAD,CAAR;AAOD,KAvC0B;AAyC3BrB,IAAAA,WAAW,EAAE,qBAAAoB,IAAI,EAAI;AACnBR,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAE,OADC;AAEPC,QAAAA,OAAO,EAAE;AACPH,UAAAA,IAAI,EAAJA;AADO;AAFF,OAAD,CAAR;AAMD,KAhD0B;AAkD3BvB,IAAAA,YAAY,EAAE,wBAAM;AAClBe,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAE,OADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID;AAvD0B,GAA7B;AA0DA,SACE,6BAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEN;AAAtC,KACGb,QADH,CADF;AAKD,CAlGM;;;;AAoGP,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACe,KAAD,EAAQC,MAAR,EAAmB;AAC9C,UAAQA,MAAM,CAACJ,IAAf;AACE;;;AAGA,SAAK,KAAL;AAAY;AAAA,8BACcI,MAAM,CAACH,OADrB;AAAA,YACFH,KADE,mBACFA,IADE;AAAA,YACII,MADJ,mBACIA,KADJ;AAGV,YAAIG,YAAW,GAAG,EAAlB;;AAEA,YAAIP,KAAI,KAAK,mBAAb,EAAkC;AAChCO,UAAAA,YAAW,GAAG;AACZzC,YAAAA,iBAAiB,EAAEuC,KAAK,CAAChC,OAAN,CAAcP,iBAAd,CAAgC0C,MAAhC,CAAuCJ,MAAvC;AADP,WAAd;AAGD;;AACD,YAAIJ,KAAI,KAAK,eAAb,EAA8B;AAC5BO,UAAAA,YAAW,GAAG;AACZxC,YAAAA,aAAa,EAAEqC,MAAK,GAAG,CAACA,MAAD,CAAH,GAAa;AADrB,WAAd;AAGD;;AACD,YAAIJ,KAAI,KAAK,MAAb,EAAqB;AACnBO,UAAAA,YAAW,CAACP,KAAD,CAAX,GAAoBS,MAAM,CAACL,MAAD,CAA1B;AACD,SAjBS,CAmBV;;;AACA;AAAC,SACC,OADD,EAEC,QAFD,EAGC,QAHD,EAIC,YAJD,EAKC,aALD,EAMC,MAND,EAOC,OAPD,EAQCM,OARD,CAQS,UAAAC,MAAM,EAAI;AAClB,cAAIX,KAAI,KAAKW,MAAb,EAAqB;AACnBJ,YAAAA,YAAW,CAACP,KAAD,CAAX,GAAoBI,MAApB;AACD;AACF,SAZA,EAcD;AAdC;AAeA,SACC,aADD,EAEC,YAFD,EAGC,UAHD,EAIC,kBAJD,EAKC,WALD,EAMCM,OAND,CAMS,UAAAC,MAAM,EAAI;AAClB,cAAIX,KAAI,KAAKW,MAAb,EAAqB;AACnBJ,YAAAA,YAAW,CAACP,KAAD,CAAX,GAAoBY,OAAO,CAACR,MAAD,CAA3B;AACD;AACF,SAVA;AAYD,eAAOC,KAAK,CAACQ,KAAb;AAEA,iCACKR,KADL,EAEKE,YAFL;AAID;;AAED;;;;AAGA,SAAK,OAAL;AAAc;AAAA,YACJP,MADI,GACKM,MAAM,CAACH,OADZ,CACJH,IADI;AAGZ,YAAIO,aAAW,GAAG,EAAlB;;AAEA,YAAIP,MAAI,KAAK,mBAAb,EAAkC;AAChCO,UAAAA,aAAW,GAAG;AACZzC,YAAAA,iBAAiB,EAAE;AADP,WAAd;AAGD;;AACD,YAAIkC,MAAI,KAAK,eAAb,EAA8B;AAC5BO,UAAAA,aAAW,GAAG;AACZxC,YAAAA,aAAa,EAAE;AADH,WAAd;AAGD;;AACD,YAAIiC,MAAI,KAAK,QAAb,EAAuB;AACrBO,UAAAA,aAAW,GAAG;AACZO,YAAAA,MAAM,EAAE;AADI,WAAd;AAGD;;AACD,YAAId,MAAI,KAAK,MAAb,EAAqB;AACnBO,UAAAA,aAAW,GAAG;AACZvC,YAAAA,IAAI,EAAE;AADM,WAAd;AAGD;;AAED;AAAC,SACC,aADD,EAEC,YAFD,EAGC,OAHD,EAIC,UAJD,EAKC,kBALD,EAMC,WAND,EAOC,YAPD,EAQC0C,OARD,CAQS,UAAAC,MAAM,EAAI;AAClB,cAAIX,MAAI,KAAKW,MAAb,EAAqB;AACnBJ,YAAAA,aAAW,CAACP,MAAD,CAAX,GAAoB,IAApB;AACD;AACF,SAZA;AAcD,iCACKK,KADL,EAEKE,aAFL;AAID;;AAED;;;;AAGA,SAAK,OAAL;AAAc;AACZ,iCACK1C,yBADL;AAEEgD,UAAAA,KAAK,EAAE;AAFT;AAID;;AAED;AACE,aAAOR,KAAP;AAvHJ;AAyHD,CA1HD;AA4HA;;;;;AAGO,IAAMU,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAC3C,MAAMlB,oBAAoB,GAAG,uBAAW3B,oBAAX,CAA7B;AACA,SAAO2B,oBAAP;AACD,CAHM","sourcesContent":["import { omit } from \"lodash\"\nimport React, { useContext, useReducer, useState } from \"react\"\nimport useDeepCompareEffect from \"use-deep-compare-effect\"\nimport { hasFilters } from \"./Utils/hasFilters\"\nimport { isDefaultFilter } from \"./Utils/isDefaultFilter\"\nimport { rangeToTuple } from \"./Utils/rangeToTuple\"\n\n/**\n * Initial filter state\n */\nexport const initialArtworkFilterState = {\n  attribution_class: [],\n  major_periods: [],\n  page: 1,\n  sort: \"-decayed_merch\",\n\n  // TODO: Remove these unneeded default props\n  // height: \"*-*\",\n  // price_range: \"*-*\",\n  // width: \"*-*\",\n}\n\n/**\n * A list of all possible artwork filters across all apps\n */\nexport interface ArtworkFilters {\n  acquireable?: boolean\n  artist_id?: string\n  at_auction?: boolean\n  color?: string\n  for_sale?: boolean\n  height?: string\n  inquireable_only?: boolean\n  keyword?: string\n  major_periods?: string[]\n  medium?: string\n  offerable?: boolean\n  page?: number\n  partner_id?: string\n  price_range?: string\n  sort?: string\n  term?: string\n  width?: string\n}\n\n/**\n * Possible aggregations that can be passed\n */\nexport type Aggregations = Array<{\n  slice:\n    | \"COLOR\"\n    | \"DIMENSION_RANGE\"\n    | \"FOLLOWED_ARTISTS\"\n    | \"GALLERY\"\n    | \"INSTITUTION\"\n    | \"MAJOR_PERIOD\"\n    | \"MEDIUM\"\n    | \"MERCHANDISABLE_ARTISTS\"\n    | \"PARTNER_CITY\"\n    | \"PERIOD\"\n    | \"PRICE_RANGE\"\n    | \"TOTAL\"\n  counts: Array<{\n    count: number\n    id: string\n    name: string\n  }>\n}>\n\ninterface Counts {\n  for_sale_artworks?: number\n  ecommerce_artworks?: number\n  auction_artworks?: number\n  artworks?: number\n  has_make_offer_artworks?: boolean\n}\n\ninterface ArtworkFilterContextProps {\n  filters?: ArtworkFilters\n\n  // Components\n  ZeroState?: React.FC\n\n  // Sorting\n  sortOptions?: SortOptions\n  aggregations?: Aggregations\n  setAggregations?: (aggregations: Aggregations) => void\n  counts?: Counts\n  setCounts?: (counts: Counts) => void\n\n  // Handlers\n  onArtworkBrickClick?: (artwork: any, props: any) => void\n  onFilterClick?: (\n    key: keyof ArtworkFilters,\n    value: string,\n    filterState: ArtworkFilters\n  ) => void\n\n  // Filter manipulation\n  hasFilters: boolean\n  isDefaultValue: (name: string) => boolean\n  rangeToTuple: (name: string) => [number, number]\n  resetFilters: () => void\n  setFilter: (name: string, value: any) => void\n  unsetFilter: (name: string) => void\n}\n\n/**\n * Context behavior shared globally across the ArtworkFilter component tree\n */\nexport const ArtworkFilterContext = React.createContext<\n  ArtworkFilterContextProps\n>({\n  filters: initialArtworkFilterState,\n  hasFilters: false,\n  isDefaultValue: null,\n  rangeToTuple: null,\n  resetFilters: null,\n  setFilter: null,\n  sortOptions: [],\n  unsetFilter: null,\n  ZeroState: null,\n})\n\nexport type SortOptions = Array<{\n  value: string\n  text: string\n}>\n\nexport type SharedArtworkFilterContextProps = Pick<\n  ArtworkFilterContextProps,\n  | \"aggregations\"\n  | \"counts\"\n  | \"filters\"\n  | \"sortOptions\"\n  | \"onArtworkBrickClick\"\n  | \"onFilterClick\"\n  | \"ZeroState\"\n> & {\n  onChange?: (filterState) => void\n}\n\nexport const ArtworkFilterContextProvider: React.FC<\n  SharedArtworkFilterContextProps & {\n    children: React.ReactNode\n  }\n> = ({\n  aggregations = [],\n  children,\n  counts = {},\n  filters = {},\n  onArtworkBrickClick,\n  onChange,\n  onFilterClick,\n  sortOptions,\n  ZeroState,\n}) => {\n  const initialFilterState = {\n    ...initialArtworkFilterState,\n    ...filters,\n  }\n\n  const [artworkFilterState, dispatch] = useReducer(\n    artworkFilterReducer,\n    initialFilterState\n  )\n\n  // TODO: Consolidate this into additional reducer\n  const [filterAggregations, setAggregations] = useState(aggregations)\n  const [artworkCounts, setCounts] = useState(counts)\n\n  useDeepCompareEffect(() => {\n    if (onChange) {\n      onChange(omit(artworkFilterState, [\"reset\"]))\n    }\n  }, [artworkFilterState])\n\n  const artworkFilterContext = {\n    filters: artworkFilterState,\n    hasFilters: hasFilters(artworkFilterState),\n\n    // Handlers\n    onArtworkBrickClick,\n    onFilterClick,\n\n    // Sorting\n    sortOptions,\n    aggregations: filterAggregations,\n    setAggregations,\n    counts: artworkCounts,\n    setCounts,\n\n    // Components\n    ZeroState,\n\n    // Filter manipulation\n    isDefaultValue: field => {\n      return isDefaultFilter(field, artworkFilterState[field])\n    },\n\n    rangeToTuple: range => {\n      return rangeToTuple(artworkFilterState, range)\n    },\n\n    setFilter: (name, val) => {\n      if (onFilterClick) {\n        onFilterClick(name, val, { ...artworkFilterState, [name]: val })\n      }\n\n      dispatch({\n        type: \"SET\",\n        payload: {\n          name,\n          value: val,\n        },\n      })\n    },\n\n    unsetFilter: name => {\n      dispatch({\n        type: \"UNSET\",\n        payload: {\n          name,\n        },\n      })\n    },\n\n    resetFilters: () => {\n      dispatch({\n        type: \"RESET\",\n        payload: null,\n      })\n    },\n  }\n\n  return (\n    <ArtworkFilterContext.Provider value={artworkFilterContext}>\n      {children}\n    </ArtworkFilterContext.Provider>\n  )\n}\n\nconst artworkFilterReducer = (state, action) => {\n  switch (action.type) {\n    /**\n     * Setting  and updating filters\n     */\n    case \"SET\": {\n      const { name, value } = action.payload\n\n      let filterState = {}\n\n      if (name === \"attribution_class\") {\n        filterState = {\n          attribution_class: state.filters.attribution_class.concat(value),\n        }\n      }\n      if (name === \"major_periods\") {\n        filterState = {\n          major_periods: value ? [value] : [],\n        }\n      }\n      if (name === \"page\") {\n        filterState[name] = Number(value)\n      }\n\n      // String filter types\n      ;[\n        \"color\",\n        \"height\",\n        \"medium\",\n        \"partner_id\",\n        \"price_range\",\n        \"sort\",\n        \"width\",\n      ].forEach(filter => {\n        if (name === filter) {\n          filterState[name] = value\n        }\n      })\n\n      // Boolean filter types\n      ;[\n        \"acquireable\",\n        \"at_auction\",\n        \"for_sale\",\n        \"inquireable_only\",\n        \"offerable\",\n      ].forEach(filter => {\n        if (name === filter) {\n          filterState[name] = Boolean(value)\n        }\n      })\n\n      delete state.reset\n\n      return {\n        ...state,\n        ...filterState,\n      }\n    }\n\n    /**\n     * Unsetting a filter\n     */\n    case \"UNSET\": {\n      const { name } = action.payload\n\n      let filterState = {}\n\n      if (name === \"attribution_class\") {\n        filterState = {\n          attribution_class: [],\n        }\n      }\n      if (name === \"major_periods\") {\n        filterState = {\n          major_periods: [],\n        }\n      }\n      if (name === \"medium\") {\n        filterState = {\n          medium: \"*\",\n        }\n      }\n      if (name === \"page\") {\n        filterState = {\n          page: 1,\n        }\n      }\n\n      ;[\n        \"acquireable\",\n        \"at_auction\",\n        \"color\",\n        \"for_sale\",\n        \"inquireable_only\",\n        \"offerable\",\n        \"partner_id\",\n      ].forEach(filter => {\n        if (name === filter) {\n          filterState[name] = null\n        }\n      })\n\n      return {\n        ...state,\n        ...filterState,\n      }\n    }\n\n    /**\n     * Resetting filters back to their initial state\n     */\n    case \"RESET\": {\n      return {\n        ...initialArtworkFilterState,\n        reset: true,\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\n/**\n * Hook to conveniently access fiter state context\n */\nexport const useArtworkFilterContext = () => {\n  const artworkFilterContext = useContext(ArtworkFilterContext)\n  return artworkFilterContext\n}\n"],"file":"ArtworkFilterContext.js"}