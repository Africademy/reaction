{"version":3,"sources":["../../../../src/Components/v2/ArtworkFilter/index.tsx"],"names":["ArtworkFilter","viewer","aggregations","counts","filters","sortOptions","onArtworkBrickClick","onFilterClick","onChange","ZeroState","BaseArtworkFilter","relay","relayVariables","props","filtered_artworks","hasFilter","__id","tracking","isFetching","toggleFetching","showMobileActionSheet","toggleMobileActionSheet","filterContext","previousFilters","setScrollable","doScroll","document","body","style","overflowY","Object","entries","forEach","filterKey","currentFilter","previousFilter","filtersHaveUpdated","fetchResults","trackEvent","action_type","AnalyticsSchema","ActionType","CommercialFilterParamsChanged","current","changed","relayRefetchVariables","refetch","error","console","ArtworkGrid","children","ArtworkQueryFilter","ArtworkFilterRefetchContainer","ArtworkFilterQueryRenderer","keyword","relayEnvironment","initialArtworkFilterState"],"mappings":"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","sourcesContent":["import { isEqual } from \"lodash\"\nimport React, { useEffect, useState } from \"react\"\nimport useDeepCompareEffect from \"use-deep-compare-effect\"\n\nimport { createRefetchContainer, graphql, RelayRefetchProp } from \"react-relay\"\n\nimport { AnalyticsSchema, useSystemContext } from \"Artsy\"\nimport { useTracking } from \"Artsy/Analytics/useTracking\"\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { usePrevious } from \"Utils/Hooks/usePrevious\"\nimport { Media } from \"Utils/Responsive\"\n\nimport { ArtworkFilter_viewer } from \"__generated__/ArtworkFilter_viewer.graphql\"\nimport { ArtworkFilterQuery as ArtworkFilterQueryType } from \"__generated__/ArtworkFilterQuery.graphql\"\n\nimport { ArtworkFilterArtworkGridRefetchContainer as ArtworkFilterArtworkGrid } from \"./ArtworkFilterArtworkGrid2\"\nimport { SortFilter } from \"./ArtworkFilters/SortFilter\"\n\nimport {\n  ArtworkFilterContextProvider,\n  initialArtworkFilterState,\n  SharedArtworkFilterContextProps,\n  useArtworkFilterContext,\n} from \"./ArtworkFilterContext\"\n\nimport { ArtworkFilterMobileActionSheet } from \"./ArtworkFilterMobileActionSheet\"\nimport { ArtworkFilters } from \"./ArtworkFilters\"\n\nimport {\n  Box,\n  Button,\n  FilterIcon,\n  Flex,\n  Separator,\n  Spacer,\n} from \"@artsy/palette\"\nimport { ArtistArtworkFilter_artist } from \"__generated__/ArtistArtworkFilter_artist.graphql\"\nimport { Collection_viewer } from \"__generated__/Collection_viewer.graphql\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\n\n/**\n * Primary ArtworkFilter which is wrapped with a context and refetch container.\n *\n * If needing more granular control over the query being used, or the root query\n * doesn't `extend Viewer`, the BaseArtworkFilter can be imported below. See\n * `Apps/Collection` for an example, which queries Kaws for data.\n */\nexport const ArtworkFilter: React.FC<\n  SharedArtworkFilterContextProps & {\n    viewer: any // FIXME: We need to support multiple types implementing different viewer interfaces\n  }\n> = ({\n  viewer,\n  aggregations,\n  counts,\n  filters,\n  sortOptions,\n  onArtworkBrickClick,\n  onFilterClick,\n  onChange,\n  ZeroState,\n}) => {\n  return (\n    <ArtworkFilterContextProvider\n      aggregations={aggregations}\n      counts={counts}\n      filters={filters}\n      sortOptions={sortOptions}\n      onArtworkBrickClick={onArtworkBrickClick}\n      onFilterClick={onFilterClick}\n      onChange={onChange}\n      ZeroState={ZeroState}\n    >\n      <ArtworkFilterRefetchContainer viewer={viewer} />\n    </ArtworkFilterContextProvider>\n  )\n}\n\nexport const BaseArtworkFilter: React.FC<{\n  relay: RelayRefetchProp\n  relayVariables?: object\n  viewer: ArtworkFilter_viewer | Collection_viewer | ArtistArtworkFilter_artist\n}> = ({ relay, viewer, relayVariables = {}, ...props }) => {\n  const { filtered_artworks } = viewer\n  const hasFilter = filtered_artworks && filtered_artworks.__id\n\n  // If there was an error fetching the filter,\n  // we still want to render the rest of the page.\n  if (!hasFilter) return null\n\n  const tracking = useTracking()\n  const [isFetching, toggleFetching] = useState(false)\n  const [showMobileActionSheet, toggleMobileActionSheet] = useState(false)\n  const filterContext = useArtworkFilterContext()\n  const previousFilters = usePrevious(filterContext.filters)\n\n  /**\n   * Check to see if the mobile action sheet is present and prevent scrolling\n   */\n  useEffect(() => {\n    const setScrollable = doScroll => {\n      document.body.style.overflowY = doScroll ? \"visible\" : \"hidden\"\n    }\n    if (showMobileActionSheet) {\n      setScrollable(false)\n    }\n    return () => {\n      setScrollable(true)\n    }\n  }, [showMobileActionSheet])\n\n  /**\n   * Check to see if the current filter is different from the previous filter\n   * and trigger a reload.\n   */\n  useDeepCompareEffect(() => {\n    Object.entries(filterContext.filters).forEach(\n      ([filterKey, currentFilter]) => {\n        const previousFilter = previousFilters[filterKey]\n        const filtersHaveUpdated = !isEqual(currentFilter, previousFilter)\n\n        if (filtersHaveUpdated) {\n          fetchResults()\n\n          tracking.trackEvent({\n            action_type:\n              AnalyticsSchema.ActionType.CommercialFilterParamsChanged,\n            current: filterContext.filters,\n            changed: {\n              [filterKey]: filterContext.filters[filterKey],\n            },\n          })\n        }\n      }\n    )\n  }, [filterContext.filters])\n\n  function fetchResults() {\n    toggleFetching(true)\n\n    const relayRefetchVariables = {\n      ...filterContext.filters,\n      ...relayVariables,\n    }\n\n    relay.refetch(relayRefetchVariables, null, error => {\n      if (error) {\n        console.error(error)\n      }\n\n      toggleFetching(false)\n    })\n  }\n\n  const ArtworkGrid = () => {\n    return (\n      <ArtworkFilterArtworkGrid\n        filtered_artworks={viewer.filtered_artworks}\n        isLoading={isFetching}\n        columnCount={[2, 2, 2, 3]}\n      />\n    )\n  }\n\n  return (\n    <Box>\n      <Box id=\"jump--artworkFilter\" />\n\n      {/*\n        Mobile Artwork Filter\n      */}\n      <Media at=\"xs\">\n        <Box mb={1}>\n          {showMobileActionSheet && (\n            <ArtworkFilterMobileActionSheet\n              onClose={() => toggleMobileActionSheet(false)}\n            >\n              <ArtworkFilters />\n            </ArtworkFilterMobileActionSheet>\n          )}\n\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" py={1}>\n            <Button size=\"small\" onClick={() => toggleMobileActionSheet(true)}>\n              <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <FilterIcon fill=\"white100\" />\n                <Spacer mr={0.5} />\n                Filter\n              </Flex>\n            </Button>\n\n            <SortFilter />\n          </Flex>\n\n          <Spacer mb={2} />\n\n          <ArtworkGrid />\n        </Box>\n      </Media>\n\n      {/*\n        Desktop Artwork Filter\n      */}\n      <Media greaterThan=\"xs\">\n        <Flex>\n          <Box width=\"25%\" mr={2} mt={0.5}>\n            <ArtworkFilters />\n          </Box>\n          <Box width=\"75%\">\n            <Box mb={2}>\n              <Box pb={2} mt={0.5}>\n                <Separator />\n              </Box>\n              <SortFilter />\n            </Box>\n\n            {props.children || <ArtworkGrid />}\n          </Box>\n        </Flex>\n      </Media>\n    </Box>\n  )\n}\n\nexport const ArtworkQueryFilter = graphql`\n  query ArtworkFilterQuery(\n    $acquireable: Boolean\n    $aggregations: [ArtworkAggregation] = [TOTAL]\n    $artist_id: String\n    $at_auction: Boolean\n    $attribution_class: [String]\n    $color: String\n    $for_sale: Boolean\n    $height: String\n    $inquireable_only: Boolean\n    $major_periods: [String]\n    $medium: String\n    $offerable: Boolean\n    $page: Int\n    $partner_id: ID\n    $price_range: String\n    $sort: String\n    $keyword: String\n    $width: String\n  ) {\n    viewer {\n      ...ArtworkFilter_viewer\n        @arguments(\n          acquireable: $acquireable\n          aggregations: $aggregations\n          artist_id: $artist_id\n          at_auction: $at_auction\n          attribution_class: $attribution_class\n          color: $color\n          for_sale: $for_sale\n          height: $height\n          inquireable_only: $inquireable_only\n          keyword: $keyword\n          major_periods: $major_periods\n          medium: $medium\n          offerable: $offerable\n          page: $page\n          partner_id: $partner_id\n          price_range: $price_range\n          sort: $sort\n          width: $width\n        )\n    }\n  }\n`\n\nexport const ArtworkFilterRefetchContainer = createRefetchContainer(\n  BaseArtworkFilter,\n  {\n    viewer: graphql`\n      fragment ArtworkFilter_viewer on Viewer\n        @argumentDefinitions(\n          acquireable: { type: \"Boolean\" }\n          aggregations: { type: \"[ArtworkAggregation]\" }\n          artist_id: { type: \"String\" }\n          at_auction: { type: \"Boolean\" }\n          attribution_class: { type: \"[String]\" }\n          color: { type: \"String\" }\n          for_sale: { type: \"Boolean\" }\n          height: { type: \"String\" }\n          inquireable_only: { type: \"Boolean\" }\n          keyword: { type: \"String\" }\n          major_periods: { type: \"[String]\" }\n          medium: { type: \"String\" }\n          offerable: { type: \"Boolean\" }\n          page: { type: \"Int\" }\n          partner_id: { type: \"ID\" }\n          price_range: { type: \"String\" }\n          sort: { type: \"String\", defaultValue: \"-partner_updated_at\" }\n          width: { type: \"String\" }\n        ) {\n        filtered_artworks: filter_artworks(\n          acquireable: $acquireable\n          aggregations: $aggregations\n          artist_id: $artist_id\n          at_auction: $at_auction\n          attribution_class: $attribution_class\n          color: $color\n          for_sale: $for_sale\n          height: $height\n          inquireable_only: $inquireable_only\n          keyword: $keyword\n          major_periods: $major_periods\n          medium: $medium\n          offerable: $offerable\n          page: $page\n          partner_id: $partner_id\n          price_range: $price_range\n          size: 0\n          sort: $sort\n          width: $width\n        ) {\n          __id\n          ...ArtworkFilterArtworkGrid2_filtered_artworks\n        }\n      }\n    `,\n  },\n  ArtworkQueryFilter\n)\n\n/**\n * This QueryRenderer can be used to instantiate stand-alone embedded ArtworkFilters\n * that are not dependent on URLBar state.\n */\nexport const ArtworkFilterQueryRenderer = ({ keyword = \"andy warhol\" }) => {\n  const { relayEnvironment } = useSystemContext()\n\n  return (\n    <ArtworkFilterContextProvider\n      filters={{\n        ...initialArtworkFilterState,\n        keyword,\n      }}\n    >\n      <QueryRenderer<ArtworkFilterQueryType>\n        environment={relayEnvironment}\n        // FIXME: Passing a variable to `query` shouldn't error out in linter\n        /* tslint:disable:relay-operation-generics */\n        query={ArtworkQueryFilter}\n        variables={{\n          keyword,\n        }}\n        render={renderWithLoadProgress(ArtworkFilterRefetchContainer as any)} // FIXME: Find way to support union types here\n      />\n    </ArtworkFilterContextProvider>\n  )\n}\n"],"file":"index.js"}