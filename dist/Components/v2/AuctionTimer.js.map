{"version":3,"sources":["../../../src/Components/v2/AuctionTimer.tsx"],"names":["AuctionTimer","labelWithTimeRemaining","labelWithoutTimeRemaining","endDate","dateTime","DateTime","fromISO","amPm","hour","minutes","minute","display","monthShort","day","liveStartAt","sale","props","end_at","live_start_at","React","Component","AuctionTimerFragmentContainer","AuctionTimerQueryRenderer","saleID","SystemContext","relayEnvironment"],"mappings":";;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAMaA,Y;;;;;;;;;;;;;6BAmBF;AACP,aACE,6BAAC,YAAD;AACE,QAAA,sBAAsB,EAAE,KAAKC,sBAAL,EAD1B;AAEE,QAAA,yBAAyB,EAAE,KAAKC,yBAAL,EAF7B;AAGE,QAAA,OAAO,EAAE,KAAKC;AAHhB,QADF;AAOD;;;6CAEwB;AACvB,UAAMC,QAAQ,GAAGC,gBAASC,OAAT,CAAiB,KAAKH,OAAtB,CAAjB;;AACA,UAAMI,IAAI,GAAGH,QAAQ,CAACI,IAAT,IAAiB,EAAjB,GAAsB,IAAtB,GAA6B,IAA1C;AACA,UAAMC,OAAO,GACXL,QAAQ,CAACM,MAAT,GAAkB,EAAlB,GAAuB,MAAMN,QAAQ,CAACM,MAAtC,GAA+CN,QAAQ,CAACM,MAD1D;AAEA,UAAIF,IAAJ;;AACA,UAAIJ,QAAQ,CAACI,IAAT,GAAgB,EAApB,EAAwB;AACtBA,QAAAA,IAAI,GAAGJ,QAAQ,CAACI,IAAT,GAAgB,EAAvB;AACD,OAFD,MAEO,IAAIJ,QAAQ,CAACI,IAAT,KAAkB,CAAtB,EAAyB;AAC9BA,QAAAA,IAAI,GAAG,EAAP;AACD,OAFM,MAEA;AACLA,QAAAA,IAAI,GAAGJ,QAAQ,CAACI,IAAhB;AACD;;AACD,UAAMG,OAAO,aAAMP,QAAQ,CAACQ,UAAf,cACXR,QAAQ,CAACS,GADE,eAERL,IAFQ,cAEAC,OAFA,SAEUF,IAFV,CAAb;;AAGA,UAAI,KAAKO,WAAT,EAAsB;AACpB,8BAAeH,OAAf;AACD,OAFD,MAEO;AACL,8BAAeA,OAAf;AACD;AACF;;;gDAE2B;AAC1B,UAAI,KAAKG,WAAT,EAAsB;AACpB,eAAO,aAAP;AACD,OAFD,MAEO;AACL,eAAO,gBAAP;AACD;AACF;;;wBAzDa;AAAA,UACJC,IADI,GACK,KAAKC,KADV,CACJD,IADI;AAAA,UAEJE,MAFI,GAEOF,IAFP,CAEJE,MAFI;AAIZ,aAAO,KAAKH,WAAL,IAAoBG,MAA3B;AACD;;;wBAEiB;AAAA,UACRF,IADQ,GACC,KAAKC,KADN,CACRD,IADQ;AAAA,UAERG,aAFQ,GAEUH,IAFV,CAERG,aAFQ,EAIhB;;AACA,UAAIA,aAAa,KAAK,cAAtB,EAAsC;AACpC,eAAOA,aAAP;AACD;;AAED,aAAO,IAAP;AACD;;;;EAlB+BC,eAAMC,S;;;AA6DjC,IAAMC,6BAA6B,GAAG,yCAC3CrB,YAD2C,EAE3C;AACEe,EAAAA,IAAI;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADN,CAF2C,CAAtC;;;AAYA,IAAMO,yBAAyB,GAAG,SAA5BA,yBAA4B,OAAoC;AAAA,MAAjCC,MAAiC,QAAjCA,MAAiC;;AAAA,oBAC9C,uBAAWC,oBAAX,CAD8C;AAAA,MACnEC,gBADmE,eACnEA,gBADmE;;AAE3E,SACE,6BAAC,wCAAD;AACE,IAAA,WAAW,EAAEA,gBADf;AAEE,IAAA,SAAS,EAAE;AAAEF,MAAAA,MAAM,EAANA;AAAF,KAFb;AAGE,IAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAHP;AAUE,IAAA,MAAM,EAAE,uBAAe;AAAA,UAAZP,KAAY,SAAZA,KAAY;AACrB,aAAOA,KAAK,IAAI,6BAAC,6BAAD;AAA+B,QAAA,IAAI,EAAEA,KAAK,CAACD;AAA3C,QAAhB;AACD;AAZH,IADF;AAgBD,CAlBM","sourcesContent":["import { AuctionTimer_sale } from \"__generated__/AuctionTimer_sale.graphql\"\nimport { AuctionTimerQuery } from \"__generated__/AuctionTimerQuery.graphql\"\nimport { SystemContext } from \"Artsy\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport { Timer } from \"Components/v2/Timer\"\nimport { DateTime } from \"luxon\"\nimport React, { useContext } from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\n\nexport interface Props {\n  sale: AuctionTimer_sale\n}\n\nexport class AuctionTimer extends React.Component<Props> {\n  get endDate() {\n    const { sale } = this.props\n    const { end_at } = sale\n\n    return this.liveStartAt || end_at\n  }\n\n  get liveStartAt() {\n    const { sale } = this.props\n    const { live_start_at } = sale\n\n    // TODO: Figure out why this comes back from MP\n    if (live_start_at !== \"Invalid date\") {\n      return live_start_at\n    }\n\n    return null\n  }\n  render() {\n    return (\n      <Timer\n        labelWithTimeRemaining={this.labelWithTimeRemaining()}\n        labelWithoutTimeRemaining={this.labelWithoutTimeRemaining()}\n        endDate={this.endDate}\n      />\n    )\n  }\n\n  labelWithTimeRemaining() {\n    const dateTime = DateTime.fromISO(this.endDate)\n    const amPm = dateTime.hour >= 12 ? \"pm\" : \"am\"\n    const minutes =\n      dateTime.minute < 10 ? \"0\" + dateTime.minute : dateTime.minute\n    let hour\n    if (dateTime.hour > 12) {\n      hour = dateTime.hour - 12\n    } else if (dateTime.hour === 0) {\n      hour = 12\n    } else {\n      hour = dateTime.hour\n    }\n    const display = `${dateTime.monthShort} ${\n      dateTime.day\n    }, ${hour}:${minutes}${amPm}`\n    if (this.liveStartAt) {\n      return `Live ${display}`\n    } else {\n      return `Ends ${display}`\n    }\n  }\n\n  labelWithoutTimeRemaining() {\n    if (this.liveStartAt) {\n      return \"In progress\"\n    } else {\n      return \"Bidding closed\"\n    }\n  }\n}\n\nexport const AuctionTimerFragmentContainer = createFragmentContainer(\n  AuctionTimer,\n  {\n    sale: graphql`\n      fragment AuctionTimer_sale on Sale {\n        live_start_at\n        end_at\n      }\n    `,\n  }\n)\n\nexport const AuctionTimerQueryRenderer = ({ saleID }: { saleID: string }) => {\n  const { relayEnvironment } = useContext(SystemContext)\n  return (\n    <QueryRenderer<AuctionTimerQuery>\n      environment={relayEnvironment}\n      variables={{ saleID }}\n      query={graphql`\n        query AuctionTimerQuery($saleID: String!) {\n          sale(id: $saleID) {\n            ...AuctionTimer_sale\n          }\n        }\n      `}\n      render={({ props }) => {\n        return props && <AuctionTimerFragmentContainer sale={props.sale} />\n      }}\n    />\n  )\n}\n"],"file":"AuctionTimer.js"}