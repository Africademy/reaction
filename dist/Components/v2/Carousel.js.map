{"version":3,"sources":["../../../src/Components/v2/Carousel.tsx"],"names":["Carousel","props","React","Component","height","oneSlideVisible","LargeCarousel","cellAlign","contain","draggable","freeScroll","groupCells","pageDots","wrapAround","options","SmallCarousel","hasMultipleSlides","data","length","friction","prevNextButtons","BaseCarousel","currentSlideIndex","lastItemVisible","isMounted","startX","carouselRef","ontouchstart","e","touches","clientX","ontouchmove","Math","abs","cancelable","preventDefault","index","setState","flickity","selectedElements","includes","getLastCell","element","arrowPosition","onArrowClick","renderLeftArrow","showArrows","leftPosition","showLeftArrow","state","Arrow","previous","renderRightArrow","rightPosition","showRightArrow","checkLastItemVisible","next","setCarouselRef","Flickity","require","on","handleSlideChange","allowPreventDefault","off","destroy","render","isServer","window","carouselImages","slice","c","map","slide","slideIndex","FlickityCarousel","styled","div","CarouselContainer","ArrowButton","Flex","p","ArrowWrapper","showArrow","left","right"],"mappings":"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","sourcesContent":["import { Box, ChevronIcon, color, Flex, space } from \"@artsy/palette\"\nimport React, { Fragment } from \"react\"\nimport styled from \"styled-components\"\nimport { left, LeftProps, right, RightProps } from \"styled-system\"\nimport { Media } from \"Utils/Responsive\"\n\n/**\n * Do NOT use `FlickityType` to create instances of Flickity. Only refer to it\n * for type purposes.\n *\n * @see BaseCarousel.prototype.componentDidMount()\n */\nimport FlickityType, { Options as FlickityOptions } from \"flickity\"\n\n/**\n * Notes:\n * - We have the commercial license, which allows us to use this in our MIT licensed codebase,\n * but non-Artsy devs would technically be using the gplv3 version.\n * - For LazyLoad use Palette's Image lazyLoad prop instead of Flickities\n */\n\ninterface CarouselProps {\n  /**\n   * This is designed to handle any shape of data passed, as long as its an array\n   */\n  data: any\n\n  /**\n   * Passes CarouselRef\n   */\n  setCarouselRef?: (CarouselRef) => void\n\n  /**\n   * If this carousel contains only one visible image on render set to true (for SSR)\n   */\n  oneSlideVisible?: boolean\n\n  /**\n   * The height of the carousel\n   */\n  height?: string\n\n  /**\n   * The width of the carousel\n   */\n  width?: string\n\n  /**\n   * Callback when forward / backward arrows are clicked\n   */\n  onArrowClick?: ({\n    props: CarouselProps,\n    state: BaseCarouselState,\n    flickity: FlickityOptions,\n  }) => void\n\n  /**\n   * The render callback returns an image to display\n   */\n  render: (slide, slideIndex: number) => React.ReactNode\n\n  /**\n   * Flickity options\n   */\n  options?: FlickityOptions\n\n  /**\n   * Pass an optional position for left and right for the arrow wrapper element otherwise defaults to -40\n   */\n  arrowPosition?: number\n\n  /**\n   * Show or hide arrows. Defaults to true\n   */\n  showArrows?: boolean\n\n  /**\n   * Custom renderer for the left arrow\n   */\n  renderLeftArrow?: ArrowProps\n\n  /**\n   * Custom renderer for the right arrow\n   */\n  renderRightArrow?: ArrowProps\n}\n\ntype ArrowProps = (props: {\n  currentSlideIndex: number\n  Arrow: React.ReactType\n  flickity: FlickityType\n}) => React.ReactNode\n\nexport class Carousel extends React.Component<CarouselProps> {\n  static defaultProps = {\n    height: \"300px\",\n    oneSlideVisible: false,\n  }\n\n  render() {\n    return (\n      <Box width=\"100%\">\n        <Media greaterThan=\"xs\">\n          <LargeCarousel {...this.props} />\n        </Media>\n        <Media at=\"xs\">\n          <SmallCarousel {...this.props} />\n        </Media>\n      </Box>\n    )\n  }\n}\n\nexport const LargeCarousel: React.FC<CarouselProps> = props => {\n  return (\n    <BaseCarousel\n      showArrows\n      {...props}\n      options={{\n        cellAlign: \"left\",\n        contain: true,\n        draggable: false,\n        freeScroll: false,\n        groupCells: true,\n        pageDots: false,\n        wrapAround: false,\n        ...props.options,\n      }}\n    />\n  )\n}\n\nexport const SmallCarousel: React.FC<CarouselProps> = props => {\n  // Only render pageDots and enable draggable if more than one slide\n  const hasMultipleSlides = props.data.length > 1\n  return (\n    <BaseCarousel\n      showArrows={false}\n      {...props}\n      options={{\n        cellAlign: \"left\",\n        draggable: hasMultipleSlides,\n        freeScroll: true,\n        contain: true,\n        friction: 0.3,\n        pageDots: hasMultipleSlides,\n        prevNextButtons: false,\n        wrapAround: false,\n        ...props.options,\n      }}\n    />\n  )\n}\n\ninterface BaseCarouselState {\n  currentSlideIndex: number\n  lastItemVisible: boolean\n  isMounted: boolean\n}\n\nexport class BaseCarousel extends React.Component<\n  CarouselProps,\n  BaseCarouselState\n> {\n  state = {\n    currentSlideIndex: 0,\n    lastItemVisible: true,\n    isMounted: false,\n  }\n\n  /**\n   * A reference to the Flickity instance\n   */\n  flickity: FlickityType = null\n  carouselRef = null\n\n  /**\n   * Options to pass to underlying flickity component\n   */\n  options: FlickityOptions = {\n    prevNextButtons: false,\n  }\n\n  constructor(props) {\n    super(props)\n\n    // Flickity carousel options can be overriden via `props.options`\n    this.options = {\n      ...this.options,\n      ...props.options,\n    }\n  }\n\n  allowPreventDefault = () => {\n    // Fix for flickity bug introduced in iOS 13 https://github.com/metafizzy/flickity/issues/740\n    let startX\n    this.carouselRef.ontouchstart = e => {\n      startX = e.touches[0].clientX\n    }\n    this.carouselRef.ontouchmove = e => {\n      if (Math.abs(e.touches[0].clientX - startX) > 5 && e.cancelable) {\n        e.preventDefault()\n      }\n    }\n  }\n\n  /**\n   * Since Flickity doesn't support SSR rendering, we need to load it once the\n   * client has mounted. During the server-side pass we use a Flex wrapper.\n   *\n   * In fact, the flickity library can't even be loaded in environments that do\n   * not have a global `window` object. Thus we need to lazy load it here with\n   * an inline `require` statement.\n   */\n  componentDidMount() {\n    const { setCarouselRef } = this.props\n\n    const Flickity = require(\"flickity\") as typeof FlickityType\n    this.flickity = new Flickity(this.carouselRef, this.options)\n\n    this.setState(\n      {\n        isMounted: true,\n      },\n      () => {\n        if (setCarouselRef) {\n          setCarouselRef(this.flickity)\n        }\n        this.flickity.on(\"select\", this.handleSlideChange)\n        this.allowPreventDefault()\n      }\n    )\n  }\n\n  componentWillUnmount() {\n    if (this.flickity) {\n      this.flickity.off(\"select\", this.handleSlideChange)\n      this.flickity.destroy()\n    }\n  }\n\n  handleSlideChange = index => {\n    this.setState({\n      currentSlideIndex: index,\n    })\n  }\n\n  checkLastItemVisible = () => {\n    if (this.flickity && this.flickity.selectedElements) {\n      const lastItemVisible = this.flickity.selectedElements.includes(\n        // FIXME: Undocumented API. Is there a way this can be achieved with\n        // something public and commonly available?\n        // @ts-ignore\n        this.flickity.getLastCell().element\n      )\n      return lastItemVisible\n    } else {\n      return true\n    }\n  }\n\n  renderLeftArrow = () => {\n    const {\n      arrowPosition,\n      onArrowClick,\n      renderLeftArrow,\n      showArrows,\n      height,\n    } = this.props\n\n    if (!showArrows) {\n      return null\n    }\n\n    const leftPosition = arrowPosition != null ? arrowPosition : -space(4)\n\n    const showLeftArrow =\n      this.state.currentSlideIndex !== 0 || this.options.wrapAround === true\n\n    const Arrow = () => (\n      <ArrowWrapper left={leftPosition} showArrow={showLeftArrow}>\n        <ArrowButton\n          height={height}\n          onClick={() => {\n            this.flickity.previous()\n\n            if (onArrowClick) {\n              onArrowClick({\n                state: this.state,\n                props: this.props,\n                flickity: this.flickity,\n              })\n            }\n          }}\n        >\n          <ChevronIcon\n            height={30}\n            direction=\"left\"\n            fill=\"black100\"\n            width={30}\n          />\n        </ArrowButton>\n      </ArrowWrapper>\n    )\n\n    // Override default arrow display if custom render callback has been passed\n    if (renderLeftArrow) {\n      return renderLeftArrow({\n        Arrow,\n        currentSlideIndex: this.state.currentSlideIndex,\n        flickity: this.flickity,\n      })\n    }\n\n    return <Arrow />\n  }\n\n  renderRightArrow = () => {\n    const {\n      arrowPosition,\n      onArrowClick,\n      renderRightArrow,\n      showArrows,\n      height,\n    } = this.props\n\n    if (!showArrows) {\n      return null\n    }\n\n    const rightPosition = arrowPosition != null ? arrowPosition : -space(4)\n\n    const showRightArrow =\n      !this.checkLastItemVisible() || this.options.wrapAround === true\n\n    const Arrow = () => (\n      <ArrowWrapper right={rightPosition} showArrow={showRightArrow}>\n        <ArrowButton\n          height={height}\n          onClick={() => {\n            this.flickity.next()\n\n            if (onArrowClick) {\n              onArrowClick({\n                state: this.state,\n                props: this.props,\n                flickity: this.flickity,\n              })\n            }\n          }}\n        >\n          <ChevronIcon\n            height={30}\n            direction=\"right\"\n            fill=\"black100\"\n            width={30}\n          />\n        </ArrowButton>\n      </ArrowWrapper>\n    )\n\n    // Override default arrow display if custom render callback has been passed\n    if (renderRightArrow) {\n      return renderRightArrow({\n        Arrow,\n        currentSlideIndex: this.state.currentSlideIndex,\n        flickity: this.flickity,\n      })\n    }\n\n    return <Arrow />\n  }\n\n  render() {\n    const { isMounted } = this.state\n    const { data, height, oneSlideVisible, render } = this.props\n\n    // FIXME: During SSR pass want to hide other images. Work around for lack\n    // of SSR support in Flickity. This will only render the first 6 slides on SRR pass.\n    const isServer = typeof window === \"undefined\"\n    let carouselImages\n    if (isServer && oneSlideVisible) {\n      carouselImages = [data[0]]\n    } else if (isServer && data.length > 5) {\n      carouselImages = data.slice(0, 6)\n    } else {\n      carouselImages = data\n    }\n\n    return (\n      <>\n        <Flex\n          flexDirection=\"row\"\n          position=\"relative\"\n          justifyContent=\"space-around\"\n          alignItems=\"center\"\n          height={height}\n        >\n          {this.renderLeftArrow()}\n\n          <CarouselContainer height={height} isMounted={isMounted}>\n            <FlickityCarousel\n              isMounted={isMounted}\n              ref={c => (this.carouselRef = c)}\n            >\n              {carouselImages.map((slide, slideIndex) => {\n                return (\n                  <Fragment key={slideIndex}>\n                    {render(slide, slideIndex)}\n                  </Fragment>\n                )\n              })}\n            </FlickityCarousel>\n          </CarouselContainer>\n\n          {this.renderRightArrow()}\n        </Flex>\n      </>\n    )\n  }\n}\n\nconst FlickityCarousel = styled.div<{\n  isMounted: boolean\n}>`\n  display: ${props => (props.isMounted ? \"block\" : \"flex\")};\n`\n\nconst CarouselContainer = styled.div<{\n  height?: string\n  isMounted: boolean\n}>`\n  width: 100%;\n  position: relative;\n  overflow: ${props => (props.isMounted ? \"visible\" : \"hidden\")};\n\n  .flickity-viewport {\n    overflow: hidden;\n    width: 100%;\n  }\n\n  .flickity-slider {\n    img {\n      user-select: none;\n    }\n  }\n\n  .flickity-page-dots {\n    text-align: center;\n    height: 0;\n    padding-top: ${space(1)}px;\n\n    .dot {\n      width: 4px;\n      height: 4px;\n      border-radius: 100%;\n      display: inline-block;\n      margin: ${space(0.5)}px;\n      background-color: ${color(\"black10\")};\n    }\n\n    .dot.is-selected {\n      background-color: ${color(\"black100\")};\n    }\n  }\n\n  ${props => {\n    if (props.height) {\n      return `\n        height: ${props.height};\n      `\n    }\n  }};\n`\n\nexport const ArrowButton = styled(Flex)<\n  LeftProps & RightProps & { height?: string }\n>`\n  position: relative;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  user-select: none;\n  opacity: 0.3;\n\n  transition: opacity 0.25s;\n  height: ${p => p.height || \"200px\"};\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ArrowWrapper = styled.div<{\n  left?: number\n  right?: number\n  showArrow: boolean\n}>`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  min-width: 30px;\n  z-index: 10;\n  transition: opacity 0.25s;\n  opacity: ${props => (props.showArrow ? 1 : 0)};\n  pointer-events: ${props => (props.showArrow ? \"auto\" : \"none\")};\n  height: 100%;\n  ${left};\n  ${right};\n`\n"],"file":"Carousel.js"}