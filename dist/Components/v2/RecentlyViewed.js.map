{"version":3,"sources":["../../../src/Components/v2/RecentlyViewed.tsx"],"names":["HEIGHT","RecentlyViewed","context_module","Schema","ContextModule","RecentlyViewedArtworks","type","Type","Thumbnail","action_type","ActionType","Click","me","props","user","mediator","recentlyViewedArtworks","edges","artwork","aspect_ratio","w","node","image","trackClick","bind","Arrow","length","React","Component","ArrowContainer","Box","ArrowButton","RecentlyViewedFragmentContainer","RecentlyViewedQueryRenderer","SystemContext","relayEnvironment"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAMA,MAAM,GAAG,GAAf;IAKaC,c,WAHZ,sBAAM;AACLC,EAAAA,cAAc,EAAEC,MAAM,CAACC,aAAP,CAAqBC;AADhC,CAAN,C,UAIE,sBAAM;AACLC,EAAAA,IAAI,EAAEH,MAAM,CAACI,IAAP,CAAYC,SADb;AAELC,EAAAA,WAAW,EAAEN,MAAM,CAACO,UAAP,CAAkBC;AAF1B,CAAN,C;;;;;;;;;;;;;iCAIY,CACX;AACD;;;6BAEQ;AAAA;;AAAA,UACCC,EADD,GACQ,KAAKC,KADb,CACCD,EADD;AAGP,aACE,6BAAC,4BAAD,QACG,gBAAwB;AAAA,YAArBE,IAAqB,QAArBA,IAAqB;AAAA,YAAfC,QAAe,QAAfA,QAAe;AACvB,eACEH,EAAE,IACA,6BAAC,cAAD,CAAO,QAAP,QACE,6BAAC,kBAAD;AAAW,UAAA,EAAE,EAAE;AAAf,UADF,EAGE,6BAAC,cAAD;AAAO,UAAA,IAAI,EAAC;AAAZ,6BAHF,EAKE,6BAAC,eAAD;AAAQ,UAAA,EAAE,EAAE;AAAZ,UALF,EAOE,6BAAC,kBAAD;AACE,UAAA,IAAI,EAAEA,EAAE,CAACI,sBAAH,CAA0BC,KADlC;AAEE,UAAA,MAAM,EAAE,gBAAAC,OAAO,EAAI;AACjB,gBAAMC,YAAY,GAAG,cACnBD,OADmB,EAEnB,UAAAE,CAAC;AAAA,qBAAIA,CAAC,CAACC,IAAF,CAAOC,KAAP,CAAaH,YAAjB;AAAA,aAFkB,EAGnB,CAHmB,CAArB;AAMA,mBACE,6BAAC,4BAAD;AACE,cAAA,QAAQ,EAAE,IADZ;AAEE,cAAA,OAAO,EAAED,OAAO,CAACG,IAFnB;AAGE,cAAA,YAAY,EAAErB,MAHhB;AAIE,cAAA,WAAW,EAAEA,MAJf;AAKE,cAAA,KAAK,EAAEA,MAAM,GAAGmB,YALlB;AAME,cAAA,MAAM,EAAE,EANV;AAOE,cAAA,IAAI,EAAEL,IAPR;AAQE,cAAA,QAAQ,EAAEC,QARZ;AASE,cAAA,OAAO,EAAE,KAAI,CAACQ,UAAL,CAAgBC,IAAhB,CAAqB,KAArB;AATX,cADF;AAaD,WAtBH;AAuBE,UAAA,eAAe,EAAE,gCAAe;AAAA,gBAAZC,KAAY,SAAZA,KAAY;AAC9B,mBACE,6BAAC,cAAD,QACE,6BAAC,KAAD,OADF,CADF;AAKD,WA7BH;AA8BE,UAAA,gBAAgB,EAAE,iCAAe;AAAA,gBAAZA,KAAY,SAAZA,KAAY;AAC/B,mBACE,6BAAC,cAAD,QACGb,EAAE,CAACI,sBAAH,CAA0BC,KAA1B,CAAgCS,MAAhC,GAAyC,CAAzC,IACC,6BAAC,KAAD,OAFJ,CADF;AAOD;AAtCH,UAPF,CAFJ;AAoDD,OAtDH,CADF;AA0DD;;;;EAtEiCC,eAAMC,S;;AAyE1C,IAAMC,cAAc,GAAG,+BAAOC,YAAP,CAAH;AAAA;AAAA;AAAA,gDAGhBC,qBAHgB,CAApB;AAQO,IAAMC,+BAA+B,GAAG,yCAC7C/B,cAD6C,EAE7C;AACEW,EAAAA,EAAE;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADJ,CAF6C,CAAxC;;;AAqBA,IAAMqB,2BAA2B,GAAG,SAA9BA,2BAA8B,GAAM;AAAA,oBACZ,uBAAWC,oBAAX,CADY;AAAA,MACvCpB,IADuC,eACvCA,IADuC;AAAA,MACjCqB,gBADiC,eACjCA,gBADiC;;AAE/C,MAAI,CAACrB,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AACD,SACE,6BAAC,wCAAD;AACE,IAAA,WAAW,EAAEqB,gBADf;AAEE,IAAA,SAAS,EAAE,EAFb;AAGE,IAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAHP;AAUE,IAAA,MAAM,EAAE,oDAAuBH,+BAAvB;AAVV,IADF;AAcD,CAnBM","sourcesContent":["import { Box, Separator, Serif, Spacer } from \"@artsy/palette\"\nimport { RecentlyViewed_me } from \"__generated__/RecentlyViewed_me.graphql\"\nimport { RecentlyViewedQuery } from \"__generated__/RecentlyViewedQuery.graphql\"\nimport { SystemContext, SystemContextConsumer } from \"Artsy\"\nimport { track } from \"Artsy/Analytics\"\nimport * as Schema from \"Artsy/Analytics/Schema\"\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { SystemQueryRenderer as QueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport { FillwidthItem } from \"Components/Artwork/FillwidthItem\"\nimport { ArrowButton, Carousel } from \"Components/v2/Carousel\"\nimport React, { useContext } from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\nimport { get } from \"Utils/get\"\n\nexport interface RecentlyViewedProps {\n  me: RecentlyViewed_me\n}\n\nconst HEIGHT = 180\n\n@track({\n  context_module: Schema.ContextModule.RecentlyViewedArtworks,\n})\nexport class RecentlyViewed extends React.Component<RecentlyViewedProps> {\n  @track({\n    type: Schema.Type.Thumbnail,\n    action_type: Schema.ActionType.Click,\n  })\n  trackClick() {\n    //\n  }\n\n  render() {\n    const { me } = this.props\n\n    return (\n      <SystemContextConsumer>\n        {({ user, mediator }) => {\n          return (\n            me && (\n              <React.Fragment>\n                <Separator my={6} />\n\n                <Serif size=\"6\">Recently viewed</Serif>\n\n                <Spacer mb={3} />\n\n                <Carousel\n                  data={me.recentlyViewedArtworks.edges as object[]}\n                  render={artwork => {\n                    const aspect_ratio = get(\n                      artwork,\n                      w => w.node.image.aspect_ratio,\n                      1\n                    )\n\n                    return (\n                      <FillwidthItem\n                        lazyLoad={true}\n                        artwork={artwork.node}\n                        targetHeight={HEIGHT}\n                        imageHeight={HEIGHT}\n                        width={HEIGHT * aspect_ratio}\n                        margin={10}\n                        user={user}\n                        mediator={mediator}\n                        onClick={this.trackClick.bind(this)}\n                      />\n                    )\n                  }}\n                  renderLeftArrow={({ Arrow }) => {\n                    return (\n                      <ArrowContainer>\n                        <Arrow />\n                      </ArrowContainer>\n                    )\n                  }}\n                  renderRightArrow={({ Arrow }) => {\n                    return (\n                      <ArrowContainer>\n                        {me.recentlyViewedArtworks.edges.length > 4 && (\n                          <Arrow />\n                        )}\n                      </ArrowContainer>\n                    )\n                  }}\n                />\n              </React.Fragment>\n            )\n          )\n        }}\n      </SystemContextConsumer>\n    )\n  }\n}\n\nconst ArrowContainer = styled(Box)`\n  align-self: flex-start;\n\n  ${ArrowButton} {\n    height: 60%;\n  }\n`\n\nexport const RecentlyViewedFragmentContainer = createFragmentContainer(\n  RecentlyViewed,\n  {\n    me: graphql`\n      fragment RecentlyViewed_me on Me {\n        recentlyViewedArtworks(first: 20) {\n          edges {\n            node {\n              __id\n              image {\n                aspect_ratio\n              }\n              ...FillwidthItem_artwork @relay(mask: false)\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n\nexport const RecentlyViewedQueryRenderer = () => {\n  const { user, relayEnvironment } = useContext(SystemContext)\n  if (!user) {\n    return null\n  }\n  return (\n    <QueryRenderer<RecentlyViewedQuery>\n      environment={relayEnvironment}\n      variables={{}}\n      query={graphql`\n        query RecentlyViewedQuery {\n          me {\n            ...RecentlyViewed_me\n          }\n        }\n      `}\n      render={renderWithLoadProgress(RecentlyViewedFragmentContainer)}\n    />\n  )\n}\n"],"file":"RecentlyViewed.js"}