{"version":3,"sources":["../../../src/Components/v2/SelectedCareerAchievements.tsx"],"names":["CATEGORIES","CATEGORY_LABEL_MAP","SelectedCareerAchievements","showModal","props","artist","auctionResults","edges","length","topAuctionResult","node","display","price_realized","organization","sale_date","highlights","partners","highCategory","type","toUpperCase","replace","insight","label","entities","insights","Container","Wrap","border","BorderBox","Box","renderGalleryRepresentation","renderAuctionHighlight","map","renderInsight","children","React","Component","SelectedCareerAchievementsFragmentContainer"],"mappings":"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","sourcesContent":["import { BorderBox, Box, Flex, Sans } from \"@artsy/palette\"\nimport { SelectedCareerAchievements_artist } from \"__generated__/SelectedCareerAchievements_artist.graphql\"\nimport {\n  hasSections,\n  highestCategory,\n} from \"Apps/Artist/Components/MarketInsights/MarketInsights\"\n\nimport { ArtistInsight } from \"Components/v2/ArtistInsight\"\nimport { ArtistInsightsModal } from \"Components/v2/ArtistInsightsModal\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\n\nexport interface SelectedCareerAchievementsProps {\n  artist: SelectedCareerAchievements_artist\n  border?: boolean\n  Container?: (props: { children: JSX.Element }) => JSX.Element\n}\n\nconst CATEGORIES = {\n  \"blue-chip\": \"Blue chip\",\n  \"top-established\": \"Established\",\n  \"top-emerging\": \"Emerging\",\n}\nconst CATEGORY_LABEL_MAP = {\n  \"blue-chip\": \"Represented by internationally reputable galleries.\",\n  \"top-established\": \"Represented by industry leading galleries.\",\n  \"top-emerging\": \"Represented by up-and-coming galleries.\",\n}\n\nexport class SelectedCareerAchievements extends React.Component<\n  SelectedCareerAchievementsProps\n> {\n  static defaultProps = {\n    border: true,\n  }\n\n  state = {\n    showModal: false,\n  }\n\n  renderAuctionHighlight() {\n    if (\n      !this.props.artist.auctionResults ||\n      this.props.artist.auctionResults.edges.length < 1\n    ) {\n      return null\n    }\n    const topAuctionResult = this.props.artist.auctionResults.edges[0].node\n    const display = `${topAuctionResult.price_realized.display}, ${\n      topAuctionResult.organization\n    }, ${topAuctionResult.sale_date}`\n\n    return (\n      <ArtistInsight\n        key=\"HIGH_AUCTION\"\n        type=\"HIGH_AUCTION\"\n        label=\"High auction record\"\n        value={display}\n      />\n    )\n  }\n  renderGalleryRepresentation() {\n    const { highlights } = this.props.artist\n    const { partners } = highlights\n    if (partners && partners.edges && partners.edges.length > 0) {\n      const highCategory = highestCategory(partners.edges)\n      const type = highCategory.toUpperCase().replace(\"-\", \"_\")\n\n      return (\n        <ArtistInsight\n          key={type}\n          type={type}\n          label={CATEGORIES[highCategory]}\n          value={CATEGORY_LABEL_MAP[highCategory]}\n        />\n      )\n    }\n  }\n\n  renderInsight(insight) {\n    return (\n      <ArtistInsight\n        key={insight.type}\n        type={insight.type}\n        label={insight.label}\n        entities={insight.entities}\n      />\n    )\n  }\n\n  render() {\n    if (\n      !hasSections(this.props.artist) &&\n      (!this.props.artist.insights || this.props.artist.insights.length === 0)\n    ) {\n      return null\n    }\n\n    const Container = props => {\n      let Wrap\n      if (props.Container) {\n        Wrap = this.props.Container\n      } else if (this.props.border) {\n        Wrap = BorderBox\n      } else {\n        Wrap = Box\n      }\n\n      return <Wrap {...props} />\n    }\n\n    return (\n      <>\n        <Container>\n          <Flex flexDirection=\"column\" alignItems=\"left\" width=\"100%\">\n            <Sans size=\"2\" weight=\"medium\">\n              Selected career achievements\n            </Sans>\n            <Flex\n              flexDirection=\"row\"\n              flexWrap=\"wrap\"\n              justifyContent=\"space-between\"\n            >\n              {this.renderGalleryRepresentation()}\n              {this.renderAuctionHighlight()}\n\n              {this.props.artist.insights.map(insight => {\n                return this.renderInsight(insight)\n              })}\n            </Flex>\n          </Flex>\n        </Container>\n\n        <ArtistInsightsModal />\n\n        {this.props.children}\n      </>\n    )\n  }\n}\n\nexport const SelectedCareerAchievementsFragmentContainer = createFragmentContainer(\n  SelectedCareerAchievements,\n  {\n    artist: graphql`\n      fragment SelectedCareerAchievements_artist on Artist\n        @argumentDefinitions(\n          partner_category: {\n            type: \"[String]\"\n            defaultValue: [\"blue-chip\", \"top-established\", \"top-emerging\"]\n          }\n        ) {\n        highlights {\n          partners(\n            first: 10\n            display_on_partner_profile: true\n            represented_by: true\n            partner_category: $partner_category\n          ) {\n            edges {\n              node {\n                categories {\n                  id\n                }\n              }\n            }\n          }\n        }\n        insights {\n          type\n          label\n          entities\n        }\n        auctionResults(\n          recordsTrusted: true\n          first: 1\n          sort: PRICE_AND_DATE_DESC\n        ) {\n          edges {\n            node {\n              price_realized {\n                display(format: \"0a\")\n              }\n              organization\n              sale_date(format: \"YYYY\")\n            }\n          }\n        }\n      }\n    `,\n  }\n)\n"],"file":"SelectedCareerAchievements.js"}