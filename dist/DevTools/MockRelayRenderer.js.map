{"version":3,"sources":["../../src/DevTools/MockRelayRenderer.tsx"],"names":["MockRelayRenderer","caughtError","undefined","error","errorInfo","setState","props","mockResolvers","mockData","mockMutationResults","mockNetwork","Error","Query","__webpack_require__","QueryRenderer","require","state","console","Component","variables","query","network","getRelayNetwork","source","RecordSource","store","Store","environment","Environment","contextProps","componentProps","React"],"mappings":"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","sourcesContent":["import { SystemContextProvider } from \"Artsy\"\nimport { SystemContextConsumer } from \"Artsy\"\nimport { renderWithLoadProgress } from \"Artsy/Relay/renderWithLoadProgress\"\nimport { SystemQueryRenderer } from \"Artsy/Relay/SystemQueryRenderer\"\nimport { IMocks } from \"graphql-tools/dist/Interfaces\"\nimport React from \"react\"\nimport { QueryRenderer, RelayContainer } from \"react-relay\"\nimport {\n  Environment,\n  GraphQLTaggedNode,\n  OperationBase,\n  OperationDefaults,\n  RecordSource,\n  RelayNetwork,\n  Store,\n} from \"relay-runtime\"\nimport {\n  createMockNetworkLayer,\n  createMockNetworkLayer2,\n} from \"./createMockNetworkLayer\"\n\nexport interface MockRelayRendererProps<\n  T extends OperationBase = OperationDefaults\n> {\n  Component: RelayContainer<T[\"response\"]>\n  componentProps?: object\n  variables?: T[\"variables\"]\n  query: GraphQLTaggedNode\n  /**\n   * @deprecated use mockData and mockMutationResults\n   */\n  mockResolvers?: IMocks\n  /**\n   * @example\n   * mockData={{order: {id: \"my-order-id\", lineItems: {...}}}}\n   */\n  mockData?: object\n  /**\n   * @example\n   * mockMutationResults={{\n   *   commerceCreateOrderWithArtworkId: {\n   *     orderOrError: {\n   *       order: {id: \"my-order-id\"}\n   *     }\n   *   }\n   * }}\n   */\n  mockMutationResults?: object\n  mockNetwork?: RelayNetwork\n}\n\nexport interface MockRelayRendererState {\n  caughtError: {\n    error: any\n    errorInfo: any\n  }\n}\n\n/**\n * Renders a tree of Relay containers with a mocked local instance of the\n * metaphysics schema.\n *\n * @note\n * Use this component in storybooks, but not tests. Because Relay works\n * asynchronously _and_ a tree may contain nested `QueryRenderer` components,\n * for tests you should usually use {@link renderRelayTree}.\n *\n * @param params.Component\n * The component that either is a Relay container or has children that are Relay\n * containers.\n *\n * @param params.variables\n * The optional variables that should be used in the operation. In most cases\n * you should be able to just hardcode these into the root query.\n *\n * @param params.query\n * The root GraphQL query.\n *\n * @param params.mockResolvers\n * @deprecated use params.mockData and params.mockMutationResults\n * A list of types/fields, that are part of metaphysics’ schema, and the data to\n * return for those. See {@link https://www.apollographql.com/docs/graphql-tools/mocking.html#Customizing-mocks}\n *\n * @example\n *\n   ```tsx\n   jest.unmock(\"react-relay\")\n\n   const Artwork = createFragmentContainer(\n     props => (\n       <div>\n         <span>{props.artwork.title}}</span>\n         <img src={props.artwork.image.url} />\n       </div>\n     ),\n     graphql`\n       fragment MockRelayRenderer_artwork on Artwork {\n         image {\n           url\n         }\n       }\n     `\n   )\n\n   it(\"renders a Relay tree\", done => {\n     const wrapper = mount(\n       <MockRelayRenderer\n         Component={Artwork}\n         query={graphql`\n           query AnotherMockRelayRendererQuery {\n             artwork(id: \"mona-lisa\") {\n               ...MockRelayRenderer_artwork\n             }\n           }\n         `}\n         mockResolvers={{\n           Artwork: () => ({\n             title: \"Mona Lisa\",\n             image: {\n               url: \"http://test/image.jpg\",\n             },\n           }),\n         }}\n       />\n     )\n     setTimeout(() => {\n       expect(wrapper.find(\"span\").text()).toEqual(\"Mona Lisa\")\n       expect(wrapper.find(\"img\").props().src).toEqual(\"http://test/image.jpg\")\n       done()\n     }, 10)\n   })\n   ```\n  * @param params.mockMutationResults\n  * @param params.mockData\n  *\n  */\nexport class MockRelayRenderer<\n  T extends OperationBase = OperationDefaults\n> extends React.Component<MockRelayRendererProps<T>, MockRelayRendererState> {\n  state = {\n    caughtError: undefined,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ caughtError: { error, errorInfo } })\n  }\n\n  getRelayNetwork() {\n    const {\n      mockResolvers,\n      mockData,\n      mockMutationResults,\n      mockNetwork,\n    } = this.props\n\n    if (mockNetwork) {\n      if (mockResolvers || mockData || mockMutationResults) {\n        throw new Error(\n          \"You cannot use mockNetwork with mockResolvers, mockData, or mockMutationResults\"\n        )\n      }\n      return mockNetwork\n    }\n\n    if ((mockData || mockMutationResults) && mockResolvers) {\n      throw new Error(\n        \"You cannot use mockResolvers with either mockData or mockMutationResults\"\n      )\n    }\n\n    if (!mockData && !mockResolvers && !mockMutationResults) {\n      throw new Error(\"You must supply mockData and/or mockMutationResults\")\n    }\n\n    return mockData\n      ? createMockNetworkLayer2({\n          mockData,\n          mockMutationResults,\n        })\n      : createMockNetworkLayer({\n          Query: () => ({}),\n          ...mockResolvers,\n        })\n  }\n\n  render() {\n    // TODO: When extracting these test utils to their own package, this check\n    //       should probably become a custom TSLint rule, as there’s no good way\n    //       to test this in a generic way, plus with the rule we get fixes.\n    if (\n      typeof __webpack_require__ === \"undefined\" &&\n      QueryRenderer === require(\"../../__mocks__/react-relay\").QueryRenderer\n    ) {\n      throw new Error(\n        \"The `react-relay` module has been mocked, be sure to unmock it with: \" +\n          '`jest.unmock(\"react-relay\")`'\n      )\n    }\n\n    if (this.state.caughtError) {\n      const { error, errorInfo } = this.state.caughtError\n      console.error({ error, errorInfo })\n      return `Error occurred while rendering Relay component: ${error}`\n    }\n\n    const { Component, variables, query } = this.props\n\n    const network = this.getRelayNetwork()\n    const source = new RecordSource()\n    const store = new Store(source)\n    const environment = new Environment({\n      network,\n      store,\n    })\n\n    return (\n      <SystemContextConsumer>\n        {contextProps => (\n          <SystemContextProvider\n            {...contextProps}\n            relayEnvironment={environment}\n          >\n            <SystemQueryRenderer\n              // tslint:disable-next-line relay-operation-generics\n              query={query}\n              environment={environment}\n              variables={variables || {}}\n              // We rely on renderWithLoadProgress to throw an error in the test\n              // env ASAP. When we extract these test helpers to their own package\n              // that will need to be handled explicitly.\n              render={renderWithLoadProgress(\n                Component as any,\n                this.props.componentProps\n              )}\n            />\n          </SystemContextProvider>\n        )}\n      </SystemContextConsumer>\n    )\n  }\n}\n"],"file":"MockRelayRenderer.js"}