{"version":3,"sources":["../../src/DevTools/RootTestPage.tsx"],"names":["expectOne","component","length","expect","toBe","RootTestPage","root","find","update","text"],"mappings":";;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;AAEO,SAASA,SAAT,CAAsBC,SAAtB,EAAmE;AACxE,MAAIA,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B;AACAC,IAAAA,MAAM,CAACF,SAAS,CAACC,MAAX,CAAN,CAAyBE,IAAzB,CAA8B,CAA9B;AACD;;AACD,SAAOH,SAAP;AACD;;IAEYI,Y;;;;;;;;;;kCAUkB;AAAA;;AAAA,aAAa,cAAA,KAAI,CAACC,IAAL,EAAUC,IAAV,6BAAb;AAAA,K;;;;;;;;;;;;;;uBALrB,2C;;;AACN,qBAAKD,IAAL,CAAUE,MAAV;;;;;;;;;;;;;QAGF;;;;2BAEe;AACb,aAAO,KAAKF,IAAL,CAAUG,IAAV,EAAP;AACD","sourcesContent":["import { ReactWrapper } from \"enzyme\"\nimport { flushPromiseQueue } from \"Utils/flushPromiseQueue\"\n\nexport function expectOne<T>(component: ReactWrapper<T>): ReactWrapper<T> {\n  if (component.length !== 1) {\n    // put this behind an if statement to prevent messing up assertion numbers\n    expect(component.length).toBe(1)\n  }\n  return component\n}\n\nexport class RootTestPage {\n  // these three properties get hydrated by createTestEnv\n  readonly root: ReactWrapper\n\n  async update() {\n    await flushPromiseQueue()\n    this.root.update()\n  }\n\n  // @ts-ignore\n  find: ReactWrapper[\"find\"] = (...args) => this.root.find(...args)\n  text(): string {\n    return this.root.text()\n  }\n}\n"],"file":"RootTestPage.js"}