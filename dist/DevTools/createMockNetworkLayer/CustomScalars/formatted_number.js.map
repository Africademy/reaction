{"version":3,"sources":["../../../../src/DevTools/createMockNetworkLayer/CustomScalars/formatted_number.ts"],"names":["FormattedNumber","GraphQLScalarType","name","description","serialize","x","parseValue","parseLiteral","ast","kind","Kind","STRING","INT","error","GraphQLError","value"],"mappings":";;;;;;;;;AAEA;;AACA;;AACA;;AAJA;AAMA,IAAMA,eAAe,GAAG,IAAIC,0BAAJ,CAAsB;AAC5CC,EAAAA,IAAI,EAAE,iBADsC;AAE5CC,EAAAA,WAAW,EACT,mFACA,4DAJ0C;AAK5CC,EAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GALgC;AAM5CC,EAAAA,UAAU,EAAE,oBAAAD,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAN+B;AAO5CE,EAAAA,YAAY,EAAE,sBAAAC,GAAG,EAAI;AACnB,QAAIA,GAAG,CAACC,IAAJ,KAAaC,eAAKC,MAAlB,IAA4BH,GAAG,CAACC,IAAJ,KAAaC,eAAKE,GAAlD,EAAuD;AACrD,UAAMC,KAAK,kEACTL,GAAG,CAACC,IADK,CAAX;AAGA,YAAM,IAAIK,mBAAJ,CAAiBD,KAAjB,EAAwB,CAACL,GAAD,CAAxB,CAAN;AACD;;AAED,WAAOA,GAAG,CAACO,KAAX;AACD;AAhB2C,CAAtB,CAAxB;eAmBef,e","sourcesContent":["// Vendored as-is from https://github.com/artsy/metaphysics/blob/e6b183bedd8402d2a96458d992360fa0ad852c64/src/schema/types/formatted_number.js\n\nimport { GraphQLScalarType } from \"graphql\"\nimport { GraphQLError } from \"graphql/error\"\nimport { Kind } from \"graphql/language\"\n\nconst FormattedNumber = new GraphQLScalarType({\n  name: \"FormattedNumber\",\n  description:\n    \"The `FormattedNumber` type represents a number that can optionally be returned\" +\n    \"as a formatted String. It does not try to coerce the type.\",\n  serialize: x => x,\n  parseValue: x => x,\n  parseLiteral: ast => {\n    if (ast.kind !== Kind.STRING && ast.kind !== Kind.INT) {\n      const error = `Query error: Can only parse strings and ints, got a: ${\n        ast.kind\n      }`\n      throw new GraphQLError(error, [ast])\n    }\n\n    return ast.value\n  },\n})\n\nexport default FormattedNumber\n"],"file":"formatted_number.js"}