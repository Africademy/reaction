{"version":3,"sources":["../../src/DevTools/enzyme+renderUntil.d.ts"],"names":[],"mappings":";;AAAA","sourcesContent":["import { ReactWrapper } from \"enzyme\"\nimport * as React from \"react\"\n\ndeclare module \"enzyme\" {\n  export type RenderUntilPredicate<P, S, C> = (\n    wrapper: ReactWrapper<P, S, C>\n  ) => boolean\n\n  export interface ReactWrapper<P = {}, S = {}, C = React.Component> {\n    /**\n     * Continuously checks an asynchronously rendered tree until it is\n     * considered done, as per the provided predicate function.\n     * \n     * @param until\n     * A predicate function that is used to test wether rendering should be\n     * considered finished. This is a regular enzyme wrapper.\n     *\n     * @returns\n     * A promise that will resolve with an enzyme wrapper containing the\n     * rendered tree.\n     *\n     * @example\n     *\n       ```tsx\n      class Component extends React.Component {\n        state = {\n          data: \"Loading\",\n        }\n      \n        // After mounting and the initial render, trigger another render with data.\n        componentDidMount() {\n          setImmediate(() => {\n            this.setState({ data: \"ohai\" })\n          })\n        }\n      \n        render() {\n          return <div>{this.state.data}</div>\n        }\n      }\n      \n      it(\"resolves the promise with an enzyme wrapper with the final state\", async () => {\n        const wrapper = await mount(<Component />).renderUntil(\n          n => n.find(\"div\").text() !== \"Loading\"\n        )\n        expect(wrapper.find(\"div\").text()).toEqual(\"ohai\")\n      })\n      ```\n    *\n    */\n    renderUntil(\n      predicate: RenderUntilPredicate<P, S, C>\n    ): Promise<ReactWrapper<P, S, C>>\n  }\n}\n"],"file":"enzyme+renderUntil.d.js"}