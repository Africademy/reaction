{"version":3,"sources":["../../src/DevTools/renderRelayTree.tsx"],"names":["RelayFinishedLoading","tree","find","LoadingClassName","length","renderRelayTree","params","renderUntilPredicate","renderUntil","wrapper","rendererProps","renderer"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;;;;AAMO,IAAMA,oBAAyD,GAAG,SAA5DA,oBAA4D,CAAAC,IAAI;AAAA,SAC3E,CAACA,IAAI,CAACC,IAAL,YAAcC,wCAAd,GAAkCC,MADwC;AAAA,CAAtE;AAGP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EO,SAASC,eAAT,CAKLC,MALK,EASL;AAAA,MAEeC,oBAFf,GAKID,MALJ,CAEEE,WAFF;AAAA,MAGEC,OAHF,GAKIH,MALJ,CAGEG,OAHF;AAAA,MAIKC,aAJL,4BAKIJ,MALJ;;AAMA,MAAMK,QAAQ,GAAG,6BAAC,oCAAD,EAAuBD,aAAvB,CAAjB;;AACA,SAAO,mBAAeD,OAAO,GAAGA,OAAO,CAACE,QAAD,CAAV,GAAuBA,QAA7C,EAAuDH,WAAvD,CACLD,oBAAoB,IAAIP,oBADnB,CAAP;AAGD","sourcesContent":["import { LoadingClassName } from \"Artsy/Relay/renderWithLoadProgress\"\nimport \"DevTools/renderUntil\"\nimport { mount, RenderUntilPredicate } from \"enzyme\"\nimport React from \"react\"\nimport { MockRelayRenderer, MockRelayRendererProps } from \"./MockRelayRenderer\"\n\n/**\n * A {@link ReactWrapper.prototype.renderUntil} callback implementation that\n * passes when no more loading indicators exist in the tree. Use this when you\n * need to use `renderUntil` directly, such as after making updates to a Relay\n * tree.\n */\nexport const RelayFinishedLoading: RenderUntilPredicate<any, any, any> = tree =>\n  !tree.find(`.${LoadingClassName}`).length\n\n/**\n * Renders a tree of Relay containers with a mocked local instance of the\n * metaphysics schema and resolves the returned promise once loading data and\n * rendering (including waterfall requests) has finished.\n *\n * It does this by checking the tree for the existence of an element with the\n * class defined by `LoadingClassName` from the `renderWithLoadProgress` module.\n * I.e. as long as at least 1 element exists in the tree with that class name,\n * rendering is not considered finished. Use the `renderWithLoadProgress`\n * function for your `QueryRenderer` where possible, as it will do this plumbing\n * by default.\n *\n * @note\n * Use this function in tests, but not storybooks. For storybooks you should\n * usually use {@link MockRelayRenderer}.\n *\n * @param params\n * See {@link MockRelayRenderer}\n *\n * @param until\n * An optional predicate function that is used to test wether rendering should\n * be considered finished. This is a regular enzyme wrapper.\n *\n * @param wrapper\n * An optional component that the Relay tree should be nested in. Use this to\n * e.g. setup any context provider components etc.\n *\n * @example\n *\n   ```tsx\n   jest.unmock(\"react-relay\")\n\n   const Artwork = createFragmentContainer(\n     props => (\n       <div>\n         <span>{props.artwork.title}}</span>\n         <img src={props.artwork.image.url} />\n       </div>\n     ),\n     graphql`\n       fragment MockRelayRenderer_artwork on Artwork {\n         image {\n           url\n         }\n       }\n     `\n   )\n\n   it(\"renders a Relay tree\", () => {\n     return renderRelayTree({\n       Component: Artwork,\n       query: graphql`\n         query MockRelayRendererQuery {\n           artwork(id: \"mona-lisa\") {\n             ...MockRelayRenderer_artwork\n           }\n         }\n       `,\n       mockResolvers: {\n         Artwork: () => ({\n           title: \"Mona Lisa\",\n           image: {\n             url: \"http://test/image.jpg\",\n           },\n         }),\n       },\n     }).then(wrapper => {\n       expect(wrapper.find(\"span\").text()).toEqual(\"Mona Lisa\")\n       expect(wrapper.find(\"img\").props().src).toEqual(\"http://test/image.jpg\")\n     })\n   })\n   ```\n *\n */\nexport function renderRelayTree<\n  P = {},\n  S = {},\n  C extends React.Component = React.Component\n>(\n  params: MockRelayRendererProps & {\n    renderUntil?: RenderUntilPredicate<P, S, C>\n    wrapper?: (renderer: JSX.Element) => JSX.Element\n  }\n) {\n  const {\n    renderUntil: renderUntilPredicate,\n    wrapper,\n    ...rendererProps\n  } = params\n  const renderer = <MockRelayRenderer {...rendererProps} />\n  return mount<C, P, S>(wrapper ? wrapper(renderer) : renderer).renderUntil(\n    renderUntilPredicate || RelayFinishedLoading\n  )\n}\n"],"file":"renderRelayTree.js"}