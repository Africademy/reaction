{"version":3,"sources":["../../src/DevTools/renderUntil.tsx"],"names":["renderUntil","predicate","Promise","resolve","wait","setImmediate","update","ReactWrapper","prototype","deprecated_renderUntil","until","element","tree"],"mappings":";;;;;;;;;;;AAAA;;AAGA,SAASA,WAAT,CAIEC,SAJF,EAI4C;AAAA;;AAC1C,SAAO,IAAIC,OAAJ,CAAmC,UAAAC,OAAO,EAAI;AACnD;;;;;AAKA,QAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,UAAIH,SAAS,CAAC,KAAD,CAAb,EAAqB;AACnBE,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAFD,MAEO;AACLE,QAAAA,YAAY,CAAC,YAAM;AACjB;;;;;AAKA,UAAA,KAAI,CAACC,MAAL;;AACAF,UAAAA,IAAI;AACL,SARW,CAAZ;AASD;AACF,KAdD;AAeA;;;;;AAGAA,IAAAA,IAAI;AACL,GAzBM,CAAP;AA0BD,C,CAED;AACA;;;AACAG,qBAAaC,SAAb,CAAuBR,WAAvB,GAAqCA,WAArC;AAEA;;;;AAGA,SAASS,sBAAT,CAIEC,KAJF,EAIwCC,OAJxC,EAIwE;AACtE;;;;AAIA,MAAMC,IAAI,GAAG,mBAAeD,OAAf,CAAb;AACA,SAAOC,IAAI,CAACZ,WAAL,CAAiBU,KAAjB,CAAP;AACD","sourcesContent":["import { mount, ReactWrapper, RenderUntilPredicate } from \"enzyme\"\nimport * as React from \"react\"\n\nfunction renderUntil<\n  P = {},\n  S = {},\n  C extends React.Component = React.Component\n>(predicate: RenderUntilPredicate<P, S, C>) {\n  return new Promise<ReactWrapper<P, S, C>>(resolve => {\n    /**\n     * Continuously lets JS/React continue doing its async work and then check\n     * if the callback matches what the user expects, in which case the tree is\n     * ready to be asserted on.\n     */\n    const wait = () => {\n      if (predicate(this)) {\n        resolve(this)\n      } else {\n        setImmediate(() => {\n          /**\n           * Except for after the initial render, we need to make sure the\n           * tree gets re-rendered to reflect any changes caused by props or\n           * state changes.\n           */\n          this.update()\n          wait()\n        })\n      }\n    }\n    /**\n     * Start recursive waiting process.\n     */\n    wait()\n  })\n}\n\n// TODO: Depending on this discussion move this upstream\n// https://github.com/airbnb/enzyme/issues/1878.\nReactWrapper.prototype.renderUntil = renderUntil\n\n/**\n * @deprecated Use {@link ReactWrapper.prototype.renderUntil} instead.\n */\nfunction deprecated_renderUntil<\n  P = {},\n  S = {},\n  C extends React.Component = React.Component\n>(until: RenderUntilPredicate<P, S, C>, element: React.ReactElement<P>) {\n  /**\n   * In case of an uncaught error, be sure to reject the promise ASAP and\n   * with a helpful error.\n   */\n  const tree = mount<C, P, S>(element)\n  return tree.renderUntil(until)\n}\n\nexport { deprecated_renderUntil as renderUntil }\n"],"file":"renderUntil.js"}