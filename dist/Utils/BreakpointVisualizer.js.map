{"version":3,"sources":["../../src/Utils/BreakpointVisualizer.tsx"],"names":["StyledBox","Box","BreakpointText","breakpoint","max","BreakpointVisualizer","window","navigator","userAgent","match"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA;AACA,IAAMA,SAAS,GAAG,+BAAOC,YAAP,CAAH;AAAA;AAAA;AAAA,oIAAf;;AAWA,IAAMC,cAAgE,GAAG,SAAnEA,cAAmE;AAAA,MACvEC,UADuE,QACvEA,UADuE;AAAA,MAEvEC,GAFuE,QAEvEA,GAFuE;AAAA,SAIvE,6BAAC,iBAAD,sBAAcA,GAAG,GAAG,oBAAH,GAA0B,IAA3C,EAAkDD,UAAlD,GACE,6BAAC,gBAAD;AAAS,IAAA,IAAI,EAAC;AAAd,KAAmBA,UAAnB,CADF,CAJuE;AAAA,CAAzE;;AASO,IAAME,oBAA+B,GAAG,SAAlCA,oBAAkC;AAAA,SAC7C,6BAAC,cAAD,CAAO,QAAP,QACG,OAAOC,MAAP,KAAkB,WAAlB,IACCA,MAAM,CAACC,SADR,IAEC,CAACD,MAAM,CAACC,SAAP,CAAiBC,SAAjB,CAA2BC,KAA3B,CAAiC,WAAjC,CAFF,IAGG,6BAAC,SAAD;AAAW,IAAA,GAAG,EAAE,CAAhB;AAAmB,IAAA,IAAI,EAAE,CAAzB;AAA4B,IAAA,EAAE,EAAE,CAAhC;AAAmC,IAAA,EAAE,EAAE;AAAvC,KACE,6BAAC,cAAD;AAAgB,IAAA,UAAU,EAAC;AAA3B,IADF,EAEE,6BAAC,cAAD;AAAgB,IAAA,UAAU,EAAC;AAA3B,IAFF,EAGE,6BAAC,cAAD;AAAgB,IAAA,UAAU,EAAC;AAA3B,IAHF,EAIE,6BAAC,cAAD;AAAgB,IAAA,UAAU,EAAC;AAA3B,IAJF,EAKE,6BAAC,cAAD;AAAgB,IAAA,UAAU,EAAC,IAA3B;AAAgC,IAAA,GAAG;AAAnC,IALF,CAJN,CAD6C;AAAA,CAAxC","sourcesContent":["import { Box, Display } from \"@artsy/palette\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { Media } from \"Utils/Responsive\"\n\n// TODO: Bring transition animation back\nconst StyledBox = styled(Box)`\n  pointer-events: none;\n  position: fixed;\n  background-color: black;\n  color: white;\n  border-bottom-right-radius: 5px;\n  /* transition: opacity 0.3s ease-in-out; */\n  opacity: 0.05;\n  z-index: 2;\n`\n\nconst BreakpointText: React.SFC<{ breakpoint: string; max?: boolean }> = ({\n  breakpoint,\n  max,\n}) => (\n  <Media {...{ [max ? \"greaterThanOrEqual\" : \"at\"]: breakpoint }}>\n    <Display size=\"8\">{breakpoint}</Display>\n  </Media>\n)\n\nexport const BreakpointVisualizer: React.SFC = () => (\n  <React.Fragment>\n    {typeof window !== \"undefined\" &&\n      window.navigator &&\n      !window.navigator.userAgent.match(/Chromatic/) && (\n        <StyledBox top={0} left={0} py={1} px={2}>\n          <BreakpointText breakpoint=\"xs\" />\n          <BreakpointText breakpoint=\"sm\" />\n          <BreakpointText breakpoint=\"md\" />\n          <BreakpointText breakpoint=\"lg\" />\n          <BreakpointText breakpoint=\"xl\" max />\n        </StyledBox>\n      )}\n  </React.Fragment>\n)\n"],"file":"BreakpointVisualizer.js"}