{"version":3,"sources":["../../../src/Utils/Hooks/useMedia.ts"],"names":["useMedia","matches","Object","entries","themeProps","mediaQueries","reduce","acc","key","value","useMatchMedia","mediaQueryString","initialMatches","setMatches","isServer","window","mediaQueryList","matchMedia","handleChange","event","addListener","removeListener"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBO,SAASA,QAAT,GAAqD;AAC1D,MAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAeC,oBAAWC,YAA1B,EAAwCC,MAAxC,CACd,UAACC,GAAD,QAAuB;AAAA;AAAA,QAAhBC,GAAgB;AAAA,QAAXC,KAAW;;AACrB,6BACKF,GADL,sBAEGC,GAFH,EAESE,aAAa,CAACD,KAAD,CAFtB;AAID,GANa,EAOd,EAPc,CAAhB;AASA,SAAOR,OAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBO,SAASS,aAAT,CACLC,gBADK,EAGL;AAAA,kFAD4B,EAC5B;AAAA,mCADEC,cACF;AAAA,MADEA,cACF,qCADmB,IACnB;;AAAA,kBAC8B,qBAASA,cAAT,CAD9B;AAAA;AAAA,MACOX,OADP;AAAA,MACgBY,UADhB,kBAGA;;;AACA,MAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAnC;;AACA,MAAID,QAAJ,EAAc;AACZ,WAAOb,OAAP;AACD;;AAED,wBAAU,YAAM;AACd,QAAMe,cAAc,GAAGD,MAAM,CAACE,UAAP,CAAkBN,gBAAlB,CAAvB;AACAE,IAAAA,UAAU,CAACG,cAAc,CAACf,OAAhB,CAAV;;AACA,QAAMiB,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK;AAAA,aAAIN,UAAU,CAACM,KAAK,CAAClB,OAAP,CAAd;AAAA,KAA1B;;AAEAe,IAAAA,cAAc,CAACI,WAAf,CAA2BF,YAA3B;AAEA,WAAO,YAAM;AACXF,MAAAA,cAAc,CAACK,cAAf,CAA8BH,YAA9B;AACD,KAFD;AAGD,GAVD,EAUG,CAACP,gBAAD,CAVH;AAYA,SAAOV,OAAP;AACD","sourcesContent":["import { Breakpoint, themeProps } from \"@artsy/palette\"\nimport { useEffect, useState } from \"react\"\n\n/**\n * Returns an object containing keys representing each media query as they're\n * defined in Palette's theme file, and if they're currently matching.\n *\n * NOTE: useMedia is not meant to be run on the server.\n *\n * See: https://github.com/artsy/palette/blob/master/packages/palette/src/Theme.tsx#L84-L92\n *\n * @example\n\n    import { useMedia } from 'Utils/Hooks/useMedia'\n\n    const App = () => {\n      const { xs, sm, md, lg, xl } = useMedia()\n\n      return (\n        <div>Mobile view? {xs || sm}</div>\n      )\n    }\n */\nexport function useMedia(): { [k in Breakpoint]?: boolean } {\n  const matches = Object.entries(themeProps.mediaQueries).reduce(\n    (acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: useMatchMedia(value),\n      }\n    },\n    {}\n  )\n  return matches\n}\n\n/**\n * Checks to see if the browser matches a particular media query\n *\n * Thanks! https://github.com/olistic/react-use-media/\n *\n * @example\n\n    import { themeProps } from '@artsy/palette'\n    import { useMedia } from 'Utils/Hooks/useMedia'\n\n    const App = () => {\n      const isMobile = useMedia(themeProps.mediaQueries.sm)\n\n      return (\n        <div>Mobile view? {isMobile}</div>\n      )\n    }\n */\nexport function useMatchMedia(\n  mediaQueryString: string,\n  { initialMatches = null } = {}\n) {\n  const [matches, setMatches] = useState(initialMatches)\n\n  // Exit if we're in a server-like environment\n  const isServer = typeof window === \"undefined\"\n  if (isServer) {\n    return matches\n  }\n\n  useEffect(() => {\n    const mediaQueryList = window.matchMedia(mediaQueryString)\n    setMatches(mediaQueryList.matches)\n    const handleChange = event => setMatches(event.matches)\n\n    mediaQueryList.addListener(handleChange)\n\n    return () => {\n      mediaQueryList.removeListener(handleChange)\n    }\n  }, [mediaQueryString])\n\n  return matches\n}\n"],"file":"useMedia.js"}