{"version":3,"sources":["../../src/Utils/get.ts"],"names":["get","obj","unsafeDataOperation","valueIfFailOrUndefined","result","Error","error"],"mappings":";;;;;;;;;AAAA;;;;;;;;;AASO,SAASA,GAAT,CACLC,GADK,EAELC,mBAFK,EAGLC,sBAHK,EAIU;AACf,MAAI;AACF,QAAMC,MAAM,GAAGF,mBAAmB,CAACD,GAAD,CAAlC;;AACA,QAAIG,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAIC,KAAJ,EAAN;AACD;;AACD;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,WAAOH,sBAAP;AACD;AACF","sourcesContent":["/**\n * Type-safe access of deep property of an object\n *\n * Thanks! https://github.com/claudepache/es-optional-chaining/issues/2#issuecomment-318680932\n *\n * @param obj                     Object to get deep property\n * @param unsafeDataOperation     Function that returns the deep property\n * @param valueIfFailOrUndefined  Value to return in case if there is no such property\n */\nexport function get<O, T>(\n  obj: O,\n  unsafeDataOperation: (x: O) => T,\n  valueIfFailOrUndefined?: T\n): T | undefined {\n  try {\n    const result = unsafeDataOperation(obj)\n    if (result) {\n      return result\n    } else {\n      throw new Error()\n    }\n    return\n  } catch (error) {\n    return valueIfFailOrUndefined\n  }\n}\n"],"file":"get.js"}