{"version":3,"sources":["../../src/Utils/time.ts"],"names":["getLocalTimestampInMilliSeconds","Date","now","getOffsetBetweenGravityClock","relayEnvironment","query","fetchSystemTime","force","getGravityTimestampInMilliSeconds","startTime","data","possibleNetworkLatencyInMilliSeconds","serverTimestampInMilliSeconds","system","time","unix","gravityClock","localClock","offsetInMilliSeconds"],"mappings":";;;;;;;;;;;;;;;AACA;;AACA;;;;;;;;AAEA,IAAMA,+BAA+B,GAAG,SAAlCA,+BAAkC,GAAM;AAC5C,SAAOC,IAAI,CAACC,GAAL,EAAP;AACD,CAFD;;SAIsBC,4B;;;;;;;0BAAf,kBACLC,gBADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCC,YAAAA,KAHD;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAaCC,YAAAA,eAbD,GAamB,SAAlBA,eAAkB,GAAM;AAC5B,qBAAO,8BACLF,gBADK,EAELC,KAFK,EAGL,EAHK,EAIL;AAEA;AACEE,gBAAAA,KAAK,EAAE;AADT,eANK,CAAP;AAUD,aAxBI;;AA0BCC,YAAAA,iCA1BD;AAAA;AAAA;AAAA;AAAA;AAAA,sCA0BqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAClCC,wBAAAA,SADkC,GACtBT,+BAA+B,EADT;AAAA;AAAA,+BAErBM,eAAe,EAFM;;AAAA;AAElCI,wBAAAA,IAFkC;AAIlCC,wBAAAA,oCAJkC,GAKtC,CAACX,+BAA+B,KAAKS,SAArC,IAAkD,CALZ;AAMlCG,wBAAAA,6BANkC,GAOtCF,IAAI,CAACG,MAAL,CAAYC,IAAZ,CAAiBC,IAAjB,GAAwB,GAAxB,GAA8BJ,oCAPQ;AAAA,yDASjCC,6BATiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA1BrC;;AAAA,8BA0BCJ,iCA1BD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAuCwBA,iCAAiC,EAvCzD;;AAAA;AAuCGQ,YAAAA,YAvCH;AAwCGC,YAAAA,UAxCH,GAwCgBjB,+BAA+B,EAxC/C;AA0CGkB,YAAAA,oBA1CH,GA0C0BD,UAAU,GAAGD,YA1CvC;AAAA,8CA4CIE,oBA5CJ;;AAAA;AAAA;AAAA;AAAA,8CA+CI,CA/CJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { timeQueryResponse } from \"__generated__/timeQuery.graphql\"\nimport { graphql } from \"react-relay\"\nimport { Environment, fetchQuery } from \"relay-runtime\"\n\nconst getLocalTimestampInMilliSeconds = () => {\n  return Date.now()\n}\n\nexport async function getOffsetBetweenGravityClock(\n  relayEnvironment: Environment\n): Promise<number> {\n  const query = graphql`\n    query timeQuery {\n      system {\n        time {\n          unix\n        }\n      }\n    }\n  `\n\n  const fetchSystemTime = () => {\n    return fetchQuery<timeQueryResponse>(\n      relayEnvironment,\n      query,\n      {},\n      // FIXME: Update after definitely-typed and relay docs are updated\n      // @ts-ignore\n      {\n        force: true,\n      }\n    )\n  }\n\n  const getGravityTimestampInMilliSeconds = async () => {\n    const startTime = getLocalTimestampInMilliSeconds()\n    const data = await fetchSystemTime()\n\n    const possibleNetworkLatencyInMilliSeconds =\n      (getLocalTimestampInMilliSeconds() - startTime) / 2\n    const serverTimestampInMilliSeconds =\n      data.system.time.unix * 1e3 + possibleNetworkLatencyInMilliSeconds\n\n    return serverTimestampInMilliSeconds\n  }\n\n  try {\n    const gravityClock = await getGravityTimestampInMilliSeconds()\n    const localClock = getLocalTimestampInMilliSeconds()\n\n    const offsetInMilliSeconds = localClock - gravityClock\n\n    return offsetInMilliSeconds\n  } catch (error) {\n    // If something goes wrong (e.g. network error), just fall back to \"no offset\" since there is nothing we can do.\n    return 0\n  }\n}\n"],"file":"time.js"}