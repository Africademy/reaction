{"version":3,"sources":["components/artwork_filter/dropdown.js","../src/components/artwork_filter/dropdown.tsx"],"names":["React","require","Relay","icon_1","styled_components_1","colors_1","fonts_1","param_map_1","Dropdown","props","state","isHovered","selected","setState","count","navItems","aggregation","counts","map","createElement","NavItem","key","id","onClick","onSelect","name","NavItemCount","allLabel","labelMap","slice","toLowerCase","plural","unshift","buttonColor","buttonTextColor","superLabelColor","navStyle","display","default","purpleRegular","labelText","superLabelText","className","onMouseEnter","toggleHover","onMouseLeave","Button","style","backgroundColor","color","SuperLabel","fontSize","position","right","Nav","Component","exports","div","grayRegular","primary","secondary","grayBold","span","graySemibold","StyledDropdown","Object","defineProperty","value","createContainer","fragments"],"mappings":"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","file":"dropdown.js","sourcesContent":["\"use strict\";\nconst React = require(\"react\");\nconst Relay = require(\"react-relay\");\nconst icon_1 = require(\"../icon\");\nconst styled_components_1 = require(\"styled-components\");\nconst colors_1 = require(\"../../assets/colors\");\nconst fonts_1 = require(\"../../assets/fonts\");\nconst param_map_1 = require(\"./param_map\");\nclass Dropdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHovered: false,\n            selected: {},\n        };\n    }\n    toggleHover() {\n        this.setState({\n            isHovered: !this.state.isHovered,\n        });\n    }\n    onSelect(count) {\n        this.setState({\n            selected: count,\n        });\n    }\n    render() {\n        let navItems = this.props.aggregation.counts.map(count => {\n            return (React.createElement(NavItem, { key: count.id, onClick: () => this.onSelect(count) },\n                React.createElement(\"span\", null, count.name),\n                React.createElement(NavItemCount, null,\n                    \"\\u00A0(\",\n                    count.count,\n                    \")\")));\n        });\n        const allLabel = param_map_1.labelMap[this.props.aggregation.slice.toLowerCase()].plural;\n        navItems.unshift((React.createElement(NavItem, { key: \"all\", onClick: () => this.onSelect({}) },\n            React.createElement(\"span\", null,\n                \"All \",\n                allLabel))));\n        let buttonColor = \"white\";\n        let buttonTextColor = \"black\";\n        let superLabelColor = \"black\";\n        let navStyle = { display: \"none\" };\n        if (this.state.selected.name) {\n            buttonTextColor = colors_1.default.purpleRegular;\n        }\n        if (this.state.isHovered) {\n            buttonColor = \"black\";\n            buttonTextColor = \"white\";\n            superLabelColor = \"white\";\n            navStyle = { display: \"block\" };\n        }\n        const labelText = this.state.selected.name || this.props.aggregation.slice;\n        const superLabelText = this.state.selected.name ? this.props.aggregation.slice : null;\n        return (React.createElement(\"div\", { className: this.props.className, onMouseEnter: () => this.toggleHover(), onMouseLeave: () => this.toggleHover() },\n            React.createElement(Button, { style: { backgroundColor: buttonColor, color: buttonTextColor } },\n                superLabelText && React.createElement(SuperLabel, { style: { color: superLabelColor } }, superLabelText),\n                labelText,\n                React.createElement(icon_1.default, { name: \"arrow-down\", fontSize: \"9px\", color: buttonTextColor, style: { position: \"absolute\", right: 15 } })),\n            React.createElement(Nav, { style: navStyle }, navItems)));\n    }\n}\nexports.Dropdown = Dropdown;\nconst Button = styled_components_1.default.div `\n  background: white;\n  color: black;\n  border: 1px solid ${colors_1.default.grayRegular};\n  display: inline-block;\n  line-height: 160%;\n  padding: 15px 35px 10px 18px;\n  font-size: 13px;\n  vertical-align: middle;\n  max-width: 120px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  ${fonts_1.primary.style}\n`;\nconst Nav = styled_components_1.default.div `\n  z-index: 2;\n  background: black;\n  position: absolute;\n  top: 45px;\n  left: 1px;\n  width: 300px;\n  border: 1px solid #333;\n`;\nconst SuperLabel = styled_components_1.default.div `\n  position: absolute\n  font-size: 9px\n  margin-top: -15px;\n  color: black\n`;\nconst NavItem = styled_components_1.default.div `\n  ${fonts_1.secondary.style}\n  text-align: left;\n  color: white;\n  display: block;\n  border-bottom: 1px solid #333;\n  padding: 15px 18px 10px 18px;\n  text-transform: capitalize;\n  &:hover {\n    background: ${colors_1.default.grayBold};\n  }\n`;\nconst NavItemCount = styled_components_1.default.span `\n  color: ${colors_1.default.graySemibold}\n`;\nconst StyledDropdown = styled_components_1.default(Dropdown) `\n  position: relative;\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -1px;\n`;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Relay.createContainer(StyledDropdown, {\n    fragments: {\n        aggregation: () => Relay.QL `\n      fragment on ArtworksAggregationResults {\n        slice\n        counts {\n          name\n          id\n          count\n        }\n      }\n    `,\n    },\n});\n","import * as React from \"react\"\nimport * as Relay from \"react-relay\"\n\nimport Icon from \"../icon\"\n\nimport styled from \"styled-components\"\nimport colors from \"../../assets/colors\"\nimport { primary, secondary } from \"../../assets/fonts\"\nimport { labelMap } from \"./param_map\"\n\ninterface DropdownProps extends RelayProps, React.HTMLProps<Dropdown> {\n  aggregation: any\n  onSelect?: any\n}\n\ninterface DropdownState {\n  isHovered: boolean,\n  selected: any\n}\n\nexport class Dropdown extends React.Component<DropdownProps, DropdownState> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isHovered: false,\n      selected: {},\n    }\n  }\n\n  toggleHover() {\n    this.setState({\n      isHovered: !this.state.isHovered,\n    })\n  }\n\n  onSelect(count) {\n    this.setState({\n      selected: count,\n    })\n  }\n\n  render() {\n    let navItems = this.props.aggregation.counts.map(count => {\n      return (\n        <NavItem key={count.id} onClick={() => this.onSelect(count)}>\n          <span>{count.name}</span>\n          <NavItemCount>&nbsp;({count.count})</NavItemCount>\n        </NavItem>\n      )\n    })\n\n    const allLabel = labelMap[this.props.aggregation.slice.toLowerCase()].plural\n\n    navItems.unshift(\n      (\n        <NavItem key=\"all\" onClick={() => this.onSelect({})}>\n          <span>All {allLabel}</span>\n        </NavItem>\n      ),\n    )\n\n    let buttonColor = \"white\"\n    let buttonTextColor = \"black\"\n    let superLabelColor = \"black\"\n    let navStyle = { display: \"none\" }\n\n    if (this.state.selected.name) {\n      buttonTextColor = colors.purpleRegular\n    }\n\n    if (this.state.isHovered) {\n      buttonColor = \"black\"\n      buttonTextColor = \"white\"\n      superLabelColor = \"white\"\n      navStyle = { display: \"block\" }\n    }\n\n    const labelText = this.state.selected.name || this.props.aggregation.slice\n    const superLabelText = this.state.selected.name ? this.props.aggregation.slice : null\n\n    return (\n      <div\n        className={this.props.className}\n        onMouseEnter={() => this.toggleHover()}\n        onMouseLeave={() => this.toggleHover()}\n      >\n        <Button style={{ backgroundColor: buttonColor, color: buttonTextColor }}>\n          {superLabelText && <SuperLabel style={{ color: superLabelColor }}>{superLabelText}</SuperLabel>}\n          {labelText}\n          <Icon\n            name=\"arrow-down\"\n            fontSize=\"9px\"\n            color={buttonTextColor}\n            style={{ position: \"absolute\", right: 15 }}\n          />\n        </Button>\n        <Nav style={navStyle}>\n          {navItems}\n        </Nav>\n      </div>\n    )\n  }\n}\n\nconst Button = styled.div`\n  background: white;\n  color: black;\n  border: 1px solid ${colors.grayRegular};\n  display: inline-block;\n  line-height: 160%;\n  padding: 15px 35px 10px 18px;\n  font-size: 13px;\n  vertical-align: middle;\n  max-width: 120px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  ${primary.style}\n`\n\nconst Nav = styled.div`\n  z-index: 2;\n  background: black;\n  position: absolute;\n  top: 45px;\n  left: 1px;\n  width: 300px;\n  border: 1px solid #333;\n`\n\nconst SuperLabel = styled.div`\n  position: absolute\n  font-size: 9px\n  margin-top: -15px;\n  color: black\n`\n\nconst NavItem = styled.div`\n  ${secondary.style}\n  text-align: left;\n  color: white;\n  display: block;\n  border-bottom: 1px solid #333;\n  padding: 15px 18px 10px 18px;\n  text-transform: capitalize;\n  &:hover {\n    background: ${colors.grayBold};\n  }\n`\nconst NavItemCount = styled.span`\n  color: ${colors.graySemibold}\n`\n\nconst StyledDropdown = styled(Dropdown)`\n  position: relative;\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -1px;\n`\n\nexport default Relay.createContainer(StyledDropdown, {\n  fragments: {\n    aggregation: () => Relay.QL`\n      fragment on ArtworksAggregationResults {\n        slice\n        counts {\n          name\n          id\n          count\n        }\n      }\n    `,\n  },\n})\n\ninterface RelayProps {\n  aggregation: {\n    slice: string | null,\n    counts: {\n      name: string | null,\n      id: string | null,\n      count: number | null,\n    },\n  } | null,\n}\n"]}