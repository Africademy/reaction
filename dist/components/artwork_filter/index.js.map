{"version":3,"sources":["components/artwork_filter/index.js","../src/components/artwork_filter/index.tsx"],"names":["React","require","Relay","styled_components_1","artwork_grid_1","bordered_pulldown_1","dropdown_1","for_sale_checkbox_1","headline_1","total_count_1","PageSize","ArtworkFilter","props","state","for_sale","dimension_range","price_range","medium","isForSale","forSaleVar","setState","relay","setVariables","count","slice","toLowerCase","name","id","option","sort","val","filterArtworks","filter_artworks","dropdowns","aggregations","map","createElement","default","aggregation","key","onSelect","pulldownOptions","FilterBar","checked","onClick","setForSale","SubFilterBar","defaultValue","options","onChange","onChangeSort","artworks","Component","div","Object","defineProperty","exports","value","createContainer","initialVariables","size","fragments","getFragment"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nconst React = require(\"react\");\nconst Relay = require(\"react-relay\");\nconst styled_components_1 = require(\"styled-components\");\nconst artwork_grid_1 = require(\"../artwork_grid\");\nconst bordered_pulldown_1 = require(\"../bordered_pulldown\");\nconst dropdown_1 = require(\"./dropdown\");\nconst for_sale_checkbox_1 = require(\"./for_sale_checkbox\");\nconst headline_1 = require(\"./headline\");\nconst total_count_1 = require(\"./total_count\");\nconst PageSize = 10;\nclass ArtworkFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            for_sale: false,\n            dimension_range: \"*\",\n            price_range: \"*\",\n            medium: \"*\",\n        };\n    }\n    setForSale() {\n        const isForSale = !this.state.for_sale;\n        const forSaleVar = isForSale ? true : null;\n        this.setState({\n            for_sale: isForSale,\n        });\n        this.props.relay.setVariables({\n            for_sale: forSaleVar,\n        });\n    }\n    onSelect(count, slice) {\n        this.setState({\n            [slice.toLowerCase()]: count.name,\n        });\n        this.props.relay.setVariables({\n            [slice.toLowerCase()]: count.id,\n        });\n    }\n    onChangeSort(option) {\n        this.props.relay.setVariables({\n            sort: option.val,\n        });\n    }\n    render() {\n        const filterArtworks = this.props.filter_artworks.filter_artworks;\n        const dropdowns = filterArtworks.aggregations.map(aggregation => (React.createElement(dropdown_1.default, { aggregation: aggregation, key: aggregation.slice, onSelect: (count, slice) => this.onSelect(count, slice) })));\n        const pulldownOptions = [\n            { val: \"-partner_updated_at\", name: \"Recently Updated\" },\n            { val: \"-year\", name: \"Artwork Year (desc.)\" },\n            { val: \"year\", name: \"Artwork Year (asc.)\" },\n        ];\n        return (React.createElement(\"div\", null,\n            React.createElement(FilterBar, null,\n                React.createElement(for_sale_checkbox_1.default, { checked: this.state.for_sale, onClick: () => this.setForSale() }),\n                dropdowns),\n            React.createElement(SubFilterBar, null,\n                React.createElement(\"div\", null,\n                    React.createElement(headline_1.default, { medium: this.state.medium, price_range: this.state.price_range, dimension_range: this.state.dimension_range, for_sale: this.state.for_sale }),\n                    React.createElement(total_count_1.default, { filter_artworks: filterArtworks })),\n                React.createElement(bordered_pulldown_1.default, { defaultValue: \"Recently Updated\", options: pulldownOptions, onChange: option => this.onChangeSort(option) })),\n            React.createElement(artwork_grid_1.default, { artworks: filterArtworks.artworks })));\n    }\n}\nconst FilterBar = styled_components_1.default.div `\n  text-align: center;\n`;\nconst SubFilterBar = styled_components_1.default.div `\n  display: flex;\n  justify-content: space-between;\n  padding: 20px 0;\n  align-items: center;\n`;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Relay.createContainer(ArtworkFilter, {\n    initialVariables: {\n        sort: \"-partner_updated_at\",\n        size: PageSize,\n        for_sale: null,\n        medium: \"*\",\n        aggregations: [\"MEDIUM\", \"TOTAL\", \"PRICE_RANGE\", \"DIMENSION_RANGE\"],\n        price_range: \"*\",\n        dimension_range: \"*\",\n    },\n    fragments: {\n        filter_artworks: () => Relay.QL `\n      fragment on Viewer {\n        filter_artworks(\n          aggregations: $aggregations, \n          size: $size,\n          for_sale: $for_sale,\n          medium: $medium,\n          price_range: $price_range,\n          dimension_range: $dimension_range,\n          sort: $sort\n        ) {\n          ${total_count_1.default.getFragment(\"filter_artworks\")}\n          aggregations {\n            ${dropdown_1.default.getFragment(\"aggregation\")}\n          }\n          artworks: artworks_connection(first: $size) {\n            ${artwork_grid_1.default.getFragment(\"artworks\")}\n          }\n        }\n      }\n    `,\n    },\n});\n","import * as React from \"react\"\nimport * as Relay from \"react-relay\"\nimport styled from \"styled-components\"\n\nimport Artworks from \"../artwork_grid\"\nimport BorderedPulldown from \"../bordered_pulldown\"\nimport Dropdown from \"./dropdown\"\nimport ForSaleCheckbox from \"./for_sale_checkbox\"\nimport Headline from \"./headline\"\nimport TotalCount from \"./total_count\"\n\nconst PageSize = 10\n\ninterface Props extends RelayProps, React.HTMLProps<ArtworkFilter> {\n  filter_artworks: any\n  relay: any\n}\n\ninterface State {\n  for_sale: boolean,\n  dimension_range: string,\n  price_range: string,\n  medium: string,\n}\n\nclass ArtworkFilter extends React.Component<Props, State> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      for_sale: false,\n      dimension_range: \"*\",\n      price_range: \"*\",\n      medium: \"*\",\n    }\n  }\n\n  setForSale() {\n    const isForSale = !this.state.for_sale\n    const forSaleVar = isForSale ? true : null\n\n    this.setState({\n      for_sale: isForSale,\n    })\n    this.props.relay.setVariables({\n      for_sale: forSaleVar,\n    })\n  }\n\n  onSelect(count, slice) {\n    this.setState({\n      [slice.toLowerCase()]: count.name,\n    })\n    this.props.relay.setVariables({\n      [slice.toLowerCase()]: count.id,\n    })\n  }\n\n  onChangeSort(option) {\n    this.props.relay.setVariables({\n      sort: option.val,\n    })\n  }\n\n  render() {\n    const filterArtworks = this.props.filter_artworks.filter_artworks\n    const dropdowns = filterArtworks.aggregations.map(aggregation =>\n      (\n        <Dropdown\n          aggregation={aggregation}\n          key={aggregation.slice}\n          onSelect={(count, slice) => this.onSelect(count, slice)}\n        />\n      ),\n    )\n    const pulldownOptions = [\n      { val: \"-partner_updated_at\", name: \"Recently Updated\" },\n      { val: \"-year\", name: \"Artwork Year (desc.)\" },\n      { val: \"year\", name: \"Artwork Year (asc.)\" },\n    ]\n    return (\n      <div>\n        <FilterBar>\n          <ForSaleCheckbox checked={this.state.for_sale} onClick={() => this.setForSale()}/>\n          {dropdowns}\n        </FilterBar>\n        <SubFilterBar>\n          <div>\n            <Headline\n              medium={this.state.medium}\n              price_range={this.state.price_range}\n              dimension_range={this.state.dimension_range}\n              for_sale={this.state.for_sale}\n            />\n            <TotalCount filter_artworks={filterArtworks} />\n          </div>\n          <BorderedPulldown\n            defaultValue=\"Recently Updated\"\n            options={pulldownOptions}\n            onChange={option => this.onChangeSort(option)}\n          />\n        </SubFilterBar>\n        <Artworks artworks={filterArtworks.artworks} />\n      </div>\n    )\n  }\n}\n\nconst FilterBar = styled.div`\n  text-align: center;\n`\n\nconst SubFilterBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 20px 0;\n  align-items: center;\n`\n\nexport default Relay.createContainer(ArtworkFilter, {\n  initialVariables: {\n    sort: \"-partner_updated_at\",\n    size: PageSize,\n    for_sale: null,\n    medium: \"*\",\n    aggregations: [\"MEDIUM\", \"TOTAL\", \"PRICE_RANGE\", \"DIMENSION_RANGE\"],\n    price_range: \"*\",\n    dimension_range: \"*\",\n  },\n  fragments: {\n    filter_artworks: () => Relay.QL`\n      fragment on Viewer {\n        filter_artworks(\n          aggregations: $aggregations, \n          size: $size,\n          for_sale: $for_sale,\n          medium: $medium,\n          price_range: $price_range,\n          dimension_range: $dimension_range,\n          sort: $sort\n        ) {\n          ${TotalCount.getFragment(\"filter_artworks\")}\n          aggregations {\n            ${Dropdown.getFragment(\"aggregation\")}\n          }\n          artworks: artworks_connection(first: $size) {\n            ${Artworks.getFragment(\"artworks\")}\n          }\n        }\n      }\n    `,\n  },\n})\n\ninterface RelayProps {\n  filter_artworks: {\n    filter_artworks: {\n      artworks: Array<any | null> | null,\n      counts: {\n        total: number | null,\n      } | null,\n      aggregations: Array<any | null> | null,\n    } | null,\n  } | null,\n}\n"]}