{"version":3,"sources":["components/artwork_grid.js","../src/components/artwork_grid.tsx"],"names":["React","require","Relay","styled_components_1","index_1","ArtworkGrid","sectionedArtworks","sectionRatioSums","artworks","props","edges","i","columnCount","push","forEach","artwork","artworkEdge","node","image","lowestRatioSum","Number","MAX_VALUE","sectionIndex","j","length","ratioSum","section","aspectRatio","aspect_ratio","spacerStyle","height","itemMargin","sections","artworkComponents","createElement","default","key","__id","style","sectionSpecificStyle","flex","marginRight","sectionMargin","renderSections","className","Component","exports","defaultProps","StyledGrid","ArtworkFragment","getFragment","Object","defineProperty","value","createContainer","fragments"],"mappings":"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","file":"artwork_grid.js","sourcesContent":["\"use strict\";\nconst React = require(\"react\");\nconst Relay = require(\"react-relay\");\nconst styled_components_1 = require(\"styled-components\");\nconst index_1 = require(\"./artwork/index\");\nclass ArtworkGrid extends React.Component {\n    sectionedArtworks() {\n        const sectionedArtworks = [];\n        const sectionRatioSums = [];\n        const artworks = this.props.artworks ? this.props.artworks.edges : [];\n        for (let i = 0; i < this.props.columnCount; i++) {\n            sectionedArtworks.push([]);\n            sectionRatioSums.push(0);\n        }\n        artworks.forEach(artworkEdge => {\n            const artwork = artworkEdge.node;\n            // There are artworks without images and other ‘issues’. Like Force we’re just going to reject those for now.\n            // See: https://github.com/artsy/eigen/issues/1667\n            if (artwork.image) {\n                // Find section with lowest *inverted* aspect ratio sum, which is the shortest column.\n                let lowestRatioSum = Number.MAX_VALUE;\n                let sectionIndex = null;\n                for (let j = 0; j < sectionRatioSums.length; j++) {\n                    const ratioSum = sectionRatioSums[j];\n                    if (ratioSum < lowestRatioSum) {\n                        sectionIndex = j;\n                        lowestRatioSum = ratioSum;\n                    }\n                }\n                if (sectionIndex != null) {\n                    const section = sectionedArtworks[sectionIndex];\n                    section.push(artwork);\n                    // Keep track of total section aspect ratio\n                    const aspectRatio = artwork.image.aspect_ratio || 1; // Ensure we never divide by null/0\n                    // Invert the aspect ratio so that a lower value means a shorter section.\n                    sectionRatioSums[sectionIndex] += (1 / aspectRatio);\n                }\n            }\n        });\n        return sectionedArtworks;\n    }\n    renderSections() {\n        const spacerStyle = {\n            height: this.props.itemMargin,\n        };\n        const sectionedArtworks = this.sectionedArtworks();\n        const sections = [];\n        for (let i = 0; i < this.props.columnCount; i++) {\n            const artworkComponents = [];\n            for (let j = 0; j < sectionedArtworks[i].length; j++) {\n                const artwork = sectionedArtworks[i][j];\n                artworkComponents.push(React.createElement(index_1.default, { artwork: artwork, key: \"artwork-\" + j + \"-\" + artwork.__id }));\n                // Setting a marginBottom on the artwork component didn’t work, so using a spacer view instead.\n                if (j < sectionedArtworks[i].length - 1) {\n                    artworkComponents.push(React.createElement(\"div\", { style: spacerStyle, key: \"spacer-\" + j + \"-\" + artwork.__id }));\n                }\n            }\n            const sectionSpecificStyle = {\n                flex: 1,\n                marginRight: (i === this.props.columnCount - 1 ? 0 : this.props.sectionMargin),\n            };\n            sections.push(React.createElement(\"div\", { style: sectionSpecificStyle, key: i }, artworkComponents));\n        }\n        return sections;\n    }\n    render() {\n        const artworks = this.renderSections() || [];\n        return (React.createElement(\"div\", { className: this.props.className }, artworks));\n    }\n}\nexports.ArtworkGrid = ArtworkGrid;\nArtworkGrid.defaultProps = {\n    columnCount: 3,\n    sectionMargin: 20,\n    itemMargin: 20,\n};\nconst StyledGrid = styled_components_1.default(ArtworkGrid) `\n  display: flex\n`;\nconst ArtworkFragment = Relay.QL `\n  fragment on Artwork {\n    __id\n    image {\n      aspect_ratio\n    }\n    ${index_1.default.getFragment(\"artwork\")}\n  }\n`;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Relay.createContainer(StyledGrid, {\n    fragments: {\n        artworks: () => Relay.QL `\n      fragment on ArtworkConnection {\n        edges {\n          node {\n            ${ArtworkFragment}\n          }\n        }\n      }\n    `,\n    },\n});\n","import * as React from \"react\"\nimport * as Relay from \"react-relay\"\nimport styled from \"styled-components\"\nimport Artwork from \"./artwork/index\"\n\nexport interface GridProps extends RelayProps, React.HTMLProps<ArtworkGrid> {\n  columnCount?: number,\n  sectionMargin?: number,\n  itemMargin?: number,\n}\n\nexport class ArtworkGrid extends React.Component<GridProps, null> {\n  public static defaultProps: Partial<GridProps>\n\n  sectionedArtworks() {\n    const sectionedArtworks: ArtworkRelayProps[][] = []\n    const sectionRatioSums = []\n    const artworks = this.props.artworks ? this.props.artworks.edges : []\n\n    for (let i = 0; i < this.props.columnCount; i++) {\n      sectionedArtworks.push([])\n      sectionRatioSums.push(0)\n    }\n\n    artworks.forEach(artworkEdge => {\n      const artwork = artworkEdge.node\n\n      // There are artworks without images and other ‘issues’. Like Force we’re just going to reject those for now.\n      // See: https://github.com/artsy/eigen/issues/1667\n      if (artwork.image) {\n        // Find section with lowest *inverted* aspect ratio sum, which is the shortest column.\n        let lowestRatioSum = Number.MAX_VALUE\n        let sectionIndex = null\n        for (let j = 0; j < sectionRatioSums.length; j++) {\n          const ratioSum = sectionRatioSums[j]\n          if (ratioSum < lowestRatioSum) {\n            sectionIndex = j\n            lowestRatioSum = ratioSum\n          }\n        }\n\n        if (sectionIndex != null) {\n          const section = sectionedArtworks[sectionIndex]\n          section.push(artwork)\n\n          // Keep track of total section aspect ratio\n          const aspectRatio = artwork.image.aspect_ratio || 1 // Ensure we never divide by null/0\n          // Invert the aspect ratio so that a lower value means a shorter section.\n          sectionRatioSums[sectionIndex] += (1 / aspectRatio)\n        }\n      }\n    })\n\n    return sectionedArtworks\n  }\n\n  renderSections() {\n    const spacerStyle = {\n      height: this.props.itemMargin,\n    }\n    const sectionedArtworks = this.sectionedArtworks()\n    const sections = []\n\n    for (let i = 0; i < this.props.columnCount; i++) {\n      const artworkComponents = []\n      for (let j = 0; j < sectionedArtworks[i].length; j++) {\n        const artwork = sectionedArtworks[i][j]\n        artworkComponents.push(\n          <Artwork artwork={artwork as any} key={\"artwork-\" + j + \"-\" + artwork.__id} />,\n        )\n        // Setting a marginBottom on the artwork component didn’t work, so using a spacer view instead.\n        if (j < sectionedArtworks[i].length - 1) {\n          artworkComponents.push(\n            <div style={spacerStyle} key={\"spacer-\" + j + \"-\" + artwork.__id} />,\n          )\n        }\n      }\n\n      const sectionSpecificStyle = {\n        flex: 1,\n        marginRight: (i === this.props.columnCount - 1 ? 0 : this.props.sectionMargin),\n      }\n\n      sections.push(\n        <div style={sectionSpecificStyle} key={i}>{artworkComponents}</div>,\n      )\n    }\n    return sections\n  }\n\n  render() {\n    const artworks = this.renderSections() || []\n    return (\n      <div className={this.props.className}>\n        {artworks}\n      </div>\n    )\n  }\n}\n\nArtworkGrid.defaultProps = {\n  columnCount: 3,\n  sectionMargin: 20,\n  itemMargin: 20,\n}\n\nconst StyledGrid = styled(ArtworkGrid)`\n  display: flex\n`\n\nconst ArtworkFragment = Relay.QL`\n  fragment on Artwork {\n    __id\n    image {\n      aspect_ratio\n    }\n    ${Artwork.getFragment(\"artwork\")}\n  }\n`\n\nexport default Relay.createContainer(StyledGrid, {\n  fragments: {\n    artworks: () => Relay.QL`\n      fragment on ArtworkConnection {\n        edges {\n          node {\n            ${ArtworkFragment}\n          }\n        }\n      }\n    `,\n  },\n})\n\ninterface ArtworkRelayProps {\n  __id: string,\n  image: {\n    aspect_ratio: number | null,\n  } | null,\n}\n\ninterface RelayProps {\n  artworks: {\n    edges: Array<{\n      node: ArtworkRelayProps | null,\n    } | null> | null,\n  },\n}\n"]}