{"version":3,"sources":["components/inquiry_artwork_brick/index.js","../src/components/inquiry_artwork_brick/index.tsx"],"names":["React","require","Relay","styled_components_1","metadata_1","colors_1","icon_1","Image","default","img","ImageOuterContainer","div","SelectedArtworkOverlay","purpleRegular","ArtworkState","exports","Artwork","props","state","isSelected","setState","createElement","style","position","onClick","onSelect","bind","src","artwork","image","url","name","color","Component","Object","defineProperty","value","createContainer","fragments","getFragment"],"mappings":"AAAA,a;ACEA,IAAAA,QAAAC,QAAA,OAAA,CAAA;AACA,IAAAC,QAAAD,QAAA,aAAA,CAAA;AACA,IAAAE,sBAAAF,QAAA,mBAAA,CAAA;AACA,IAAAG,aAAAH,QAAA,YAAA,CAAA;AACA,IAAAI,WAAAJ,QAAA,qBAAA,CAAA;AACA,IAAAK,SAAAL,QAAA,SAAA,CAAA;AAEA,IAAMM,QAAQJ,oBAAAK,OAAA,CAAOC,GAAf,iBAAN;;;;AAIA,IAAMC,sBAAsBP,oBAAAK,OAAA,CAAOG,GAA7B,kBAAN;;;;;;AAOA,IAAMC,yBAAyBT,oBAAAK,OAAA,CAAOG,GAAhC;AACgBN,SAAAG,OAAA,CAAOK,aADvB,CAAN,C;;;;;;;;;AAWAC,Y;;AAAAC,QAAAD,YAAA,GAAAA,YAAA,C;AAIAE,O;AACE,qBAAYC,KAAZ,EAAiB;AACTA,aADS;AAEf,cAAKC,KAAL,GAAa;AACXC,wBAAY,KADD,EAAb,CAFe;;AAKhB,K;AACO;AACN,iBAAKC,QAAL,CAAc;AACZD,4BAAY,CAAC,KAAKD,KAAL,CAAWC,UADZ,EAAd;;AAGD,S;AAEK;AACJ,mBACEnB,MAAAqB,aAAA,CAAA,KAAA,EAAA,EAAKC,OAAQ,EAAEC,UAAU,UAAZ,EAAb,EAAA;AACEvB,kBAAAqB,aAAA,CAACX,mBAAD,EAAoB,EAACc,SAAS,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAV,EAApB;AACE1B,kBAAAqB,aAAA,CAACd,KAAD,EAAM,EAACoB,KAAK,KAAKV,KAAL,CAAWW,OAAX,CAAmBC,KAAnB,CAAyBC,GAA/B,EAAN,CADF,CADF;AAIE9B,kBAAAqB,aAAA,CAACjB,WAAAI,OAAD,EAAgB,EAACoB,SAAS,KAAKX,KAAL,CAAWW,OAArB,EAAhB,CAJF;AAKG,iBAAKV,KAAL,CAAWC,UAAX,IAAwBnB,MAAAqB,aAAA,CAACT,sBAAD,EAAuB,EAACY,SAAS,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAV,EAAvB;AACvB1B,kBAAAqB,aAAA,CAACf,OAAAE,OAAD,EAAK,EAACuB,MAAK,OAAN,EAAcC,OAAM,OAApB,EAAL,CADuB,CAL3B,CADF;AAWD,S,sBAzB0BhC,MAAMiC,S;;AAAnClB,QAAAC,OAAA,GAAAA,OAAA;ADiBAkB,OAAOC,cAAP,CAAsBpB,OAAtB,EAA+B,YAA/B,EAA6C,EAAEqB,OAAO,IAAT,EAA7C;ACWArB,QAAAP,OAAA,GAAeN,MAAMmC,eAAN,CAAsBrB,OAAtB,EAA+B;AAC5CsB,eAAW;AACTV,iBAAS;;;;;;AAMJxB,uBAAAI,OAAA,CAAgB+B,WAAhB,CAA4B,SAA5B,CANI,GADA,EADiC,EAA/B,CAAf","file":"index.js","sourcesContent":["\"use strict\";\nconst React = require(\"react\");\nconst Relay = require(\"react-relay\");\nconst styled_components_1 = require(\"styled-components\");\nconst metadata_1 = require(\"./metadata\");\nconst colors_1 = require(\"../../assets/colors\");\nconst icon_1 = require(\"../icon\");\nconst Image = styled_components_1.default.img `\n  width: 100%;\n  align-self: center;\n`;\nconst ImageOuterContainer = styled_components_1.default.div `\n  display: flex;\n  height: 300px;\n  z-index: 9;\n  position: relative;\n`;\nconst SelectedArtworkOverlay = styled_components_1.default.div `\n  background-color: ${colors_1.default.purpleRegular};\n  height: 300px;\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  width: 100%;\n  opacity: 0.8;\n`;\nclass ArtworkState {\n}\nexports.ArtworkState = ArtworkState;\nclass Artwork extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSelected: false,\n        };\n    }\n    onSelect() {\n        this.setState({\n            isSelected: !this.state.isSelected,\n        });\n    }\n    render() {\n        return (React.createElement(\"div\", { style: { position: \"relative\" } },\n            React.createElement(ImageOuterContainer, { onClick: this.onSelect.bind(this) },\n                React.createElement(Image, { src: this.props.artwork.image.url })),\n            React.createElement(metadata_1.default, { artwork: this.props.artwork }),\n            this.state.isSelected && React.createElement(SelectedArtworkOverlay, { onClick: this.onSelect.bind(this) },\n                React.createElement(icon_1.default, { name: \"check\", color: \"black\" }))));\n    }\n}\nexports.Artwork = Artwork;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Relay.createContainer(Artwork, {\n    fragments: {\n        artwork: () => Relay.QL `\n      fragment on Artwork {\n        image {\n          url(version: \"large\")\n          aspect_ratio\n        }\n       ${metadata_1.default.getFragment(\"artwork\")}\n      }\n    `,\n    },\n});\n","import { PositionInFile } from 'tslint/lib/test/lintError';\nimport { IEnableDisablePosition } from 'tslint/lib';\nimport * as React from \"react\"\nimport * as Relay from \"react-relay\"\nimport styled from \"styled-components\"\nimport ArtworkMetadata from \"./metadata\"\nimport colors from \"../../assets/colors\"\nimport Icon from \"../icon\"\n\nconst Image = styled.img`\n  width: 100%;\n  align-self: center;\n`\nconst ImageOuterContainer = styled.div`\n  display: flex;\n  height: 300px;\n  z-index: 9;\n  position: relative;\n`\n\nconst SelectedArtworkOverlay = styled.div`\n  background-color: ${colors.purpleRegular};\n  height: 300px;\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  width: 100%;\n  opacity: 0.8;\n`\n\nexport class ArtworkState {\n  isSelected: boolean\n}\n\nexport class Artwork extends React.Component<RelayProps, ArtworkState> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isSelected: false,\n    }\n  }\n  onSelect() {\n    this.setState({\n      isSelected: !this.state.isSelected,\n    })\n  }\n\n  render() {\n    return (\n      <div style={ { position: \"relative\" } } >\n        <ImageOuterContainer onClick={this.onSelect.bind(this)} >\n          <Image src={this.props.artwork.image.url} />\n        </ImageOuterContainer>\n        <ArtworkMetadata artwork={this.props.artwork} />\n        {this.state.isSelected &&<SelectedArtworkOverlay onClick={this.onSelect.bind(this)}> \n          <Icon name=\"check\" color=\"black\"/>\n        </SelectedArtworkOverlay>}\n      </div>\n    )\n  }\n}\n\nexport default Relay.createContainer(Artwork, {\n  fragments: {\n    artwork: () => Relay.QL`\n      fragment on Artwork {\n        image {\n          url(version: \"large\")\n          aspect_ratio\n        }\n       ${ArtworkMetadata.getFragment(\"artwork\")}\n      }\n    `,\n  },\n})\n\ninterface RelayProps {\n  artwork: {\n    image: {\n      url: string | null,\n      aspect_ratio: number | null,\n    } | null,\n  },\n}\n"]}