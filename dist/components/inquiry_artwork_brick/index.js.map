{"version":3,"sources":["components/inquiry_artwork_brick/index.js","../src/components/inquiry_artwork_brick/index.tsx"],"names":["React","require","Relay","styled_components_1","colors_1","icon_1","metadata_1","defaultHeight","defaultWidth","InquiryArtworkBrick","default","div","ImageContainer","ImageOuterContainer","ImageInnerContainer","Image","img","SelectedArtworkOverlay","purpleRegular","Artwork","props","state","isSelected","setState","selectedOverlay","createElement","name","color","onClick","onSelect","bind","src","artwork","image","url","Component","exports","Object","defineProperty","value","createContainer","fragments","getFragment"],"mappings":"AAAA,a;ACAA,IAAAA,QAAAC,QAAA,OAAA,CAAA;AACA,IAAAC,QAAAD,QAAA,aAAA,CAAA;AACA,IAAAE,sBAAAF,QAAA,mBAAA,CAAA;AACA,IAAAG,WAAAH,QAAA,qBAAA,CAAA;AACA,IAAAI,SAAAJ,QAAA,SAAA,CAAA;AACA,IAAAK,aAAAL,QAAA,YAAA,CAAA;AAEA,IAAMM,gBAAgB,OAAtB;AACA,IAAMC,eAAe,OAArB;AAEA,IAAMC,sBAAsBN,oBAAAO,OAAA,CAAOC,GAA7B,iBAAN;;;AAIA,IAAMC,iBAAiBT,oBAAAO,OAAA,CAAOC,GAAxB;AACMJ,aADN;AAEKC,YAFL,CAAN;;;AAMA,IAAMK,sBAAsBV,oBAAAO,OAAA,CAAOC,GAA7B,kBAAN;;;;;AAMA,IAAMG,sBAAsBX,oBAAAO,OAAA,CAAOC,GAA7B,kBAAN;;;;;;;AAQA,IAAMI,QAAQZ,oBAAAO,OAAA,CAAOM,GAAf;;AAEUT,aAFV,CAAN;;;AAMA,IAAMU,yBAAyBd,oBAAAO,OAAA,CAAOC,GAAhC;AACgBP,SAAAM,OAAA,CAAOQ,aADvB;AAEMX,aAFN;AAGKC,YAHL;;;;;;;AAUWD,aAVX,CAAN,C;;;AAkBAY,O;AACE,qBAAYC,KAAZ,EAAiB;AACTA,aADS;AAEf,cAAKC,KAAL,GAAa;AACXC,wBAAY,KADD,EAAb,CAFe;;AAKhB,K;AAEO;AACN,iBAAKC,QAAL,CAAc;AACZD,4BAAY,CAAC,KAAKD,KAAL,CAAWC,UADZ,EAAd;;AAGD,S;AAEK;AACJ,gBAAIE,wBAAJ;AACA,gBAAI,KAAKH,KAAL,CAAWC,UAAf,EAA2B;AACzBE,kCACExB,MAAAyB,aAAA,CAACR,sBAAD,EAAuB,IAAvB;AACEjB,sBAAAyB,aAAA,CAACpB,OAAAK,OAAD,EAAK,EAACgB,MAAK,OAAN,EAAcC,OAAM,OAApB,EAAL,CADF,CADF;AAKD;AACD,mBACE3B,MAAAyB,aAAA,CAAChB,mBAAD,EAAoB,IAApB;AACET,kBAAAyB,aAAA,CAACb,cAAD,EAAe,IAAf;AACEZ,kBAAAyB,aAAA,CAACZ,mBAAD,EAAoB,EAACe,SAAS,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAV,EAApB;AACE9B,kBAAAyB,aAAA,CAACX,mBAAD,EAAoB,IAApB;AACEd,kBAAAyB,aAAA,CAACV,KAAD,EAAM,EAACgB,KAAK,KAAKX,KAAL,CAAWY,OAAX,CAAmBC,KAAnB,CAAyBC,GAA/B,EAAN,CADF,CADF,CADF,CADF;AAQElC,kBAAAyB,aAAA,CAACnB,WAAAI,OAAD,EAAgB,EAACsB,SAAS,KAAKZ,KAAL,CAAWY,OAArB,EAAhB,CARF;AAUGR,2BAVH,CADF;AAcD,S,sBArC0BxB,MAAMmC,S;;AAAnCC,QAAAjB,OAAA,GAAAA,OAAA;ADiBAkB,OAAOC,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,EAAEG,OAAO,IAAT,EAA7C;ACuBAH,QAAA1B,OAAA,GAAeR,MAAMsC,eAAN,CAAsBrB,OAAtB,EAA+B;AAC5CsB,eAAW;AACTT,iBAAS;;;;;AAKJ1B,uBAAAI,OAAA,CAAgBgC,WAAhB,CAA4B,SAA5B,CALI,GADA,EADiC,EAA/B,CAAf","file":"index.js","sourcesContent":["\"use strict\";\nconst React = require(\"react\");\nconst Relay = require(\"react-relay\");\nconst styled_components_1 = require(\"styled-components\");\nconst colors_1 = require(\"../../assets/colors\");\nconst icon_1 = require(\"../icon\");\nconst metadata_1 = require(\"./metadata\");\nconst defaultHeight = \"350px\";\nconst defaultWidth = \"350px\";\nconst InquiryArtworkBrick = styled_components_1.default.div `\n  position: relative;\n`;\nconst ImageContainer = styled_components_1.default.div `\n  height: ${defaultHeight}; \n  width: ${defaultWidth};\n  overflow: hidden;\n`;\nconst ImageOuterContainer = styled_components_1.default.div `\n  display: table;\n  width: 100%;\n  height: 100%;\n`;\nconst ImageInnerContainer = styled_components_1.default.div `\n  display: table-cell;\n  vertical-align: middle;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n`;\nconst Image = styled_components_1.default.img `\n  max-width: 100%;\n  max-height: ${defaultHeight};\n  margin: auto;\n`;\nconst SelectedArtworkOverlay = styled_components_1.default.div `\n  background-color: ${colors_1.default.purpleRegular};\n  height: ${defaultHeight};\n  width: ${defaultWidth};\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  opacity: 0.8;\n  text-align: center;\n  line-height: ${defaultHeight};\n  pointer-events: none;\n`;\nclass Artwork extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSelected: false,\n        };\n    }\n    onSelect() {\n        this.setState({\n            isSelected: !this.state.isSelected,\n        });\n    }\n    render() {\n        let selectedOverlay;\n        if (this.state.isSelected) {\n            selectedOverlay = (React.createElement(SelectedArtworkOverlay, null,\n                React.createElement(icon_1.default, { name: \"check\", color: \"white\" })));\n        }\n        return (React.createElement(InquiryArtworkBrick, null,\n            React.createElement(ImageContainer, null,\n                React.createElement(ImageOuterContainer, { onClick: this.onSelect.bind(this) },\n                    React.createElement(ImageInnerContainer, null,\n                        React.createElement(Image, { src: this.props.artwork.image.url })))),\n            React.createElement(metadata_1.default, { artwork: this.props.artwork }),\n            selectedOverlay));\n    }\n}\nexports.Artwork = Artwork;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Relay.createContainer(Artwork, {\n    fragments: {\n        artwork: () => Relay.QL `\n      fragment on Artwork {\n        image {\n          url(version: \"large\")\n        }\n       ${metadata_1.default.getFragment(\"artwork\")}\n      }\n    `,\n    },\n});\n","import * as React from \"react\"\nimport * as Relay from \"react-relay\"\nimport styled from \"styled-components\"\nimport colors from \"../../assets/colors\"\nimport Icon from \"../icon\"\nimport ArtworkMetadata from \"./metadata\"\n\nconst defaultHeight = \"350px\"\nconst defaultWidth = \"350px\"\n\nconst InquiryArtworkBrick = styled.div`\n  position: relative;\n`\n\nconst ImageContainer = styled.div`\n  height: ${defaultHeight}; \n  width: ${defaultWidth};\n  overflow: hidden;\n`\n\nconst ImageOuterContainer = styled.div`\n  display: table;\n  width: 100%;\n  height: 100%;\n`\n\nconst ImageInnerContainer = styled.div`\n  display: table-cell;\n  vertical-align: middle;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n`\n\nconst Image = styled.img`\n  max-width: 100%;\n  max-height: ${defaultHeight};\n  margin: auto;\n`\n\nconst SelectedArtworkOverlay = styled.div`\n  background-color: ${colors.purpleRegular};\n  height: ${defaultHeight};\n  width: ${defaultWidth};\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  opacity: 0.8;\n  text-align: center;\n  line-height: ${defaultHeight};\n  pointer-events: none;\n`\n\ninterface ArtworkState {\n  isSelected: boolean\n}\n\nexport class Artwork extends React.Component<RelayProps, ArtworkState> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isSelected: false,\n    }\n  }\n\n  onSelect() {\n    this.setState({\n      isSelected: !this.state.isSelected,\n    })\n  }\n\n  render() {\n    let selectedOverlay\n    if (this.state.isSelected) {\n      selectedOverlay = (\n        <SelectedArtworkOverlay> \n          <Icon name=\"check\" color=\"white\" />\n        </SelectedArtworkOverlay>\n      )\n    }\n    return (\n      <InquiryArtworkBrick>\n        <ImageContainer>\n          <ImageOuterContainer onClick={this.onSelect.bind(this)} >\n            <ImageInnerContainer>\n              <Image src={this.props.artwork.image.url} />\n            </ImageInnerContainer>\n          </ImageOuterContainer>\n        </ImageContainer>\n        <ArtworkMetadata artwork={this.props.artwork} />\n\n        {selectedOverlay}\n      </InquiryArtworkBrick>\n    )\n  }\n}\n\nexport default Relay.createContainer(Artwork, {\n  fragments: {\n    artwork: () => Relay.QL`\n      fragment on Artwork {\n        image {\n          url(version: \"large\")\n        }\n       ${ArtworkMetadata.getFragment(\"artwork\")}\n      }\n    `,\n  },\n})\n\ninterface RelayProps {\n  artwork: {\n    image: {\n      url: string | null,\n    } | null,\n  },\n}\n"]}