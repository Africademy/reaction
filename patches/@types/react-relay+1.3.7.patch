patch-package
--- a/node_modules/@types/react-relay/index.d.ts
+++ b/node_modules/@types/react-relay/index.d.ts
@@ -9,6 +9,10 @@
 // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
 // TypeScript Version: 2.8
 
+// Prettified with:
+// $ prettier --parser typescript --tab-width 4 --semi --trailing-comma es5 --write --print-width 120 \
+//   types/{react-relay,relay-runtime}/{,*}/*.ts*
+
 export {
     commitLocalUpdate,
     commitRelayModernMutation as commitMutation,
@@ -24,7 +28,16 @@ import * as RelayRuntimeTypes from "relay-runtime";
 // Utility types
 // ~~~~~~~~~~~~~~~~~~~~~
 
-export type FragmentOrRegularProp<T> = T extends { ' $refType': infer U } ? { ' $fragmentRefs': U } : T;
+export interface _RefType<T> {
+    " $refType": T;
+}
+export interface _FragmentRefs<T> {
+    " $fragmentRefs": T;
+}
+
+export type FragmentOrRegularProp<T> = T extends _RefType<infer U>
+    ? _FragmentRefs<U>
+    : T extends ReadonlyArray<_RefType<infer U>> ? ReadonlyArray<_FragmentRefs<U>> : T;
 
 export type MappedFragmentProps<T> = { [K in keyof T]: FragmentOrRegularProp<T[K]> };
 
@@ -113,8 +126,8 @@ export interface PageInfo {
     startCursor: string | undefined | null;
 }
 export interface ConnectionData {
-    edges?: any[];
-    pageInfo?: PageInfo;
+    edges?: ReadonlyArray<any>;
+    pageInfo?: Partial<PageInfo>;
 }
 export type RelayPaginationProp = RelayProp & {
     hasMore(): boolean;
@@ -134,9 +147,9 @@ export function FragmentVariablesGetter(
     prevVars: RelayRuntimeTypes.Variables,
     totalCount: number
 ): RelayRuntimeTypes.Variables;
-export interface ConnectionConfig<T> {
+export interface ConnectionConfig<P> {
     direction?: "backward" | "forward";
-    getConnectionFromProps?(props: T): ConnectionData | undefined | null;
+    getConnectionFromProps?(props: P): ConnectionData | undefined | null;
     getFragmentVariables?: typeof FragmentVariablesGetter;
     getVariables(
         props: { [propName: string]: any },
